
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a284  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  0800a424  0800a424  0000b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a71c  0800a71c  0000c14c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a71c  0800a71c  0000b71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a724  0800a724  0000c14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a724  0800a724  0000b724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a728  0800a728  0000b728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800a72c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e44  2000014c  0800a878  0000c14c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f90  0800a878  0000cf90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c14c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001703d  00000000  00000000  0000c17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370d  00000000  00000000  000231b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  000268c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f3a  00000000  00000000  00027c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001965b  00000000  00000000  00028baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001882c  00000000  00000000  00042205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092923  00000000  00000000  0005aa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed354  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bc0  00000000  00000000  000ed398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000f2f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000014c 	.word	0x2000014c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a40c 	.word	0x0800a40c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000150 	.word	0x20000150
 80001dc:	0800a40c 	.word	0x0800a40c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <sendCommandToSB>:
void MX_USART1_UART_Init(void);
void MX_TIM2_Init(void);

void updateLED(uint8_t car);

void sendCommandToSB(const char* cmd) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    CDC_Transmit_FS((uint8_t*)cmd, strlen(cmd));
 80005e4:	6878      	ldr	r0, [r7, #4]
 80005e6:	f7ff fe05 	bl	80001f4 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	4619      	mov	r1, r3
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f007 ffeb 	bl	80085cc <CDC_Transmit_FS>
    HAL_UART_Transmit(&huart1, (uint8_t*)cmd, strlen(cmd), 100);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f7ff fdfc 	bl	80001f4 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	2364      	movs	r3, #100	@ 0x64
 8000602:	6879      	ldr	r1, [r7, #4]
 8000604:	4803      	ldr	r0, [pc, #12]	@ (8000614 <sendCommandToSB+0x38>)
 8000606:	f003 fc21 	bl	8003e4c <HAL_UART_Transmit>
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	200001b0 	.word	0x200001b0

08000618 <moveCar>:

void moveCar(uint8_t car, uint8_t from, uint8_t to) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af02      	add	r7, sp, #8
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	460b      	mov	r3, r1
 8000624:	71bb      	strb	r3, [r7, #6]
 8000626:	4613      	mov	r3, r2
 8000628:	717b      	strb	r3, [r7, #5]
    char cmd[32];
    if (from < to)
 800062a:	79ba      	ldrb	r2, [r7, #6]
 800062c:	797b      	ldrb	r3, [r7, #5]
 800062e:	429a      	cmp	r2, r3
 8000630:	d20a      	bcs.n	8000648 <moveCar+0x30>
        snprintf(cmd, sizeof(cmd), "UP,%d,%d\r\n", car, to);
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	797b      	ldrb	r3, [r7, #5]
 8000636:	f107 0008 	add.w	r0, r7, #8
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	4a0e      	ldr	r2, [pc, #56]	@ (8000678 <moveCar+0x60>)
 8000640:	2120      	movs	r1, #32
 8000642:	f008 fdcb 	bl	80091dc <sniprintf>
 8000646:	e00d      	b.n	8000664 <moveCar+0x4c>
    else if (from > to)
 8000648:	79ba      	ldrb	r2, [r7, #6]
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	429a      	cmp	r2, r3
 800064e:	d90f      	bls.n	8000670 <moveCar+0x58>
        snprintf(cmd, sizeof(cmd), "Down,%d,%d\r\n", car, to);
 8000650:	79fa      	ldrb	r2, [r7, #7]
 8000652:	797b      	ldrb	r3, [r7, #5]
 8000654:	f107 0008 	add.w	r0, r7, #8
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	4613      	mov	r3, r2
 800065c:	4a07      	ldr	r2, [pc, #28]	@ (800067c <moveCar+0x64>)
 800065e:	2120      	movs	r1, #32
 8000660:	f008 fdbc 	bl	80091dc <sniprintf>
    else return;
    sendCommandToSB(cmd);
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffb7 	bl	80005dc <sendCommandToSB>
 800066e:	e000      	b.n	8000672 <moveCar+0x5a>
    else return;
 8000670:	bf00      	nop
}
 8000672:	3728      	adds	r7, #40	@ 0x28
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	0800a424 	.word	0x0800a424
 800067c:	0800a430 	.word	0x0800a430

08000680 <handleUserRequest>:


void handleUserRequest(uint8_t from, uint8_t to) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
    handleCall(from, to);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	79ba      	ldrb	r2, [r7, #6]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f804 	bl	80006a4 <handleCall>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <handleCall>:

void handleCall(uint8_t from, uint8_t to) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	460a      	mov	r2, r1
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	4613      	mov	r3, r2
 80006b2:	71bb      	strb	r3, [r7, #6]
    int bestCar = -1;
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295
 80006b8:	61fb      	str	r3, [r7, #28]
    int bestScore = 255;
 80006ba:	23ff      	movs	r3, #255	@ 0xff
 80006bc:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < NUM_CAR; i++) {
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
 80006c2:	e028      	b.n	8000716 <handleCall+0x72>
        int dist = abs(cReg[i].currFloor - from);
 80006c4:	4934      	ldr	r1, [pc, #208]	@ (8000798 <handleCall+0xf4>)
 80006c6:	697a      	ldr	r2, [r7, #20]
 80006c8:	4613      	mov	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	440b      	add	r3, r1
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	1ad3      	subs	r3, r2, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	bfb8      	it	lt
 80006de:	425b      	neglt	r3, r3
 80006e0:	60fb      	str	r3, [r7, #12]
        int score = dist + (cReg[i].totalWork / 2);
 80006e2:	492d      	ldr	r1, [pc, #180]	@ (8000798 <handleCall+0xf4>)
 80006e4:	697a      	ldr	r2, [r7, #20]
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	440b      	add	r3, r1
 80006f0:	3308      	adds	r3, #8
 80006f2:	881b      	ldrh	r3, [r3, #0]
 80006f4:	085b      	lsrs	r3, r3, #1
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	461a      	mov	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
        if (score < bestScore) {
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	429a      	cmp	r2, r3
 8000706:	da03      	bge.n	8000710 <handleCall+0x6c>
            bestScore = score;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	61bb      	str	r3, [r7, #24]
            bestCar = i;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < NUM_CAR; i++) {
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	2b02      	cmp	r3, #2
 800071a:	ddd3      	ble.n	80006c4 <handleCall+0x20>
        }
    }

    if (bestCar >= 0 && from != to) {
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db35      	blt.n	800078e <handleCall+0xea>
 8000722:	79fa      	ldrb	r2, [r7, #7]
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	429a      	cmp	r2, r3
 8000728:	d031      	beq.n	800078e <handleCall+0xea>
        CarState* car = &cReg[bestCar];
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4613      	mov	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4a18      	ldr	r2, [pc, #96]	@ (8000798 <handleCall+0xf4>)
 8000736:	4413      	add	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        car->targetFloor = from;
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	79fa      	ldrb	r2, [r7, #7]
 800073e:	705a      	strb	r2, [r3, #1]
        car->isMoving = 1;
 8000740:	693b      	ldr	r3, [r7, #16]
 8000742:	2201      	movs	r2, #1
 8000744:	709a      	strb	r2, [r3, #2]
        car->tick = 0;
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	2200      	movs	r2, #0
 800074a:	80da      	strh	r2, [r3, #6]
        car->moveTimeMs = 2000;
 800074c:	693b      	ldr	r3, [r7, #16]
 800074e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000752:	809a      	strh	r2, [r3, #4]
        car->totalWork += abs(car->currFloor - from);
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	891a      	ldrh	r2, [r3, #8]
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	1acb      	subs	r3, r1, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	bfb8      	it	lt
 8000766:	425b      	neglt	r3, r3
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29a      	uxth	r2, r3
 800076e:	693b      	ldr	r3, [r7, #16]
 8000770:	811a      	strh	r2, [r3, #8]
        moveCar(bestCar, car->currFloor, from);
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	b2d8      	uxtb	r0, r3
 8000776:	693b      	ldr	r3, [r7, #16]
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	79fa      	ldrb	r2, [r7, #7]
 800077c:	4619      	mov	r1, r3
 800077e:	f7ff ff4b 	bl	8000618 <moveCar>
        userFloor = from;
 8000782:	4a06      	ldr	r2, [pc, #24]	@ (800079c <handleCall+0xf8>)
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	7013      	strb	r3, [r2, #0]
        userReq = to;
 8000788:	4a05      	ldr	r2, [pc, #20]	@ (80007a0 <handleCall+0xfc>)
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	7013      	strb	r3, [r2, #0]
    }
}
 800078e:	bf00      	nop
 8000790:	3720      	adds	r7, #32
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001f8 	.word	0x200001f8
 800079c:	20000216 	.word	0x20000216
 80007a0:	20000217 	.word	0x20000217

080007a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b4:	d17e      	bne.n	80008b4 <HAL_TIM_PeriodElapsedCallback+0x110>
        for (int i = 0; i < NUM_CAR; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e078      	b.n	80008ae <HAL_TIM_PeriodElapsedCallback+0x10a>
            CarState* car = &cReg[i];
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	4613      	mov	r3, r2
 80007c0:	009b      	lsls	r3, r3, #2
 80007c2:	4413      	add	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4a3d      	ldr	r2, [pc, #244]	@ (80008bc <HAL_TIM_PeriodElapsedCallback+0x118>)
 80007c8:	4413      	add	r3, r2
 80007ca:	60bb      	str	r3, [r7, #8]
            if (car->isMoving) {
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	789b      	ldrb	r3, [r3, #2]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d069      	beq.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x104>
                car->tick += 100;
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	88db      	ldrh	r3, [r3, #6]
 80007d8:	3364      	adds	r3, #100	@ 0x64
 80007da:	b29a      	uxth	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	80da      	strh	r2, [r3, #6]
                if (car->tick >= car->moveTimeMs) {
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	88da      	ldrh	r2, [r3, #6]
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	889b      	ldrh	r3, [r3, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d35d      	bcc.n	80008a8 <HAL_TIM_PeriodElapsedCallback+0x104>
                    car->tick = 0;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	2200      	movs	r2, #0
 80007f0:	80da      	strh	r2, [r3, #6]
                    if (car->currFloor < car->targetFloor) car->currFloor++;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d206      	bcs.n	800080c <HAL_TIM_PeriodElapsedCallback+0x68>
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	3301      	adds	r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	e00b      	b.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x80>
                    else if (car->currFloor > car->targetFloor) car->currFloor--;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	785b      	ldrb	r3, [r3, #1]
 8000814:	429a      	cmp	r2, r3
 8000816:	d905      	bls.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	3b01      	subs	r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	701a      	strb	r2, [r3, #0]

                    if (car->currFloor == car->targetFloor) {
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	781a      	ldrb	r2, [r3, #0]
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	785b      	ldrb	r3, [r3, #1]
 800082c:	429a      	cmp	r2, r3
 800082e:	d136      	bne.n	800089e <HAL_TIM_PeriodElapsedCallback+0xfa>
                        if (car->currFloor == userFloor && userFloor != userReq) {
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	781a      	ldrb	r2, [r3, #0]
 8000834:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	429a      	cmp	r2, r3
 800083a:	d12d      	bne.n	8000898 <HAL_TIM_PeriodElapsedCallback+0xf4>
 800083c:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800083e:	781a      	ldrb	r2, [r3, #0]
 8000840:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	429a      	cmp	r2, r3
 8000846:	d027      	beq.n	8000898 <HAL_TIM_PeriodElapsedCallback+0xf4>
                            car->targetFloor = userReq;
 8000848:	4b1e      	ldr	r3, [pc, #120]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800084a:	781a      	ldrb	r2, [r3, #0]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	705a      	strb	r2, [r3, #1]
                            car->isMoving = 1;
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	2201      	movs	r2, #1
 8000854:	709a      	strb	r2, [r3, #2]
                            car->tick = 0;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	2200      	movs	r2, #0
 800085a:	80da      	strh	r2, [r3, #6]
                            car->totalWork += abs(car->currFloor - userReq);
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	891a      	ldrh	r2, [r3, #8]
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	4619      	mov	r1, r3
 8000866:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	1acb      	subs	r3, r1, r3
 800086c:	2b00      	cmp	r3, #0
 800086e:	bfb8      	it	lt
 8000870:	425b      	neglt	r3, r3
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	811a      	strh	r2, [r3, #8]
                            moveCar(i, car->currFloor, userReq);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	b2d8      	uxtb	r0, r3
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000886:	7812      	ldrb	r2, [r2, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f7ff fec5 	bl	8000618 <moveCar>
                            userFloor = userReq; // reset trigger
 800088e:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000890:	781a      	ldrb	r2, [r3, #0]
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000894:	701a      	strb	r2, [r3, #0]
 8000896:	e002      	b.n	800089e <HAL_TIM_PeriodElapsedCallback+0xfa>
                        } else {
                            car->isMoving = 0;
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2200      	movs	r2, #0
 800089c:	709a      	strb	r2, [r3, #2]
                        }
                    }
                    updateLED(i);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f810 	bl	80008c8 <updateLED>
        for (int i = 0; i < NUM_CAR; i++) {
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	dd83      	ble.n	80007bc <HAL_TIM_PeriodElapsedCallback+0x18>
                }
            }
        }
    }
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	200001f8 	.word	0x200001f8
 80008c0:	20000216 	.word	0x20000216
 80008c4:	20000217 	.word	0x20000217

080008c8 <updateLED>:

void updateLED(uint8_t car) {
 80008c8:	b5b0      	push	{r4, r5, r7, lr}
 80008ca:	b092      	sub	sp, #72	@ 0x48
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    if (car >= 3) return;
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b02      	cmp	r3, #2
 80008d6:	f200 808d 	bhi.w	80009f4 <updateLED+0x12c>

    uint8_t floor = cReg[car].currFloor;
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	4947      	ldr	r1, [pc, #284]	@ (80009fc <updateLED+0x134>)
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	440b      	add	r3, r1
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (car == 0) {
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d11e      	bne.n	8000932 <updateLED+0x6a>
        for (int f = 0; f < 8; f++) HAL_GPIO_WritePin(GPIOA, 1 << f, GPIO_PIN_RESET);
 80008f4:	2300      	movs	r3, #0
 80008f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80008f8:	e00c      	b.n	8000914 <updateLED+0x4c>
 80008fa:	2201      	movs	r2, #1
 80008fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	b29b      	uxth	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	483d      	ldr	r0, [pc, #244]	@ (8000a00 <updateLED+0x138>)
 800090a:	f000 ff57 	bl	80017bc <HAL_GPIO_WritePin>
 800090e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000910:	3301      	adds	r3, #1
 8000912:	647b      	str	r3, [r7, #68]	@ 0x44
 8000914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000916:	2b07      	cmp	r3, #7
 8000918:	ddef      	ble.n	80008fa <updateLED+0x32>
        HAL_GPIO_WritePin(GPIOA, 1 << floor, GPIO_PIN_SET);
 800091a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800091e:	2201      	movs	r2, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	b29b      	uxth	r3, r3
 8000926:	2201      	movs	r2, #1
 8000928:	4619      	mov	r1, r3
 800092a:	4835      	ldr	r0, [pc, #212]	@ (8000a00 <updateLED+0x138>)
 800092c:	f000 ff46 	bl	80017bc <HAL_GPIO_WritePin>
 8000930:	e061      	b.n	80009f6 <updateLED+0x12e>
    }

    else if (car == 1) {
 8000932:	79fb      	ldrb	r3, [r7, #7]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d11e      	bne.n	8000976 <updateLED+0xae>
        for (int f = 0; f < 8; f++) HAL_GPIO_WritePin(GPIOB, 1 << f, GPIO_PIN_RESET);
 8000938:	2300      	movs	r3, #0
 800093a:	643b      	str	r3, [r7, #64]	@ 0x40
 800093c:	e00c      	b.n	8000958 <updateLED+0x90>
 800093e:	2201      	movs	r2, #1
 8000940:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	2200      	movs	r2, #0
 800094a:	4619      	mov	r1, r3
 800094c:	482d      	ldr	r0, [pc, #180]	@ (8000a04 <updateLED+0x13c>)
 800094e:	f000 ff35 	bl	80017bc <HAL_GPIO_WritePin>
 8000952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000954:	3301      	adds	r3, #1
 8000956:	643b      	str	r3, [r7, #64]	@ 0x40
 8000958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800095a:	2b07      	cmp	r3, #7
 800095c:	ddef      	ble.n	800093e <updateLED+0x76>
        HAL_GPIO_WritePin(GPIOB, 1 << floor, GPIO_PIN_SET);
 800095e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000962:	2201      	movs	r2, #1
 8000964:	fa02 f303 	lsl.w	r3, r2, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	2201      	movs	r2, #1
 800096c:	4619      	mov	r1, r3
 800096e:	4825      	ldr	r0, [pc, #148]	@ (8000a04 <updateLED+0x13c>)
 8000970:	f000 ff24 	bl	80017bc <HAL_GPIO_WritePin>
 8000974:	e03f      	b.n	80009f6 <updateLED+0x12e>
    }

    else if (car == 2) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d13c      	bne.n	80009f6 <updateLED+0x12e>
        GPIO_TypeDef* ports[8] = {GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOB, GPIOA};
 800097c:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <updateLED+0x140>)
 800097e:	f107 0408 	add.w	r4, r7, #8
 8000982:	461d      	mov	r5, r3
 8000984:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000988:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800098c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uint16_t pins[8] = {
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <updateLED+0x144>)
 8000992:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000996:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000998:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10,
            GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15,
            GPIO_PIN_8
        };

        for (int i = 0; i < 8; i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009a0:	e012      	b.n	80009c8 <updateLED+0x100>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 80009a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	3348      	adds	r3, #72	@ 0x48
 80009a8:	443b      	add	r3, r7
 80009aa:	f853 0c40 	ldr.w	r0, [r3, #-64]
 80009ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	3348      	adds	r3, #72	@ 0x48
 80009b4:	443b      	add	r3, r7
 80009b6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80009ba:	2200      	movs	r2, #0
 80009bc:	4619      	mov	r1, r3
 80009be:	f000 fefd 	bl	80017bc <HAL_GPIO_WritePin>
        for (int i = 0; i < 8; i++) {
 80009c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009c4:	3301      	adds	r3, #1
 80009c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80009ca:	2b07      	cmp	r3, #7
 80009cc:	dde9      	ble.n	80009a2 <updateLED+0xda>
        }

        HAL_GPIO_WritePin(ports[floor], pins[floor], GPIO_PIN_SET);
 80009ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	3348      	adds	r3, #72	@ 0x48
 80009d6:	443b      	add	r3, r7
 80009d8:	f853 0c40 	ldr.w	r0, [r3, #-64]
 80009dc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	3348      	adds	r3, #72	@ 0x48
 80009e4:	443b      	add	r3, r7
 80009e6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4619      	mov	r1, r3
 80009ee:	f000 fee5 	bl	80017bc <HAL_GPIO_WritePin>
 80009f2:	e000      	b.n	80009f6 <updateLED+0x12e>
    if (car >= 3) return;
 80009f4:	bf00      	nop
    }
}
 80009f6:	3748      	adds	r7, #72	@ 0x48
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bdb0      	pop	{r4, r5, r7, pc}
 80009fc:	200001f8 	.word	0x200001f8
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400
 8000a08:	0800a440 	.word	0x0800a440
 8000a0c:	0800a460 	.word	0x0800a460

08000a10 <main>:
int main(void) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
    HAL_Init();
 8000a16:	f000 fb13 	bl	8001040 <HAL_Init>
    SystemClock_Config();
 8000a1a:	f000 f863 	bl	8000ae4 <SystemClock_Config>
    MX_GPIO_Init();
 8000a1e:	f000 f941 	bl	8000ca4 <MX_GPIO_Init>
    MX_TIM2_Init();
 8000a22:	f000 f8c7 	bl	8000bb4 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 8000a26:	f000 f913 	bl	8000c50 <MX_USART1_UART_Init>
    MX_USB_DEVICE_Init();
 8000a2a:	f007 fd73 	bl	8008514 <MX_USB_DEVICE_Init>

    for (int i = 0; i < NUM_CAR; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e043      	b.n	8000abc <main+0xac>
        cReg[i].currFloor = 0;
 8000a34:	4928      	ldr	r1, [pc, #160]	@ (8000ad8 <main+0xc8>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	440b      	add	r3, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]
        cReg[i].targetFloor = 0;
 8000a46:	4924      	ldr	r1, [pc, #144]	@ (8000ad8 <main+0xc8>)
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	3301      	adds	r3, #1
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
        cReg[i].isMoving = 0;
 8000a5a:	491f      	ldr	r1, [pc, #124]	@ (8000ad8 <main+0xc8>)
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	440b      	add	r3, r1
 8000a68:	3302      	adds	r3, #2
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
        cReg[i].moveTimeMs = 2000;
 8000a6e:	491a      	ldr	r1, [pc, #104]	@ (8000ad8 <main+0xc8>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	4413      	add	r3, r2
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000a82:	801a      	strh	r2, [r3, #0]
        cReg[i].tick = 0;
 8000a84:	4914      	ldr	r1, [pc, #80]	@ (8000ad8 <main+0xc8>)
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	4413      	add	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	440b      	add	r3, r1
 8000a92:	3306      	adds	r3, #6
 8000a94:	2200      	movs	r2, #0
 8000a96:	801a      	strh	r2, [r3, #0]
        cReg[i].totalWork = 0;
 8000a98:	490f      	ldr	r1, [pc, #60]	@ (8000ad8 <main+0xc8>)
 8000a9a:	687a      	ldr	r2, [r7, #4]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	440b      	add	r3, r1
 8000aa6:	3308      	adds	r3, #8
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	801a      	strh	r2, [r3, #0]
        updateLED(i);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff09 	bl	80008c8 <updateLED>
    for (int i = 0; i < NUM_CAR; i++) {
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	ddb8      	ble.n	8000a34 <main+0x24>
    }

    HAL_TIM_Base_Start_IT(&htim2);
 8000ac2:	4806      	ldr	r0, [pc, #24]	@ (8000adc <main+0xcc>)
 8000ac4:	f002 fd8e 	bl	80035e4 <HAL_TIM_Base_Start_IT>
    HAL_UART_Receive_IT(&huart1, 0, 1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2100      	movs	r1, #0
 8000acc:	4804      	ldr	r0, [pc, #16]	@ (8000ae0 <main+0xd0>)
 8000ace:	f003 fa48 	bl	8003f62 <HAL_UART_Receive_IT>

    while (1) {
 8000ad2:	bf00      	nop
 8000ad4:	e7fd      	b.n	8000ad2 <main+0xc2>
 8000ad6:	bf00      	nop
 8000ad8:	200001f8 	.word	0x200001f8
 8000adc:	20000168 	.word	0x20000168
 8000ae0:	200001b0 	.word	0x200001b0

08000ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b094      	sub	sp, #80	@ 0x50
 8000ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aea:	f107 0320 	add.w	r3, r7, #32
 8000aee:	2230      	movs	r2, #48	@ 0x30
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fbf8 	bl	80092e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af8:	f107 030c 	add.w	r3, r7, #12
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	4b27      	ldr	r3, [pc, #156]	@ (8000bac <SystemClock_Config+0xc8>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b10:	4a26      	ldr	r2, [pc, #152]	@ (8000bac <SystemClock_Config+0xc8>)
 8000b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b18:	4b24      	ldr	r3, [pc, #144]	@ (8000bac <SystemClock_Config+0xc8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	4b21      	ldr	r3, [pc, #132]	@ (8000bb0 <SystemClock_Config+0xcc>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a20      	ldr	r2, [pc, #128]	@ (8000bb0 <SystemClock_Config+0xcc>)
 8000b2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb0 <SystemClock_Config+0xcc>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b54:	2319      	movs	r3, #25
 8000b56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b58:	2390      	movs	r3, #144	@ 0x90
 8000b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b60:	2303      	movs	r3, #3
 8000b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b64:	f107 0320 	add.w	r3, r7, #32
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 f893 	bl	8002c94 <HAL_RCC_OscConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b74:	f000 f900 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b78:	230f      	movs	r3, #15
 8000b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b8e:	f107 030c 	add.w	r3, r7, #12
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f002 faf5 	bl	8003184 <HAL_RCC_ClockConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ba0:	f000 f8ea 	bl	8000d78 <Error_Handler>
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	3750      	adds	r7, #80	@ 0x50
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM2_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bba:	f107 0308 	add.w	r3, r7, #8
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	463b      	mov	r3, r7
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000bda:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000be8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfa:	4814      	ldr	r0, [pc, #80]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000bfc:	f002 fca2 	bl	8003544 <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c06:	f000 f8b7 	bl	8000d78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4619      	mov	r1, r3
 8000c16:	480d      	ldr	r0, [pc, #52]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000c18:	f002 fe36 	bl	8003888 <HAL_TIM_ConfigClockSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c22:	f000 f8a9 	bl	8000d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <MX_TIM2_Init+0x98>)
 8000c34:	f003 f838 	bl	8003ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c3e:	f000 f89b 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000168 	.word	0x20000168

08000c50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <MX_USART1_UART_Init+0x50>)
 8000c58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	@ (8000c9c <MX_USART1_UART_Init+0x4c>)
 8000c88:	f003 f890 	bl	8003dac <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c92:	f000 f871 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200001b0 	.word	0x200001b0
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b28      	ldr	r3, [pc, #160]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	4b24      	ldr	r3, [pc, #144]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b1a      	ldr	r3, [pc, #104]	@ (8000d6c <MX_GPIO_Init+0xc8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000d14:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <MX_GPIO_Init+0xcc>)
 8000d16:	f000 fd51 	bl	80017bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f24f 71ff 	movw	r1, #63487	@ 0xf7ff
 8000d20:	4814      	ldr	r0, [pc, #80]	@ (8000d74 <MX_GPIO_Init+0xd0>)
 8000d22:	f000 fd4b 	bl	80017bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d26:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8000d2a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <MX_GPIO_Init+0xcc>)
 8000d40:	f000 fbb8 	bl	80014b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d44:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8000d48:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <MX_GPIO_Init+0xd0>)
 8000d5e:	f000 fba9 	bl	80014b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d62:	bf00      	nop
 8000d64:	3720      	adds	r7, #32
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020400 	.word	0x40020400

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <Error_Handler+0x8>

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000de4:	d115      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <HAL_TIM_Base_MspInit+0x48>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dee:	4a0b      	ldr	r2, [pc, #44]	@ (8000e1c <HAL_TIM_Base_MspInit+0x48>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df6:	4b09      	ldr	r3, [pc, #36]	@ (8000e1c <HAL_TIM_Base_MspInit+0x48>)
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	201c      	movs	r0, #28
 8000e08:	f000 fa8b 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e0c:	201c      	movs	r0, #28
 8000e0e:	f000 faa4 	bl	800135a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800

08000e20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	@ 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000eb4 <HAL_UART_MspInit+0x94>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d134      	bne.n	8000eac <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e52:	4b19      	ldr	r3, [pc, #100]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f003 0310 	and.w	r3, r3, #16
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a14      	ldr	r2, [pc, #80]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_UART_MspInit+0x98>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e7a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e8c:	2307      	movs	r3, #7
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4809      	ldr	r0, [pc, #36]	@ (8000ebc <HAL_UART_MspInit+0x9c>)
 8000e98:	f000 fb0c 	bl	80014b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2025      	movs	r0, #37	@ 0x25
 8000ea2:	f000 fa3e 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea6:	2025      	movs	r0, #37	@ 0x25
 8000ea8:	f000 fa57 	bl	800135a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	@ 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40011000 	.word	0x40011000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <HardFault_Handler+0x4>

08000ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f16:	f000 f8e5 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
	...

08000f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f24:	4802      	ldr	r0, [pc, #8]	@ (8000f30 <TIM2_IRQHandler+0x10>)
 8000f26:	f002 fbbf 	bl	80036a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000168 	.word	0x20000168

08000f34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f38:	4802      	ldr	r0, [pc, #8]	@ (8000f44 <USART1_IRQHandler+0x10>)
 8000f3a:	f003 f837 	bl	8003fac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001b0 	.word	0x200001b0

08000f48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <OTG_FS_IRQHandler+0x10>)
 8000f4e:	f000 fd92 	bl	8001a76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20001744 	.word	0x20001744

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f008 f9c6 	bl	800931c <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20020000 	.word	0x20020000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	20001f90 	.word	0x20001f90

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f008 f985 	bl	8009328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fcf7 	bl	8000a10 <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001024:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8001030:	0800a72c 	.word	0x0800a72c
  ldr r2, =_sbss
 8001034:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001038:	20001f90 	.word	0x20001f90

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f94f 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fe86 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f967 	bl	8001376 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f92f 	bl	8001322 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	2000021c 	.word	0x2000021c

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	2000021c 	.word	0x2000021c

08001124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800112c:	f7ff ffee 	bl	800110c <HAL_GetTick>
 8001130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800113c:	d005      	beq.n	800114a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_Delay+0x44>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800114a:	bf00      	nop
 800114c:	f7ff ffde 	bl	800110c <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	429a      	cmp	r2, r3
 800115a:	d8f7      	bhi.n	800114c <HAL_Delay+0x28>
  {
  }
}
 800115c:	bf00      	nop
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008

0800116c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001188:	4013      	ands	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001194:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800119c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800119e:	4a04      	ldr	r2, [pc, #16]	@ (80011b0 <__NVIC_SetPriorityGrouping+0x44>)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	60d3      	str	r3, [r2, #12]
}
 80011a4:	bf00      	nop
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__NVIC_GetPriorityGrouping+0x18>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	0a1b      	lsrs	r3, r3, #8
 80011be:	f003 0307 	and.w	r3, r3, #7
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db0b      	blt.n	80011fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	f003 021f 	and.w	r2, r3, #31
 80011e8:	4907      	ldr	r1, [pc, #28]	@ (8001208 <__NVIC_EnableIRQ+0x38>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	095b      	lsrs	r3, r3, #5
 80011f0:	2001      	movs	r0, #1
 80011f2:	fa00 f202 	lsl.w	r2, r0, r2
 80011f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	@ (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	@ (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	@ 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
	...

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff8e 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	@ (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	@ (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff29 	bl	800116c <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff3e 	bl	80011b4 <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff8e 	bl	8001260 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5d 	bl	800120c <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff31 	bl	80011d0 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff feb6 	bl	800110c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d008      	beq.n	80013c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e052      	b.n	8001466 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0216 	bic.w	r2, r2, #22
 80013ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d103      	bne.n	80013f0 <HAL_DMA_Abort+0x62>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0208 	bic.w	r2, r2, #8
 80013fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001410:	e013      	b.n	800143a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001412:	f7ff fe7b 	bl	800110c <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b05      	cmp	r3, #5
 800141e:	d90c      	bls.n	800143a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2220      	movs	r2, #32
 8001424:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e015      	b.n	8001466 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	2b00      	cmp	r3, #0
 8001446:	d1e4      	bne.n	8001412 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800144c:	223f      	movs	r2, #63	@ 0x3f
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d004      	beq.n	800148c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2280      	movs	r2, #128	@ 0x80
 8001486:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e00c      	b.n	80014a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2205      	movs	r2, #5
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b089      	sub	sp, #36	@ 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	e159      	b.n	8001784 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014d0:	2201      	movs	r2, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	697a      	ldr	r2, [r7, #20]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8148 	bne.w	800177e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d005      	beq.n	8001506 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001502:	2b02      	cmp	r3, #2
 8001504:	d130      	bne.n	8001568 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	2203      	movs	r2, #3
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800153c:	2201      	movs	r2, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4013      	ands	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 0201 	and.w	r2, r3, #1
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f003 0303 	and.w	r3, r3, #3
 8001570:	2b03      	cmp	r3, #3
 8001572:	d017      	beq.n	80015a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d123      	bne.n	80015f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	f003 0307 	and.w	r3, r3, #7
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	220f      	movs	r2, #15
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	691a      	ldr	r2, [r3, #16]
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	08da      	lsrs	r2, r3, #3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3208      	adds	r2, #8
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	2203      	movs	r2, #3
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 0203 	and.w	r2, r3, #3
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 80a2 	beq.w	800177e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b57      	ldr	r3, [pc, #348]	@ (800179c <HAL_GPIO_Init+0x2e8>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a56      	ldr	r2, [pc, #344]	@ (800179c <HAL_GPIO_Init+0x2e8>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b54      	ldr	r3, [pc, #336]	@ (800179c <HAL_GPIO_Init+0x2e8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001656:	4a52      	ldr	r2, [pc, #328]	@ (80017a0 <HAL_GPIO_Init+0x2ec>)
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	089b      	lsrs	r3, r3, #2
 800165c:	3302      	adds	r3, #2
 800165e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	220f      	movs	r2, #15
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a49      	ldr	r2, [pc, #292]	@ (80017a4 <HAL_GPIO_Init+0x2f0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d019      	beq.n	80016b6 <HAL_GPIO_Init+0x202>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a48      	ldr	r2, [pc, #288]	@ (80017a8 <HAL_GPIO_Init+0x2f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d013      	beq.n	80016b2 <HAL_GPIO_Init+0x1fe>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a47      	ldr	r2, [pc, #284]	@ (80017ac <HAL_GPIO_Init+0x2f8>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d00d      	beq.n	80016ae <HAL_GPIO_Init+0x1fa>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a46      	ldr	r2, [pc, #280]	@ (80017b0 <HAL_GPIO_Init+0x2fc>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_GPIO_Init+0x1f6>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a45      	ldr	r2, [pc, #276]	@ (80017b4 <HAL_GPIO_Init+0x300>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d101      	bne.n	80016a6 <HAL_GPIO_Init+0x1f2>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e008      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016a6:	2307      	movs	r3, #7
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016aa:	2303      	movs	r3, #3
 80016ac:	e004      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_GPIO_Init+0x204>
 80016b6:	2300      	movs	r3, #0
 80016b8:	69fa      	ldr	r2, [r7, #28]
 80016ba:	f002 0203 	and.w	r2, r2, #3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4093      	lsls	r3, r2
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c8:	4935      	ldr	r1, [pc, #212]	@ (80017a0 <HAL_GPIO_Init+0x2ec>)
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	3302      	adds	r3, #2
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d6:	4b38      	ldr	r3, [pc, #224]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016fa:	4a2f      	ldr	r2, [pc, #188]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001700:	4b2d      	ldr	r3, [pc, #180]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001724:	4a24      	ldr	r2, [pc, #144]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800172a:	4b23      	ldr	r3, [pc, #140]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174e:	4a1a      	ldr	r2, [pc, #104]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001754:	4b18      	ldr	r3, [pc, #96]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	43db      	mvns	r3, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4013      	ands	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d003      	beq.n	8001778 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4313      	orrs	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001778:	4a0f      	ldr	r2, [pc, #60]	@ (80017b8 <HAL_GPIO_Init+0x304>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3301      	adds	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	2b0f      	cmp	r3, #15
 8001788:	f67f aea2 	bls.w	80014d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3724      	adds	r7, #36	@ 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40013800 	.word	0x40013800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40013c00 	.word	0x40013c00

080017bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	807b      	strh	r3, [r7, #2]
 80017c8:	4613      	mov	r3, r2
 80017ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017cc:	787b      	ldrb	r3, [r7, #1]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d8:	e003      	b.n	80017e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017da:	887b      	ldrh	r3, [r7, #2]
 80017dc:	041a      	lsls	r2, r3, #16
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	619a      	str	r2, [r3, #24]
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af02      	add	r7, sp, #8
 80017f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e101      	b.n	8001a04 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f007 f94a 	bl	8008ab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2203      	movs	r2, #3
 8001824:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800182e:	d102      	bne.n	8001836 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fc43 	bl	80050c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7c1a      	ldrb	r2, [r3, #16]
 8001848:	f88d 2000 	strb.w	r2, [sp]
 800184c:	3304      	adds	r3, #4
 800184e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001850:	f003 fb22 	bl	8004e98 <USB_CoreInit>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2202      	movs	r2, #2
 800185e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e0ce      	b.n	8001a04 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fc3b 	bl	80050e8 <USB_SetCurrentMode>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d005      	beq.n	8001884 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0bf      	b.n	8001a04 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e04a      	b.n	8001920 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800188a:	7bfa      	ldrb	r2, [r7, #15]
 800188c:	6879      	ldr	r1, [r7, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	440b      	add	r3, r1
 8001898:	3315      	adds	r3, #21
 800189a:	2201      	movs	r2, #1
 800189c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800189e:	7bfa      	ldrb	r2, [r7, #15]
 80018a0:	6879      	ldr	r1, [r7, #4]
 80018a2:	4613      	mov	r3, r2
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	440b      	add	r3, r1
 80018ac:	3314      	adds	r3, #20
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	b298      	uxth	r0, r3
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	332e      	adds	r3, #46	@ 0x2e
 80018c6:	4602      	mov	r2, r0
 80018c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018ca:	7bfa      	ldrb	r2, [r7, #15]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	3318      	adds	r3, #24
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	4413      	add	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	331c      	adds	r3, #28
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3320      	adds	r3, #32
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3324      	adds	r3, #36	@ 0x24
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	3301      	adds	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	429a      	cmp	r2, r3
 8001928:	d3af      	bcc.n	800188a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	e044      	b.n	80019ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001930:	7bfa      	ldrb	r2, [r7, #15]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001946:	7bfa      	ldrb	r2, [r7, #15]
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001958:	7bfa      	ldrb	r2, [r7, #15]
 800195a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4413      	add	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	440b      	add	r3, r1
 800196a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001972:	7bfa      	ldrb	r2, [r7, #15]
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	4613      	mov	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	4413      	add	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	4613      	mov	r3, r2
 800198e:	00db      	lsls	r3, r3, #3
 8001990:	4413      	add	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800199e:	7bfa      	ldrb	r2, [r7, #15]
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
 80019b6:	3301      	adds	r3, #1
 80019b8:	73fb      	strb	r3, [r7, #15]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	791b      	ldrb	r3, [r3, #4]
 80019be:	7bfa      	ldrb	r2, [r7, #15]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d3b5      	bcc.n	8001930 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6818      	ldr	r0, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7c1a      	ldrb	r2, [r3, #16]
 80019cc:	f88d 2000 	strb.w	r2, [sp]
 80019d0:	3304      	adds	r3, #4
 80019d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019d4:	f003 fbd4 	bl	8005180 <USB_DevInit>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2202      	movs	r2, #2
 80019e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e00c      	b.n	8001a04 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f004 fc1e 	bl	800623e <USB_DevDisconnect>

  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_PCD_Start+0x1c>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e022      	b.n	8001a6e <HAL_PCD_Start+0x62>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d009      	beq.n	8001a50 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d105      	bne.n	8001a50 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a48:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fb25 	bl	80050a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fbcc 	bl	80061fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a76:	b590      	push	{r4, r7, lr}
 8001a78:	b08d      	sub	sp, #52	@ 0x34
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fc8a 	bl	80063a6 <USB_GetMode>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 848c 	bne.w	80023b2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f004 fbee 	bl	8006280 <USB_ReadInterrupts>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8482 	beq.w	80023b0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f004 fbdb 	bl	8006280 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d107      	bne.n	8001ae4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f002 0202 	and.w	r2, r2, #2
 8001ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f004 fbc9 	bl	8006280 <USB_ReadInterrupts>
 8001aee:	4603      	mov	r3, r0
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b10      	cmp	r3, #16
 8001af6:	d161      	bne.n	8001bbc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0210 	bic.w	r2, r2, #16
 8001b06:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	f003 020f 	and.w	r2, r3, #15
 8001b14:	4613      	mov	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	3304      	adds	r3, #4
 8001b26:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001b2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b32:	d124      	bne.n	8001b7e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d035      	beq.n	8001bac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	461a      	mov	r2, r3
 8001b52:	6a38      	ldr	r0, [r7, #32]
 8001b54:	f004 fa00 	bl	8005f58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b64:	441a      	add	r2, r3
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b76:	441a      	add	r2, r3
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	e016      	b.n	8001bac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001b84:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001b88:	d110      	bne.n	8001bac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001b90:	2208      	movs	r2, #8
 8001b92:	4619      	mov	r1, r3
 8001b94:	6a38      	ldr	r0, [r7, #32]
 8001b96:	f004 f9df 	bl	8005f58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ba6:	441a      	add	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0210 	orr.w	r2, r2, #16
 8001bba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fb5d 	bl	8006280 <USB_ReadInterrupts>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001bd0:	f040 80a7 	bne.w	8001d22 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fb62 	bl	80062a6 <USB_ReadDevAllOutEpInterrupt>
 8001be2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001be4:	e099      	b.n	8001d1a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 808e 	beq.w	8001d0e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f004 fb86 	bl	800630e <USB_ReadDevOutEPInterrupt>
 8001c02:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	015a      	lsls	r2, r3, #5
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 fea4 	bl	8002970 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	f003 0308 	and.w	r3, r3, #8
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00c      	beq.n	8001c4c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2308      	movs	r3, #8
 8001c42:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 ff7a 	bl	8002b40 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	015a      	lsls	r2, r3, #5
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001c62:	461a      	mov	r2, r3
 8001c64:	2310      	movs	r3, #16
 8001c66:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d030      	beq.n	8001cd4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	2b80      	cmp	r3, #128	@ 0x80
 8001c7c:	d109      	bne.n	8001c92 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001c8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c90:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	4613      	mov	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	78db      	ldrb	r3, [r3, #3]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d108      	bne.n	8001cc2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	4619      	mov	r1, r3
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f006 fff5 	bl	8008cac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0320 	and.w	r3, r3, #32
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d008      	beq.n	8001cf0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	015a      	lsls	r2, r3, #5
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001cea:	461a      	mov	r2, r3
 8001cec:	2320      	movs	r3, #32
 8001cee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	015a      	lsls	r2, r3, #5
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001d06:	461a      	mov	r2, r3
 8001d08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d0c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d10:	3301      	adds	r3, #1
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f47f af62 	bne.w	8001be6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 faaa 	bl	8006280 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001d36:	f040 80db 	bne.w	8001ef0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f004 facb 	bl	80062da <USB_ReadDevAllInEpInterrupt>
 8001d44:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001d4a:	e0cd      	b.n	8001ee8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 80c2 	beq.w	8001edc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f004 faf1 	bl	800634a <USB_ReadDevInEPInterrupt>
 8001d68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d057      	beq.n	8001e24 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69f9      	ldr	r1, [r7, #28]
 8001d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001d94:	4013      	ands	r3, r2
 8001d96:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	015a      	lsls	r2, r3, #5
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	4413      	add	r3, r2
 8001da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001da4:	461a      	mov	r2, r3
 8001da6:	2301      	movs	r3, #1
 8001da8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	799b      	ldrb	r3, [r3, #6]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d132      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3320      	adds	r3, #32
 8001dc2:	6819      	ldr	r1, [r3, #0]
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4403      	add	r3, r0
 8001dd2:	331c      	adds	r3, #28
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4419      	add	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4403      	add	r3, r0
 8001de6:	3320      	adds	r3, #32
 8001de8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d113      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x3a2>
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001df4:	4613      	mov	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4413      	add	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3324      	adds	r3, #36	@ 0x24
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001e10:	461a      	mov	r2, r3
 8001e12:	2101      	movs	r1, #1
 8001e14:	f004 faf8 	bl	8006408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f006 fec9 	bl	8008bb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2308      	movs	r3, #8
 8001e3e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	f003 0310 	and.w	r3, r3, #16
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d008      	beq.n	8001e5c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e56:	461a      	mov	r2, r3
 8001e58:	2310      	movs	r3, #16
 8001e5a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d008      	beq.n	8001e78 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	015a      	lsls	r2, r3, #5
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e72:	461a      	mov	r2, r3
 8001e74:	2340      	movs	r3, #64	@ 0x40
 8001e76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d023      	beq.n	8001eca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001e84:	6a38      	ldr	r0, [r7, #32]
 8001e86:	f003 fadf 	bl	8005448 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	3310      	adds	r3, #16
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	78db      	ldrb	r3, [r3, #3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f006 ff0c 	bl	8008cd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	015a      	lsls	r2, r3, #5
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fcbd 	bl	8002856 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	3301      	adds	r3, #1
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f af2e 	bne.w	8001d4c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 f9c3 	bl	8006280 <USB_ReadInterrupts>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f04:	d122      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d108      	bne.n	8001f36 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 fea4 	bl	8002c7c <HAL_PCDEx_LPM_Callback>
 8001f34:	e002      	b.n	8001f3c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f006 feaa 	bl	8008c90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 f995 	bl	8006280 <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f60:	d112      	bne.n	8001f88 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d102      	bne.n	8001f78 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f006 fe66 	bl	8008c44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001f86:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f004 f977 	bl	8006280 <USB_ReadInterrupts>
 8001f92:	4603      	mov	r3, r0
 8001f94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f9c:	f040 80b7 	bne.w	800210e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fae:	f023 0301 	bic.w	r3, r3, #1
 8001fb2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2110      	movs	r1, #16
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f003 fa44 	bl	8005448 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc4:	e046      	b.n	8002054 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001fd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fea:	0151      	lsls	r1, r2, #5
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	440a      	add	r2, r1
 8001ff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001ff4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001ff8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002006:	461a      	mov	r2, r3
 8002008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800200c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800200e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002010:	015a      	lsls	r2, r3, #5
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	4413      	add	r3, r2
 8002016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800201e:	0151      	lsls	r1, r2, #5
 8002020:	69fa      	ldr	r2, [r7, #28]
 8002022:	440a      	add	r2, r1
 8002024:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002028:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800202c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800202e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203e:	0151      	lsls	r1, r2, #5
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	440a      	add	r2, r1
 8002044:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800204c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002050:	3301      	adds	r3, #1
 8002052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	791b      	ldrb	r3, [r3, #4]
 8002058:	461a      	mov	r2, r3
 800205a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800205c:	4293      	cmp	r3, r2
 800205e:	d3b2      	bcc.n	8001fc6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800206e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002072:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	7bdb      	ldrb	r3, [r3, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d016      	beq.n	80020aa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800208c:	f043 030b 	orr.w	r3, r3, #11
 8002090:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800209a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020a2:	f043 030b 	orr.w	r3, r3, #11
 80020a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a8:	e015      	b.n	80020d6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80020c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020d0:	f043 030b 	orr.w	r3, r3, #11
 80020d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69fa      	ldr	r2, [r7, #28]
 80020e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80020e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020f8:	461a      	mov	r2, r3
 80020fa:	f004 f985 	bl	8006408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800210c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 f8b4 	bl	8006280 <USB_ReadInterrupts>
 8002118:	4603      	mov	r3, r0
 800211a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002122:	d123      	bne.n	800216c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f004 f94a 	bl	80063c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f003 fa01 	bl	800553a <USB_GetDevSpeed>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681c      	ldr	r4, [r3, #0]
 8002144:	f001 f9ca 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8002148:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800214e:	461a      	mov	r2, r3
 8002150:	4620      	mov	r0, r4
 8002152:	f002 ff05 	bl	8004f60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f006 fd55 	bl	8008c06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800216a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f004 f885 	bl	8006280 <USB_ReadInterrupts>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b08      	cmp	r3, #8
 800217e:	d10a      	bne.n	8002196 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f006 fd32 	bl	8008bea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	695a      	ldr	r2, [r3, #20]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f002 0208 	and.w	r2, r2, #8
 8002194:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f004 f870 	bl	8006280 <USB_ReadInterrupts>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	2b80      	cmp	r3, #128	@ 0x80
 80021a8:	d123      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021b6:	2301      	movs	r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021ba:	e014      	b.n	80021e6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c0:	4613      	mov	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4413      	add	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fb0a 	bl	80027f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	3301      	adds	r3, #1
 80021e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	791b      	ldrb	r3, [r3, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d3e4      	bcc.n	80021bc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f004 f842 	bl	8006280 <USB_ReadInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002206:	d13c      	bne.n	8002282 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002208:	2301      	movs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	@ 0x24
 800220c:	e02b      	b.n	8002266 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	3318      	adds	r3, #24
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d115      	bne.n	8002260 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002234:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002236:	2b00      	cmp	r3, #0
 8002238:	da12      	bge.n	8002260 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800223a:	6879      	ldr	r1, [r7, #4]
 800223c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3317      	adds	r3, #23
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4619      	mov	r1, r3
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 faca 	bl	80027f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	3301      	adds	r3, #1
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	791b      	ldrb	r3, [r3, #4]
 800226a:	461a      	mov	r2, r3
 800226c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226e:	4293      	cmp	r3, r2
 8002270:	d3cd      	bcc.n	800220e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002280:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f003 fffa 	bl	8006280 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002296:	d156      	bne.n	8002346 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002298:	2301      	movs	r3, #1
 800229a:	627b      	str	r3, [r7, #36]	@ 0x24
 800229c:	e045      	b.n	800232a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d12e      	bne.n	8002324 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da2b      	bge.n	8002324 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	0c1a      	lsrs	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80022d6:	4053      	eors	r3, r2
 80022d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d121      	bne.n	8002324 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10a      	bne.n	8002324 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800231c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002320:	6053      	str	r3, [r2, #4]
            break;
 8002322:	e008      	b.n	8002336 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	3301      	adds	r3, #1
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	461a      	mov	r2, r3
 8002330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002332:	4293      	cmp	r3, r2
 8002334:	d3b3      	bcc.n	800229e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f003 ff98 	bl	8006280 <USB_ReadInterrupts>
 8002350:	4603      	mov	r3, r0
 8002352:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800235a:	d10a      	bne.n	8002372 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f006 fcc9 	bl	8008cf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002370:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f003 ff82 	bl	8006280 <USB_ReadInterrupts>
 800237c:	4603      	mov	r3, r0
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d115      	bne.n	80023b2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f006 fcb9 	bl	8008d10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	e000      	b.n	80023b2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80023b0:	bf00      	nop
    }
  }
}
 80023b2:	3734      	adds	r7, #52	@ 0x34
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd90      	pop	{r4, r7, pc}

080023b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d101      	bne.n	80023d2 <HAL_PCD_SetAddress+0x1a>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e012      	b.n	80023f8 <HAL_PCD_SetAddress+0x40>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 fee1 	bl	80061b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4603      	mov	r3, r0
 8002410:	70fb      	strb	r3, [r7, #3]
 8002412:	460b      	mov	r3, r1
 8002414:	803b      	strh	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800241e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002422:	2b00      	cmp	r3, #0
 8002424:	da0f      	bge.n	8002446 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002426:	78fb      	ldrb	r3, [r7, #3]
 8002428:	f003 020f 	and.w	r2, r3, #15
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	3310      	adds	r3, #16
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	3304      	adds	r3, #4
 800243c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	705a      	strb	r2, [r3, #1]
 8002444:	e00f      	b.n	8002466 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002446:	78fb      	ldrb	r3, [r7, #3]
 8002448:	f003 020f 	and.w	r2, r3, #15
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	3304      	adds	r3, #4
 800245e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	b2da      	uxtb	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002472:	883b      	ldrh	r3, [r7, #0]
 8002474:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	78ba      	ldrb	r2, [r7, #2]
 8002480:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	785b      	ldrb	r3, [r3, #1]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002494:	78bb      	ldrb	r3, [r7, #2]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d102      	bne.n	80024a0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2200      	movs	r2, #0
 800249e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_PCD_EP_Open+0xae>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e00e      	b.n	80024cc <HAL_PCD_EP_Open+0xcc>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68f9      	ldr	r1, [r7, #12]
 80024bc:	4618      	mov	r0, r3
 80024be:	f003 f861 	bl	8005584 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80024ca:	7afb      	ldrb	r3, [r7, #11]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da0f      	bge.n	8002508 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3310      	adds	r3, #16
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
 8002506:	e00f      	b.n	8002528 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	f003 020f 	and.w	r2, r3, #15
 800250e:	4613      	mov	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	4413      	add	r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	3304      	adds	r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	b2da      	uxtb	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800253a:	2b01      	cmp	r3, #1
 800253c:	d101      	bne.n	8002542 <HAL_PCD_EP_Close+0x6e>
 800253e:	2302      	movs	r3, #2
 8002540:	e00e      	b.n	8002560 <HAL_PCD_EP_Close+0x8c>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68f9      	ldr	r1, [r7, #12]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 f89f 	bl	8005694 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	607a      	str	r2, [r7, #4]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	460b      	mov	r3, r1
 8002576:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002578:	7afb      	ldrb	r3, [r7, #11]
 800257a:	f003 020f 	and.w	r2, r3, #15
 800257e:	4613      	mov	r3, r2
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4413      	add	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4413      	add	r3, r2
 800258e:	3304      	adds	r3, #4
 8002590:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	2200      	movs	r2, #0
 80025a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	799b      	ldrb	r3, [r3, #6]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d102      	bne.n	80025c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	799b      	ldrb	r3, [r3, #6]
 80025cc:	461a      	mov	r2, r3
 80025ce:	6979      	ldr	r1, [r7, #20]
 80025d0:	f003 f93c 	bl	800584c <USB_EPStartXfer>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	f003 020f 	and.w	r2, r3, #15
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	440b      	add	r3, r1
 80025fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002600:	681b      	ldr	r3, [r3, #0]
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	460b      	mov	r3, r1
 800261c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800261e:	7afb      	ldrb	r3, [r7, #11]
 8002620:	f003 020f 	and.w	r2, r3, #15
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	3310      	adds	r3, #16
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	3304      	adds	r3, #4
 8002634:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2201      	movs	r2, #1
 800264c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800264e:	7afb      	ldrb	r3, [r7, #11]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	b2da      	uxtb	r2, r3
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	799b      	ldrb	r3, [r3, #6]
 8002670:	461a      	mov	r2, r3
 8002672:	6979      	ldr	r1, [r7, #20]
 8002674:	f003 f8ea 	bl	800584c <USB_EPStartXfer>

  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	7912      	ldrb	r2, [r2, #4]
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e04f      	b.n	8002740 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80026a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da0f      	bge.n	80026c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	f003 020f 	and.w	r2, r3, #15
 80026ae:	4613      	mov	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	3310      	adds	r3, #16
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	4413      	add	r3, r2
 80026bc:	3304      	adds	r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2201      	movs	r2, #1
 80026c4:	705a      	strb	r2, [r3, #1]
 80026c6:	e00d      	b.n	80026e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	3304      	adds	r3, #4
 80026dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2201      	movs	r2, #1
 80026e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f003 030f 	and.w	r3, r3, #15
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_EP_SetStall+0x82>
 8002700:	2302      	movs	r3, #2
 8002702:	e01d      	b.n	8002740 <HAL_PCD_EP_SetStall+0xbe>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68f9      	ldr	r1, [r7, #12]
 8002712:	4618      	mov	r0, r3
 8002714:	f003 fc78 	bl	8006008 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	7999      	ldrb	r1, [r3, #6]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002730:	461a      	mov	r2, r3
 8002732:	f003 fe69 	bl	8006408 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002754:	78fb      	ldrb	r3, [r7, #3]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	7912      	ldrb	r2, [r2, #4]
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e042      	b.n	80027ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002766:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800276a:	2b00      	cmp	r3, #0
 800276c:	da0f      	bge.n	800278e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276e:	78fb      	ldrb	r3, [r7, #3]
 8002770:	f003 020f 	and.w	r2, r3, #15
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	3310      	adds	r3, #16
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4413      	add	r3, r2
 8002782:	3304      	adds	r3, #4
 8002784:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2201      	movs	r2, #1
 800278a:	705a      	strb	r2, [r3, #1]
 800278c:	e00f      	b.n	80027ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278e:	78fb      	ldrb	r3, [r7, #3]
 8002790:	f003 020f 	and.w	r2, r3, #15
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	4413      	add	r3, r2
 80027a4:	3304      	adds	r3, #4
 80027a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_PCD_EP_ClrStall+0x86>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00e      	b.n	80027ec <HAL_PCD_EP_ClrStall+0xa4>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68f9      	ldr	r1, [r7, #12]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 fc81 	bl	80060e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002804:	2b00      	cmp	r3, #0
 8002806:	da0c      	bge.n	8002822 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	3310      	adds	r3, #16
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4413      	add	r3, r2
 800281c:	3304      	adds	r3, #4
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e00c      	b.n	800283c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002822:	78fb      	ldrb	r3, [r7, #3]
 8002824:	f003 020f 	and.w	r2, r3, #15
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	3304      	adds	r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68f9      	ldr	r1, [r7, #12]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 faa0 	bl	8005d88 <USB_EPStopXfer>
 8002848:	4603      	mov	r3, r0
 800284a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800284c:	7afb      	ldrb	r3, [r7, #11]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b08a      	sub	sp, #40	@ 0x28
 800285a:	af02      	add	r7, sp, #8
 800285c:	6078      	str	r0, [r7, #4]
 800285e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4613      	mov	r3, r2
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	3310      	adds	r3, #16
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	4413      	add	r3, r2
 800287a:	3304      	adds	r3, #4
 800287c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d901      	bls.n	800288e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e06b      	b.n	8002966 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d902      	bls.n	80028aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3303      	adds	r3, #3
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028b2:	e02a      	b.n	800290a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	69fa      	ldr	r2, [r7, #28]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d902      	bls.n	80028d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3303      	adds	r3, #3
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68d9      	ldr	r1, [r3, #12]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	4603      	mov	r3, r0
 80028ec:	6978      	ldr	r0, [r7, #20]
 80028ee:	f003 faf5 	bl	8005edc <USB_WritePacket>

    ep->xfer_buff  += len;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	68da      	ldr	r2, [r3, #12]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	441a      	add	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	441a      	add	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	429a      	cmp	r2, r3
 800291e:	d809      	bhi.n	8002934 <PCD_WriteEmptyTxFifo+0xde>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	695a      	ldr	r2, [r3, #20]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002928:	429a      	cmp	r2, r3
 800292a:	d203      	bcs.n	8002934 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1bf      	bne.n	80028b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	691a      	ldr	r2, [r3, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	429a      	cmp	r2, r3
 800293e:	d811      	bhi.n	8002964 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f003 030f 	and.w	r3, r3, #15
 8002946:	2201      	movs	r2, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002954:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	43db      	mvns	r3, r3
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002960:	4013      	ands	r3, r2
 8002962:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	3720      	adds	r7, #32
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	333c      	adds	r3, #60	@ 0x3c
 8002988:	3304      	adds	r3, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	799b      	ldrb	r3, [r3, #6]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d17b      	bne.n	8002a9e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a61      	ldr	r2, [pc, #388]	@ (8002b38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	f240 80b9 	bls.w	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80b3 	beq.w	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029d2:	461a      	mov	r2, r3
 80029d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d8:	6093      	str	r3, [r2, #8]
 80029da:	e0a7      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d009      	beq.n	80029fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f2:	461a      	mov	r2, r3
 80029f4:	2320      	movs	r3, #32
 80029f6:	6093      	str	r3, [r2, #8]
 80029f8:	e098      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 8093 	bne.w	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4a4b      	ldr	r2, [pc, #300]	@ (8002b38 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d90f      	bls.n	8002a2e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a24:	461a      	mov	r2, r3
 8002a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a2a:	6093      	str	r3, [r2, #8]
 8002a2c:	e07e      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5a:	1ad2      	subs	r2, r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d114      	bne.n	8002a90 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f003 fcc4 	bl	8006408 <USB_EP0_OutStart>
 8002a80:	e006      	b.n	8002a90 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f006 f872 	bl	8008b80 <HAL_PCD_DataOutStageCallback>
 8002a9c:	e046      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4a26      	ldr	r2, [pc, #152]	@ (8002b3c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d124      	bne.n	8002af0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002abc:	461a      	mov	r2, r3
 8002abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ac2:	6093      	str	r3, [r2, #8]
 8002ac4:	e032      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	2320      	movs	r3, #32
 8002ae0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f006 f849 	bl	8008b80 <HAL_PCD_DataOutStageCallback>
 8002aee:	e01d      	b.n	8002b2c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d114      	bne.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b18:	461a      	mov	r2, r3
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	f003 fc74 	bl	8006408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	4619      	mov	r1, r3
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f006 f82a 	bl	8008b80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	4f54300a 	.word	0x4f54300a
 8002b3c:	4f54310a 	.word	0x4f54310a

08002b40 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	333c      	adds	r3, #60	@ 0x3c
 8002b58:	3304      	adds	r3, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	015a      	lsls	r2, r3, #5
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4413      	add	r3, r2
 8002b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a15      	ldr	r2, [pc, #84]	@ (8002bc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d90e      	bls.n	8002b94 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d009      	beq.n	8002b94 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b92:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f005 ffe1 	bl	8008b5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d90c      	bls.n	8002bbc <PCD_EP_OutSetupPacket_int+0x7c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	799b      	ldrb	r3, [r3, #6]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d108      	bne.n	8002bbc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6818      	ldr	r0, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	f003 fc26 	bl	8006408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	4f54300a 	.word	0x4f54300a

08002bcc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	70fb      	strb	r3, [r7, #3]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002be4:	78fb      	ldrb	r3, [r7, #3]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bea:	883b      	ldrh	r3, [r7, #0]
 8002bec:	0419      	lsls	r1, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bf8:	e028      	b.n	8002c4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c00:	0c1b      	lsrs	r3, r3, #16
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4413      	add	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c08:	2300      	movs	r3, #0
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e00d      	b.n	8002c2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	3340      	adds	r3, #64	@ 0x40
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3ec      	bcc.n	8002c0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c34:	883b      	ldrh	r3, [r7, #0]
 8002c36:	0418      	lsls	r0, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6819      	ldr	r1, [r3, #0]
 8002c3c:	78fb      	ldrb	r3, [r7, #3]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	4302      	orrs	r2, r0
 8002c44:	3340      	adds	r3, #64	@ 0x40
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3714      	adds	r7, #20
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e267      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d075      	beq.n	8002d9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cb2:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d00c      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b85      	ldr	r3, [pc, #532]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d112      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cca:	4b82      	ldr	r3, [pc, #520]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d05b      	beq.n	8002d9c <HAL_RCC_OscConfig+0x108>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d157      	bne.n	8002d9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e242      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCC_OscConfig+0x74>
 8002cfa:	4b76      	ldr	r3, [pc, #472]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a75      	ldr	r2, [pc, #468]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xb0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x98>
 8002d12:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6f      	ldr	r2, [pc, #444]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6c      	ldr	r2, [pc, #432]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xb0>
 8002d2c:	4b69      	ldr	r3, [pc, #420]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a68      	ldr	r2, [pc, #416]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b66      	ldr	r3, [pc, #408]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a65      	ldr	r2, [pc, #404]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7fe f9de 	bl	800110c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7fe f9da 	bl	800110c <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e207      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xc0>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7fe f9ca 	bl	800110c <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7fe f9c6 	bl	800110c <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1f3      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b51      	ldr	r3, [pc, #324]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0xe8>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d063      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002daa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc2:	4b44      	ldr	r3, [pc, #272]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	4b41      	ldr	r3, [pc, #260]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x152>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1c7      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4937      	ldr	r1, [pc, #220]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	e03a      	b.n	8002e72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e04:	4b34      	ldr	r3, [pc, #208]	@ (8002ed8 <HAL_RCC_OscConfig+0x244>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe f97f 	bl	800110c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7fe f97b 	bl	800110c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1a8      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4925      	ldr	r1, [pc, #148]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCC_OscConfig+0x244>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f7fe f95e 	bl	800110c <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe f95a 	bl	800110c <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e187      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d036      	beq.n	8002eec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d016      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_RCC_OscConfig+0x248>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe f93e 	bl	800110c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe f93a 	bl	800110c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e167      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x200>
 8002eb2:	e01b      	b.n	8002eec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb4:	4b09      	ldr	r3, [pc, #36]	@ (8002edc <HAL_RCC_OscConfig+0x248>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe f927 	bl	800110c <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec0:	e00e      	b.n	8002ee0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fe f923 	bl	800110c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d907      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e150      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	42470000 	.word	0x42470000
 8002edc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee0:	4b88      	ldr	r3, [pc, #544]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ea      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 8097 	beq.w	8003028 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efa:	2300      	movs	r3, #0
 8002efc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efe:	4b81      	ldr	r3, [pc, #516]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10f      	bne.n	8002f2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b7d      	ldr	r3, [pc, #500]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	4a7c      	ldr	r2, [pc, #496]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f26:	2301      	movs	r3, #1
 8002f28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2a:	4b77      	ldr	r3, [pc, #476]	@ (8003108 <HAL_RCC_OscConfig+0x474>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d118      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f36:	4b74      	ldr	r3, [pc, #464]	@ (8003108 <HAL_RCC_OscConfig+0x474>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a73      	ldr	r2, [pc, #460]	@ (8003108 <HAL_RCC_OscConfig+0x474>)
 8002f3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f42:	f7fe f8e3 	bl	800110c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4a:	f7fe f8df 	bl	800110c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e10c      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_OscConfig+0x474>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCC_OscConfig+0x2ea>
 8002f70:	4b64      	ldr	r3, [pc, #400]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f74:	4a63      	ldr	r2, [pc, #396]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7c:	e01c      	b.n	8002fb8 <HAL_RCC_OscConfig+0x324>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b05      	cmp	r3, #5
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x30c>
 8002f86:	4b5f      	ldr	r3, [pc, #380]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	f043 0304 	orr.w	r3, r3, #4
 8002f90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f92:	4b5c      	ldr	r3, [pc, #368]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	4a5b      	ldr	r2, [pc, #364]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x324>
 8002fa0:	4b58      	ldr	r3, [pc, #352]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa4:	4a57      	ldr	r2, [pc, #348]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 0301 	bic.w	r3, r3, #1
 8002faa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fac:	4b55      	ldr	r3, [pc, #340]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb0:	4a54      	ldr	r2, [pc, #336]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	f023 0304 	bic.w	r3, r3, #4
 8002fb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc0:	f7fe f8a4 	bl	800110c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fe f8a0 	bl	800110c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0cb      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	4b49      	ldr	r3, [pc, #292]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0ee      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x334>
 8002fea:	e014      	b.n	8003016 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7fe f88e 	bl	800110c <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe f88a 	bl	800110c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0b5      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	4b3e      	ldr	r3, [pc, #248]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ee      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003016:	7dfb      	ldrb	r3, [r7, #23]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d105      	bne.n	8003028 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301c:	4b39      	ldr	r3, [pc, #228]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	4a38      	ldr	r2, [pc, #224]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8003022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003026:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a1 	beq.w	8003174 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003032:	4b34      	ldr	r3, [pc, #208]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b08      	cmp	r3, #8
 800303c:	d05c      	beq.n	80030f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d141      	bne.n	80030ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003046:	4b31      	ldr	r3, [pc, #196]	@ (800310c <HAL_RCC_OscConfig+0x478>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fe f85e 	bl	800110c <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003054:	f7fe f85a 	bl	800110c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e087      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003088:	085b      	lsrs	r3, r3, #1
 800308a:	3b01      	subs	r3, #1
 800308c:	041b      	lsls	r3, r3, #16
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	491b      	ldr	r1, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b1b      	ldr	r3, [pc, #108]	@ (800310c <HAL_RCC_OscConfig+0x478>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fe f833 	bl	800110c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fe f82f 	bl	800110c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e05c      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030bc:	4b11      	ldr	r3, [pc, #68]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x416>
 80030c8:	e054      	b.n	8003174 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b10      	ldr	r3, [pc, #64]	@ (800310c <HAL_RCC_OscConfig+0x478>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f81c 	bl	800110c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fe f818 	bl	800110c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e045      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_RCC_OscConfig+0x470>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x444>
 80030f6:	e03d      	b.n	8003174 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e038      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
 8003104:	40023800 	.word	0x40023800
 8003108:	40007000 	.word	0x40007000
 800310c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_OscConfig+0x4ec>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d028      	beq.n	8003170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d121      	bne.n	8003170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d11a      	bne.n	8003170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003140:	4013      	ands	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003146:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003148:	4293      	cmp	r3, r2
 800314a:	d111      	bne.n	8003170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	085b      	lsrs	r3, r3, #1
 8003158:	3b01      	subs	r3, #1
 800315a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315c:	429a      	cmp	r2, r3
 800315e:	d107      	bne.n	8003170 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e000      	b.n	8003176 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023800 	.word	0x40023800

08003184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0cc      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b68      	ldr	r3, [pc, #416]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d90c      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b65      	ldr	r3, [pc, #404]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b63      	ldr	r3, [pc, #396]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d020      	beq.n	800320e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0304 	and.w	r3, r3, #4
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d005      	beq.n	80031e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d8:	4b59      	ldr	r3, [pc, #356]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4a58      	ldr	r2, [pc, #352]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0308 	and.w	r3, r3, #8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f0:	4b53      	ldr	r3, [pc, #332]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a52      	ldr	r2, [pc, #328]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031fc:	4b50      	ldr	r3, [pc, #320]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	494d      	ldr	r1, [pc, #308]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	4313      	orrs	r3, r2
 800320c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	d044      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d107      	bne.n	8003232 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003222:	4b47      	ldr	r3, [pc, #284]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d119      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d003      	beq.n	8003242 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003242:	4b3f      	ldr	r3, [pc, #252]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e06f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003252:	4b3b      	ldr	r3, [pc, #236]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e067      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b37      	ldr	r3, [pc, #220]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4934      	ldr	r1, [pc, #208]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	4313      	orrs	r3, r2
 8003272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fd ff4a 	bl	800110c <HAL_GetTick>
 8003278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fd ff46 	bl	800110c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e04f      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b25      	ldr	r3, [pc, #148]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d20c      	bcs.n	80032cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b20      	ldr	r3, [pc, #128]	@ (800333c <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e032      	b.n	8003332 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d8:	4b19      	ldr	r3, [pc, #100]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	4916      	ldr	r1, [pc, #88]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d009      	beq.n	800330a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032f6:	4b12      	ldr	r3, [pc, #72]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	490e      	ldr	r1, [pc, #56]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	4313      	orrs	r3, r2
 8003308:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800330a:	f000 f821 	bl	8003350 <HAL_RCC_GetSysClockFreq>
 800330e:	4602      	mov	r2, r0
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	490a      	ldr	r1, [pc, #40]	@ (8003344 <HAL_RCC_ClockConfig+0x1c0>)
 800331c:	5ccb      	ldrb	r3, [r1, r3]
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	4a09      	ldr	r2, [pc, #36]	@ (8003348 <HAL_RCC_ClockConfig+0x1c4>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd feaa 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40023c00 	.word	0x40023c00
 8003340:	40023800 	.word	0x40023800
 8003344:	0800a5b4 	.word	0x0800a5b4
 8003348:	20000000 	.word	0x20000000
 800334c:	20000004 	.word	0x20000004

08003350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003354:	b090      	sub	sp, #64	@ 0x40
 8003356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003364:	2300      	movs	r3, #0
 8003366:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003368:	4b59      	ldr	r3, [pc, #356]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b08      	cmp	r3, #8
 8003372:	d00d      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0x40>
 8003374:	2b08      	cmp	r3, #8
 8003376:	f200 80a1 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x16c>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x34>
 800337e:	2b04      	cmp	r3, #4
 8003380:	d003      	beq.n	800338a <HAL_RCC_GetSysClockFreq+0x3a>
 8003382:	e09b      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003384:	4b53      	ldr	r3, [pc, #332]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003386:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003388:	e09b      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800338a:	4b53      	ldr	r3, [pc, #332]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800338c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800338e:	e098      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003390:	4b4f      	ldr	r3, [pc, #316]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003398:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800339a:	4b4d      	ldr	r3, [pc, #308]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d028      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a6:	4b4a      	ldr	r3, [pc, #296]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	099b      	lsrs	r3, r3, #6
 80033ac:	2200      	movs	r2, #0
 80033ae:	623b      	str	r3, [r7, #32]
 80033b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033b8:	2100      	movs	r1, #0
 80033ba:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033bc:	fb03 f201 	mul.w	r2, r3, r1
 80033c0:	2300      	movs	r3, #0
 80033c2:	fb00 f303 	mul.w	r3, r0, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	4a43      	ldr	r2, [pc, #268]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80033ca:	fba0 1202 	umull	r1, r2, r0, r2
 80033ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033d0:	460a      	mov	r2, r1
 80033d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80033d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d6:	4413      	add	r3, r2
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033dc:	2200      	movs	r2, #0
 80033de:	61bb      	str	r3, [r7, #24]
 80033e0:	61fa      	str	r2, [r7, #28]
 80033e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80033ea:	f7fc ff61 	bl	80002b0 <__aeabi_uldivmod>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4613      	mov	r3, r2
 80033f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033f6:	e053      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f8:	4b35      	ldr	r3, [pc, #212]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	099b      	lsrs	r3, r3, #6
 80033fe:	2200      	movs	r2, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	617a      	str	r2, [r7, #20]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800340a:	f04f 0b00 	mov.w	fp, #0
 800340e:	4652      	mov	r2, sl
 8003410:	465b      	mov	r3, fp
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003420:	0150      	lsls	r0, r2, #5
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	ebb2 080a 	subs.w	r8, r2, sl
 800342a:	eb63 090b 	sbc.w	r9, r3, fp
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800343a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800343e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003442:	ebb2 0408 	subs.w	r4, r2, r8
 8003446:	eb63 0509 	sbc.w	r5, r3, r9
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	00eb      	lsls	r3, r5, #3
 8003454:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003458:	00e2      	lsls	r2, r4, #3
 800345a:	4614      	mov	r4, r2
 800345c:	461d      	mov	r5, r3
 800345e:	eb14 030a 	adds.w	r3, r4, sl
 8003462:	603b      	str	r3, [r7, #0]
 8003464:	eb45 030b 	adc.w	r3, r5, fp
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348a:	2200      	movs	r2, #0
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	60fa      	str	r2, [r7, #12]
 8003490:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003494:	f7fc ff0c 	bl	80002b0 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034a0:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80034b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3740      	adds	r7, #64	@ 0x40
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	017d7840 	.word	0x017d7840

080034dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	@ (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	0800a5c4 	.word	0x0800a5c4

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	@ (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	@ (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	0800a5c4 	.word	0x0800a5c4

08003544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e041      	b.n	80035da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fd fc32 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f000 fa70 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d001      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e044      	b.n	8003686 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f042 0201 	orr.w	r2, r2, #1
 8003612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1e      	ldr	r2, [pc, #120]	@ (8003694 <HAL_TIM_Base_Start_IT+0xb0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d018      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x6c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003626:	d013      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x6c>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1a      	ldr	r2, [pc, #104]	@ (8003698 <HAL_TIM_Base_Start_IT+0xb4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00e      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_TIM_Base_Start_IT+0xb8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d009      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x6c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a17      	ldr	r2, [pc, #92]	@ (80036a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIM_Base_Start_IT+0x6c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d111      	bne.n	8003674 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2b06      	cmp	r3, #6
 8003660:	d010      	beq.n	8003684 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f042 0201 	orr.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003672:	e007      	b.n	8003684 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	40010000 	.word	0x40010000
 8003698:	40000400 	.word	0x40000400
 800369c:	40000800 	.word	0x40000800
 80036a0:	40000c00 	.word	0x40000c00
 80036a4:	40014000 	.word	0x40014000

080036a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0202 	mvn.w	r2, #2
 80036dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f999 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f98b 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f99c 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d020      	beq.n	8003758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01b      	beq.n	8003758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0204 	mvn.w	r2, #4
 8003728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f973 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003744:	e005      	b.n	8003752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f965 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f976 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f003 0308 	and.w	r3, r3, #8
 8003768:	2b00      	cmp	r3, #0
 800376a:	d01b      	beq.n	80037a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0208 	mvn.w	r2, #8
 8003774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2204      	movs	r2, #4
 800377a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f94d 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 8003790:	e005      	b.n	800379e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f93f 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f950 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0310 	and.w	r3, r3, #16
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d020      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0210 	mvn.w	r2, #16
 80037c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2208      	movs	r2, #8
 80037c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f927 	bl	8003a2a <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f919 	bl	8003a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f92a 	bl	8003a3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00c      	beq.n	8003814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0201 	mvn.w	r2, #1
 800380c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fc ffc8 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fab0 	bl	8003d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8fb 	bl	8003a52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f003 0320 	and.w	r3, r3, #32
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d007      	beq.n	8003880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f06f 0220 	mvn.w	r2, #32
 8003878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fa82 	bl	8003d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_ConfigClockSource+0x1c>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e0b4      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x186>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2202      	movs	r2, #2
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80038c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038dc:	d03e      	beq.n	800395c <HAL_TIM_ConfigClockSource+0xd4>
 80038de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038e2:	f200 8087 	bhi.w	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 80038e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ea:	f000 8086 	beq.w	80039fa <HAL_TIM_ConfigClockSource+0x172>
 80038ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038f2:	d87f      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b70      	cmp	r3, #112	@ 0x70
 80038f6:	d01a      	beq.n	800392e <HAL_TIM_ConfigClockSource+0xa6>
 80038f8:	2b70      	cmp	r3, #112	@ 0x70
 80038fa:	d87b      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b60      	cmp	r3, #96	@ 0x60
 80038fe:	d050      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003900:	2b60      	cmp	r3, #96	@ 0x60
 8003902:	d877      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b50      	cmp	r3, #80	@ 0x50
 8003906:	d03c      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0xfa>
 8003908:	2b50      	cmp	r3, #80	@ 0x50
 800390a:	d873      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d058      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003910:	2b40      	cmp	r3, #64	@ 0x40
 8003912:	d86f      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003914:	2b30      	cmp	r3, #48	@ 0x30
 8003916:	d064      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003918:	2b30      	cmp	r3, #48	@ 0x30
 800391a:	d86b      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 800391c:	2b20      	cmp	r3, #32
 800391e:	d060      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003920:	2b20      	cmp	r3, #32
 8003922:	d867      	bhi.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d05c      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003928:	2b10      	cmp	r3, #16
 800392a:	d05a      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	e062      	b.n	80039f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800393e:	f000 f993 	bl	8003c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003950:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68ba      	ldr	r2, [r7, #8]
 8003958:	609a      	str	r2, [r3, #8]
      break;
 800395a:	e04f      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800396c:	f000 f97c 	bl	8003c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800397e:	609a      	str	r2, [r3, #8]
      break;
 8003980:	e03c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	461a      	mov	r2, r3
 8003990:	f000 f8f0 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2150      	movs	r1, #80	@ 0x50
 800399a:	4618      	mov	r0, r3
 800399c:	f000 f949 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e02c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ae:	461a      	mov	r2, r3
 80039b0:	f000 f90f 	bl	8003bd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2160      	movs	r1, #96	@ 0x60
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 f939 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039c0:	e01c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	461a      	mov	r2, r3
 80039d0:	f000 f8d0 	bl	8003b74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2140      	movs	r1, #64	@ 0x40
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f929 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039e0:	e00c      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4610      	mov	r0, r2
 80039ee:	f000 f920 	bl	8003c32 <TIM_ITRx_SetConfig>
      break;
 80039f2:	e003      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      break;
 80039f8:	e000      	b.n	80039fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a52:	b480      	push	{r7}
 8003a54:	b083      	sub	sp, #12
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5a:	bf00      	nop
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
	...

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a37      	ldr	r2, [pc, #220]	@ (8003b58 <TIM_Base_SetConfig+0xf0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d00f      	beq.n	8003aa0 <TIM_Base_SetConfig+0x38>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d00b      	beq.n	8003aa0 <TIM_Base_SetConfig+0x38>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a34      	ldr	r2, [pc, #208]	@ (8003b5c <TIM_Base_SetConfig+0xf4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <TIM_Base_SetConfig+0x38>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a33      	ldr	r2, [pc, #204]	@ (8003b60 <TIM_Base_SetConfig+0xf8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d003      	beq.n	8003aa0 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	@ (8003b64 <TIM_Base_SetConfig+0xfc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d108      	bne.n	8003ab2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a28      	ldr	r2, [pc, #160]	@ (8003b58 <TIM_Base_SetConfig+0xf0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01b      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac0:	d017      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	@ (8003b5c <TIM_Base_SetConfig+0xf4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a24      	ldr	r2, [pc, #144]	@ (8003b60 <TIM_Base_SetConfig+0xf8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00f      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a23      	ldr	r2, [pc, #140]	@ (8003b64 <TIM_Base_SetConfig+0xfc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00b      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <TIM_Base_SetConfig+0x100>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	@ (8003b6c <TIM_Base_SetConfig+0x104>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d003      	beq.n	8003af2 <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a20      	ldr	r2, [pc, #128]	@ (8003b70 <TIM_Base_SetConfig+0x108>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d108      	bne.n	8003b04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a0c      	ldr	r2, [pc, #48]	@ (8003b58 <TIM_Base_SetConfig+0xf0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d103      	bne.n	8003b32 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f043 0204 	orr.w	r2, r3, #4
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	601a      	str	r2, [r3, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40014000 	.word	0x40014000
 8003b6c:	40014400 	.word	0x40014400
 8003b70:	40014800 	.word	0x40014800

08003b74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	f023 0201 	bic.w	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f023 030a 	bic.w	r3, r3, #10
 8003bb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	621a      	str	r2, [r3, #32]
}
 8003bc6:	bf00      	nop
 8003bc8:	371c      	adds	r7, #28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b087      	sub	sp, #28
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0210 	bic.w	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	031b      	lsls	r3, r3, #12
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	697a      	ldr	r2, [r7, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	621a      	str	r2, [r3, #32]
}
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	f043 0307 	orr.w	r3, r3, #7
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	609a      	str	r2, [r3, #8]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b087      	sub	sp, #28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	609a      	str	r2, [r3, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	371c      	adds	r7, #28
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e050      	b.n	8003d62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1c      	ldr	r2, [pc, #112]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d018      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d0c:	d013      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00e      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a16      	ldr	r2, [pc, #88]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a15      	ldr	r2, [pc, #84]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d004      	beq.n	8003d36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a13      	ldr	r2, [pc, #76]	@ (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d10c      	bne.n	8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40000400 	.word	0x40000400
 8003d78:	40000800 	.word	0x40000800
 8003d7c:	40000c00 	.word	0x40000c00
 8003d80:	40014000 	.word	0x40014000

08003d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e042      	b.n	8003e44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd f824 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	@ 0x24
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fddd 	bl	80049b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b08a      	sub	sp, #40	@ 0x28
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	603b      	str	r3, [r7, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d175      	bne.n	8003f58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_UART_Transmit+0x2c>
 8003e72:	88fb      	ldrh	r3, [r7, #6]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e06e      	b.n	8003f5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2221      	movs	r2, #33	@ 0x21
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e8a:	f7fd f93f 	bl	800110c <HAL_GetTick>
 8003e8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea4:	d108      	bne.n	8003eb8 <HAL_UART_Transmit+0x6c>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d104      	bne.n	8003eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	61bb      	str	r3, [r7, #24]
 8003eb6:	e003      	b.n	8003ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ec0:	e02e      	b.n	8003f20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	2180      	movs	r1, #128	@ 0x80
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fb41 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d005      	beq.n	8003ee4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e03a      	b.n	8003f5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10b      	bne.n	8003f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	881b      	ldrh	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ef8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3302      	adds	r3, #2
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	e007      	b.n	8003f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	781a      	ldrb	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1cb      	bne.n	8003ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2140      	movs	r1, #64	@ 0x40
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb0d 	bl	8004554 <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e006      	b.n	8003f5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e000      	b.n	8003f5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f58:	2302      	movs	r3, #2
  }
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}

08003f62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b084      	sub	sp, #16
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d112      	bne.n	8003fa2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_UART_Receive_IT+0x26>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e00b      	b.n	8003fa4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	461a      	mov	r2, r3
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fb34 	bl	8004606 <UART_Start_Receive_IT>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	e000      	b.n	8003fa4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b0ba      	sub	sp, #232	@ 0xe8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_UART_IRQHandler+0x66>
 8003ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fc11 	bl	8004832 <UART_Receive_IT>
      return;
 8004010:	e273      	b.n	80044fa <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004016:	2b00      	cmp	r3, #0
 8004018:	f000 80de 	beq.w	80041d8 <HAL_UART_IRQHandler+0x22c>
 800401c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d106      	bne.n	8004036 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80d1 	beq.w	80041d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00b      	beq.n	800405a <HAL_UART_IRQHandler+0xae>
 8004042:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	f043 0201 	orr.w	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800405a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <HAL_UART_IRQHandler+0xd2>
 8004066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004076:	f043 0202 	orr.w	r2, r3, #2
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <HAL_UART_IRQHandler+0xf6>
 800408a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f043 0204 	orr.w	r2, r3, #4
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d011      	beq.n	80040d2 <HAL_UART_IRQHandler+0x126>
 80040ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d105      	bne.n	80040c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ca:	f043 0208 	orr.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 820a 	beq.w	80044f0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_UART_IRQHandler+0x14e>
 80040e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fb9c 	bl	8004832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b40      	cmp	r3, #64	@ 0x40
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_UART_IRQHandler+0x17a>
 800411e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04f      	beq.n	80041c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 faa7 	bl	800467a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d141      	bne.n	80041be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3314      	adds	r3, #20
 8004140:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004150:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004154:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3314      	adds	r3, #20
 8004162:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004166:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800416a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004172:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004176:	e841 2300 	strex	r3, r2, [r1]
 800417a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800417e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1d9      	bne.n	800413a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d013      	beq.n	80041b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	4a8a      	ldr	r2, [pc, #552]	@ (80043bc <HAL_UART_IRQHandler+0x410>)
 8004194:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419a:	4618      	mov	r0, r3
 800419c:	f7fd f967 	bl	800146e <HAL_DMA_Abort_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041b0:	4610      	mov	r0, r2
 80041b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	e00e      	b.n	80041d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9b6 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041bc:	e00a      	b.n	80041d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f9b2 	bl	8004528 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	e006      	b.n	80041d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9ae 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041d2:	e18d      	b.n	80044f0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041d4:	bf00      	nop
    return;
 80041d6:	e18b      	b.n	80044f0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041dc:	2b01      	cmp	r3, #1
 80041de:	f040 8167 	bne.w	80044b0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e6:	f003 0310 	and.w	r3, r3, #16
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8160 	beq.w	80044b0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 8159 	beq.w	80044b0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041fe:	2300      	movs	r3, #0
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	60bb      	str	r3, [r7, #8]
 8004212:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	f040 80ce 	bne.w	80043c0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004230:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 80a9 	beq.w	800438c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800423e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004242:	429a      	cmp	r2, r3
 8004244:	f080 80a2 	bcs.w	800438c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800424e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425a:	f000 8088 	beq.w	800436e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800426c:	e853 3f00 	ldrex	r3, [r3]
 8004270:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004274:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800427c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800428a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800428e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004296:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800429a:	e841 2300 	strex	r3, r2, [r1]
 800429e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1d9      	bne.n	800425e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042bc:	f023 0301 	bic.w	r3, r3, #1
 80042c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3314      	adds	r3, #20
 80042ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80042e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1e1      	bne.n	80042aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3314      	adds	r3, #20
 80042ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042f0:	e853 3f00 	ldrex	r3, [r3]
 80042f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80042f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800430a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800430c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004310:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004318:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e3      	bne.n	80042e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2220      	movs	r2, #32
 8004322:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	330c      	adds	r3, #12
 8004332:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800433c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	330c      	adds	r3, #12
 800434c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004350:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004352:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004354:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004356:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004358:	e841 2300 	strex	r3, r2, [r1]
 800435c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800435e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e3      	bne.n	800432c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd f810 	bl	800138e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800437c:	b29b      	uxth	r3, r3
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	b29b      	uxth	r3, r3
 8004382:	4619      	mov	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f8d9 	bl	800453c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800438a:	e0b3      	b.n	80044f4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004394:	429a      	cmp	r2, r3
 8004396:	f040 80ad 	bne.w	80044f4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439e:	69db      	ldr	r3, [r3, #28]
 80043a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043a4:	f040 80a6 	bne.w	80044f4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043b2:	4619      	mov	r1, r3
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8c1 	bl	800453c <HAL_UARTEx_RxEventCallback>
      return;
 80043ba:	e09b      	b.n	80044f4 <HAL_UART_IRQHandler+0x548>
 80043bc:	08004741 	.word	0x08004741
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 808e 	beq.w	80044f8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80043dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8089 	beq.w	80044f8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	330c      	adds	r3, #12
 8004406:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800440a:	647a      	str	r2, [r7, #68]	@ 0x44
 800440c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004410:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004412:	e841 2300 	strex	r3, r2, [r1]
 8004416:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800441a:	2b00      	cmp	r3, #0
 800441c:	d1e3      	bne.n	80043e6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	623b      	str	r3, [r7, #32]
   return(result);
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f023 0301 	bic.w	r3, r3, #1
 8004434:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004442:	633a      	str	r2, [r7, #48]	@ 0x30
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004448:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e3      	bne.n	800441e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	60fb      	str	r3, [r7, #12]
   return(result);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0310 	bic.w	r3, r3, #16
 800447a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	330c      	adds	r3, #12
 8004484:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004488:	61fa      	str	r2, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	69b9      	ldr	r1, [r7, #24]
 800448e:	69fa      	ldr	r2, [r7, #28]
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	617b      	str	r3, [r7, #20]
   return(result);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e3      	bne.n	8004464 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2202      	movs	r2, #2
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f847 	bl	800453c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ae:	e023      	b.n	80044f8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_UART_IRQHandler+0x524>
 80044bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f94a 	bl	8004762 <UART_Transmit_IT>
    return;
 80044ce:	e014      	b.n	80044fa <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00e      	beq.n	80044fa <HAL_UART_IRQHandler+0x54e>
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f98a 	bl	8004802 <UART_EndTransmit_IT>
    return;
 80044ee:	e004      	b.n	80044fa <HAL_UART_IRQHandler+0x54e>
    return;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_UART_IRQHandler+0x54e>
      return;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_UART_IRQHandler+0x54e>
      return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	37e8      	adds	r7, #232	@ 0xe8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004564:	e03b      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d037      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fc fdcd 	bl	800110c <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <UART_WaitOnFlagUntilTimeout+0x30>
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e03a      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d023      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d020      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2b40      	cmp	r3, #64	@ 0x40
 80045a0:	d01d      	beq.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0308 	and.w	r3, r3, #8
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d116      	bne.n	80045de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 f857 	bl	800467a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2208      	movs	r2, #8
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e00f      	b.n	80045fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4013      	ands	r3, r2
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d0b4      	beq.n	8004566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2222      	movs	r2, #34	@ 0x22
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d007      	beq.n	800464c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800464a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695a      	ldr	r2, [r3, #20]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68da      	ldr	r2, [r3, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 0220 	orr.w	r2, r2, #32
 800466a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800467a:	b480      	push	{r7}
 800467c:	b095      	sub	sp, #84	@ 0x54
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	330c      	adds	r3, #12
 8004688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800468a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468c:	e853 3f00 	ldrex	r3, [r3]
 8004690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	330c      	adds	r3, #12
 80046a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80046a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046aa:	e841 2300 	strex	r3, r2, [r1]
 80046ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1e5      	bne.n	8004682 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	3314      	adds	r3, #20
 80046bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	e853 3f00 	ldrex	r3, [r3]
 80046c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	f023 0301 	bic.w	r3, r3, #1
 80046cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046de:	e841 2300 	strex	r3, r2, [r1]
 80046e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1e5      	bne.n	80046b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d119      	bne.n	8004726 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	60bb      	str	r3, [r7, #8]
   return(result);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0310 	bic.w	r3, r3, #16
 8004708:	647b      	str	r3, [r7, #68]	@ 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004712:	61ba      	str	r2, [r7, #24]
 8004714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	613b      	str	r3, [r7, #16]
   return(result);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2220      	movs	r2, #32
 800472a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004734:	bf00      	nop
 8004736:	3754      	adds	r7, #84	@ 0x54
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004754:	68f8      	ldr	r0, [r7, #12]
 8004756:	f7ff fee7 	bl	8004528 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800475a:	bf00      	nop
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b085      	sub	sp, #20
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b21      	cmp	r3, #33	@ 0x21
 8004774:	d13e      	bne.n	80047f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477e:	d114      	bne.n	80047aa <UART_Transmit_IT+0x48>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d110      	bne.n	80047aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800479c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	621a      	str	r2, [r3, #32]
 80047a8:	e008      	b.n	80047bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	1c59      	adds	r1, r3, #1
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6211      	str	r1, [r2, #32]
 80047b4:	781a      	ldrb	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b01      	subs	r3, #1
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	4619      	mov	r1, r3
 80047ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10f      	bne.n	80047f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68da      	ldr	r2, [r3, #12]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047f0:	2300      	movs	r3, #0
 80047f2:	e000      	b.n	80047f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
  }
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b082      	sub	sp, #8
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff fe6c 	bl	8004500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08c      	sub	sp, #48	@ 0x30
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800483a:	2300      	movs	r3, #0
 800483c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b22      	cmp	r3, #34	@ 0x22
 800484c:	f040 80aa 	bne.w	80049a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004858:	d115      	bne.n	8004886 <UART_Receive_IT+0x54>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d111      	bne.n	8004886 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004866:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004874:	b29a      	uxth	r2, r3
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28
 8004884:	e024      	b.n	80048d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004894:	d007      	beq.n	80048a6 <UART_Receive_IT+0x74>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <UART_Receive_IT+0x82>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b0:	701a      	strb	r2, [r3, #0]
 80048b2:	e008      	b.n	80048c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29b      	uxth	r3, r3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	4619      	mov	r1, r3
 80048de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d15d      	bne.n	80049a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0220 	bic.w	r2, r2, #32
 80048f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004926:	2b01      	cmp	r3, #1
 8004928:	d135      	bne.n	8004996 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	613b      	str	r3, [r7, #16]
   return(result);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f023 0310 	bic.w	r3, r3, #16
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004950:	623a      	str	r2, [r7, #32]
 8004952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	69f9      	ldr	r1, [r7, #28]
 8004956:	6a3a      	ldr	r2, [r7, #32]
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	61bb      	str	r3, [r7, #24]
   return(result);
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d10a      	bne.n	8004988 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff fdd4 	bl	800453c <HAL_UARTEx_RxEventCallback>
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fdbc 	bl	8004514 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e002      	b.n	80049a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3730      	adds	r7, #48	@ 0x30
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
	...

080049b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b4:	b0c0      	sub	sp, #256	@ 0x100
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80049c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	ea40 0301 	orr.w	r3, r0, r1
 80049d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	431a      	orrs	r2, r3
 80049e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004a08:	f021 010c 	bic.w	r1, r1, #12
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004a16:	430b      	orrs	r3, r1
 8004a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a2a:	6999      	ldr	r1, [r3, #24]
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	ea40 0301 	orr.w	r3, r0, r1
 8004a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8004c7c <UART_SetConfig+0x2cc>)
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d005      	beq.n	8004a50 <UART_SetConfig+0xa0>
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8004c80 <UART_SetConfig+0x2d0>)
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d104      	bne.n	8004a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a50:	f7fe fd64 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8004a54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004a58:	e003      	b.n	8004a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a5a:	f7fe fd4b 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6c:	f040 810c 	bne.w	8004c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004a82:	4622      	mov	r2, r4
 8004a84:	462b      	mov	r3, r5
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a92:	4621      	mov	r1, r4
 8004a94:	eb12 0801 	adds.w	r8, r2, r1
 8004a98:	4629      	mov	r1, r5
 8004a9a:	eb43 0901 	adc.w	r9, r3, r1
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ab2:	4690      	mov	r8, r2
 8004ab4:	4699      	mov	r9, r3
 8004ab6:	4623      	mov	r3, r4
 8004ab8:	eb18 0303 	adds.w	r3, r8, r3
 8004abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	462b      	mov	r3, r5
 8004ac2:	eb49 0303 	adc.w	r3, r9, r3
 8004ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ade:	460b      	mov	r3, r1
 8004ae0:	18db      	adds	r3, r3, r3
 8004ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	eb42 0303 	adc.w	r3, r2, r3
 8004aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004af4:	f7fb fbdc 	bl	80002b0 <__aeabi_uldivmod>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4b61      	ldr	r3, [pc, #388]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004afe:	fba3 2302 	umull	r2, r3, r3, r2
 8004b02:	095b      	lsrs	r3, r3, #5
 8004b04:	011c      	lsls	r4, r3, #4
 8004b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004b18:	4642      	mov	r2, r8
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	1891      	adds	r1, r2, r2
 8004b1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004b20:	415b      	adcs	r3, r3
 8004b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004b28:	4641      	mov	r1, r8
 8004b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b2e:	4649      	mov	r1, r9
 8004b30:	eb43 0b01 	adc.w	fp, r3, r1
 8004b34:	f04f 0200 	mov.w	r2, #0
 8004b38:	f04f 0300 	mov.w	r3, #0
 8004b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b48:	4692      	mov	sl, r2
 8004b4a:	469b      	mov	fp, r3
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb4b 0303 	adc.w	r3, fp, r3
 8004b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b74:	460b      	mov	r3, r1
 8004b76:	18db      	adds	r3, r3, r3
 8004b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	eb42 0303 	adc.w	r3, r2, r3
 8004b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004b8a:	f7fb fb91 	bl	80002b0 <__aeabi_uldivmod>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	4b3b      	ldr	r3, [pc, #236]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004b96:	fba3 2301 	umull	r2, r3, r3, r1
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	2264      	movs	r2, #100	@ 0x64
 8004b9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ba2:	1acb      	subs	r3, r1, r3
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004baa:	4b36      	ldr	r3, [pc, #216]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004bac:	fba3 2302 	umull	r2, r3, r3, r2
 8004bb0:	095b      	lsrs	r3, r3, #5
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bb8:	441c      	add	r4, r3
 8004bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004bcc:	4642      	mov	r2, r8
 8004bce:	464b      	mov	r3, r9
 8004bd0:	1891      	adds	r1, r2, r2
 8004bd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004bd4:	415b      	adcs	r3, r3
 8004bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004bdc:	4641      	mov	r1, r8
 8004bde:	1851      	adds	r1, r2, r1
 8004be0:	6339      	str	r1, [r7, #48]	@ 0x30
 8004be2:	4649      	mov	r1, r9
 8004be4:	414b      	adcs	r3, r1
 8004be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004be8:	f04f 0200 	mov.w	r2, #0
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	00cb      	lsls	r3, r1, #3
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bfe:	4651      	mov	r1, sl
 8004c00:	00ca      	lsls	r2, r1, #3
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	4603      	mov	r3, r0
 8004c08:	4642      	mov	r2, r8
 8004c0a:	189b      	adds	r3, r3, r2
 8004c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c10:	464b      	mov	r3, r9
 8004c12:	460a      	mov	r2, r1
 8004c14:	eb42 0303 	adc.w	r3, r2, r3
 8004c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c30:	460b      	mov	r3, r1
 8004c32:	18db      	adds	r3, r3, r3
 8004c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c36:	4613      	mov	r3, r2
 8004c38:	eb42 0303 	adc.w	r3, r2, r3
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004c46:	f7fb fb33 	bl	80002b0 <__aeabi_uldivmod>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004c50:	fba3 1302 	umull	r1, r3, r3, r2
 8004c54:	095b      	lsrs	r3, r3, #5
 8004c56:	2164      	movs	r1, #100	@ 0x64
 8004c58:	fb01 f303 	mul.w	r3, r1, r3
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	3332      	adds	r3, #50	@ 0x32
 8004c62:	4a08      	ldr	r2, [pc, #32]	@ (8004c84 <UART_SetConfig+0x2d4>)
 8004c64:	fba2 2303 	umull	r2, r3, r2, r3
 8004c68:	095b      	lsrs	r3, r3, #5
 8004c6a:	f003 0207 	and.w	r2, r3, #7
 8004c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4422      	add	r2, r4
 8004c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c78:	e106      	b.n	8004e88 <UART_SetConfig+0x4d8>
 8004c7a:	bf00      	nop
 8004c7c:	40011000 	.word	0x40011000
 8004c80:	40011400 	.word	0x40011400
 8004c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	1891      	adds	r1, r2, r2
 8004ca0:	6239      	str	r1, [r7, #32]
 8004ca2:	415b      	adcs	r3, r3
 8004ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004caa:	4641      	mov	r1, r8
 8004cac:	1854      	adds	r4, r2, r1
 8004cae:	4649      	mov	r1, r9
 8004cb0:	eb43 0501 	adc.w	r5, r3, r1
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004cd0:	464b      	mov	r3, r9
 8004cd2:	eb45 0303 	adc.w	r3, r5, r3
 8004cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004ce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cea:	f04f 0200 	mov.w	r2, #0
 8004cee:	f04f 0300 	mov.w	r3, #0
 8004cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004cf6:	4629      	mov	r1, r5
 8004cf8:	008b      	lsls	r3, r1, #2
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d00:	4621      	mov	r1, r4
 8004d02:	008a      	lsls	r2, r1, #2
 8004d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004d08:	f7fb fad2 	bl	80002b0 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b60      	ldr	r3, [pc, #384]	@ (8004e94 <UART_SetConfig+0x4e4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004d24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	61b9      	str	r1, [r7, #24]
 8004d34:	415b      	adcs	r3, r3
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	1851      	adds	r1, r2, r1
 8004d40:	6139      	str	r1, [r7, #16]
 8004d42:	4649      	mov	r1, r9
 8004d44:	414b      	adcs	r3, r1
 8004d46:	617b      	str	r3, [r7, #20]
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d54:	4659      	mov	r1, fp
 8004d56:	00cb      	lsls	r3, r1, #3
 8004d58:	4651      	mov	r1, sl
 8004d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5e:	4651      	mov	r1, sl
 8004d60:	00ca      	lsls	r2, r1, #3
 8004d62:	4610      	mov	r0, r2
 8004d64:	4619      	mov	r1, r3
 8004d66:	4603      	mov	r3, r0
 8004d68:	4642      	mov	r2, r8
 8004d6a:	189b      	adds	r3, r3, r2
 8004d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d70:	464b      	mov	r3, r9
 8004d72:	460a      	mov	r2, r1
 8004d74:	eb42 0303 	adc.w	r3, r2, r3
 8004d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d94:	4649      	mov	r1, r9
 8004d96:	008b      	lsls	r3, r1, #2
 8004d98:	4641      	mov	r1, r8
 8004d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9e:	4641      	mov	r1, r8
 8004da0:	008a      	lsls	r2, r1, #2
 8004da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004da6:	f7fb fa83 	bl	80002b0 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	4b38      	ldr	r3, [pc, #224]	@ (8004e94 <UART_SetConfig+0x4e4>)
 8004db2:	fba3 2301 	umull	r2, r3, r3, r1
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2264      	movs	r2, #100	@ 0x64
 8004dba:	fb02 f303 	mul.w	r3, r2, r3
 8004dbe:	1acb      	subs	r3, r1, r3
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	3332      	adds	r3, #50	@ 0x32
 8004dc4:	4a33      	ldr	r2, [pc, #204]	@ (8004e94 <UART_SetConfig+0x4e4>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd0:	441c      	add	r4, r3
 8004dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004dda:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ddc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	60b9      	str	r1, [r7, #8]
 8004de8:	415b      	adcs	r3, r3
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6039      	str	r1, [r7, #0]
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e22:	464b      	mov	r3, r9
 8004e24:	460a      	mov	r2, r1
 8004e26:	eb42 0303 	adc.w	r3, r2, r3
 8004e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e36:	667a      	str	r2, [r7, #100]	@ 0x64
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004e44:	4649      	mov	r1, r9
 8004e46:	008b      	lsls	r3, r1, #2
 8004e48:	4641      	mov	r1, r8
 8004e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e4e:	4641      	mov	r1, r8
 8004e50:	008a      	lsls	r2, r1, #2
 8004e52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004e56:	f7fb fa2b 	bl	80002b0 <__aeabi_uldivmod>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <UART_SetConfig+0x4e4>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	2164      	movs	r1, #100	@ 0x64
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	3332      	adds	r3, #50	@ 0x32
 8004e72:	4a08      	ldr	r2, [pc, #32]	@ (8004e94 <UART_SetConfig+0x4e4>)
 8004e74:	fba2 2303 	umull	r2, r3, r2, r3
 8004e78:	095b      	lsrs	r3, r3, #5
 8004e7a:	f003 020f 	and.w	r2, r3, #15
 8004e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4422      	add	r2, r4
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	bf00      	nop
 8004e8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e94:	51eb851f 	.word	0x51eb851f

08004e98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 001c 	add.w	r0, r7, #28
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eaa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d123      	bne.n	8004efa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004eda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d105      	bne.n	8004eee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f001 fae8 	bl	80064c4 <USB_CoreReset>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e01b      	b.n	8004f32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fadc 	bl	80064c4 <USB_CoreReset>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f24:	e005      	b.n	8004f32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f32:	7fbb      	ldrb	r3, [r7, #30]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d10b      	bne.n	8004f50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	f043 0206 	orr.w	r2, r3, #6
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f5c:	b004      	add	sp, #16
 8004f5e:	4770      	bx	lr

08004f60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f6e:	79fb      	ldrb	r3, [r7, #7]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d165      	bne.n	8005040 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4a41      	ldr	r2, [pc, #260]	@ (800507c <USB_SetTurnaroundTime+0x11c>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d906      	bls.n	8004f8a <USB_SetTurnaroundTime+0x2a>
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	4a40      	ldr	r2, [pc, #256]	@ (8005080 <USB_SetTurnaroundTime+0x120>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d202      	bcs.n	8004f8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f84:	230f      	movs	r3, #15
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	e062      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8005080 <USB_SetTurnaroundTime+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d306      	bcc.n	8004fa0 <USB_SetTurnaroundTime+0x40>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a3b      	ldr	r2, [pc, #236]	@ (8005084 <USB_SetTurnaroundTime+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d202      	bcs.n	8004fa0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f9a:	230e      	movs	r3, #14
 8004f9c:	617b      	str	r3, [r7, #20]
 8004f9e:	e057      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	4a38      	ldr	r2, [pc, #224]	@ (8005084 <USB_SetTurnaroundTime+0x124>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d306      	bcc.n	8004fb6 <USB_SetTurnaroundTime+0x56>
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	4a37      	ldr	r2, [pc, #220]	@ (8005088 <USB_SetTurnaroundTime+0x128>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d202      	bcs.n	8004fb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004fb0:	230d      	movs	r3, #13
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	e04c      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <USB_SetTurnaroundTime+0x128>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d306      	bcc.n	8004fcc <USB_SetTurnaroundTime+0x6c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	4a32      	ldr	r2, [pc, #200]	@ (800508c <USB_SetTurnaroundTime+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d802      	bhi.n	8004fcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004fc6:	230c      	movs	r3, #12
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e041      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4a2f      	ldr	r2, [pc, #188]	@ (800508c <USB_SetTurnaroundTime+0x12c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d906      	bls.n	8004fe2 <USB_SetTurnaroundTime+0x82>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	4a2e      	ldr	r2, [pc, #184]	@ (8005090 <USB_SetTurnaroundTime+0x130>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d802      	bhi.n	8004fe2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004fdc:	230b      	movs	r3, #11
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e036      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4a2a      	ldr	r2, [pc, #168]	@ (8005090 <USB_SetTurnaroundTime+0x130>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d906      	bls.n	8004ff8 <USB_SetTurnaroundTime+0x98>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4a29      	ldr	r2, [pc, #164]	@ (8005094 <USB_SetTurnaroundTime+0x134>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d802      	bhi.n	8004ff8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004ff2:	230a      	movs	r3, #10
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e02b      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <USB_SetTurnaroundTime+0x134>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d906      	bls.n	800500e <USB_SetTurnaroundTime+0xae>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	4a25      	ldr	r2, [pc, #148]	@ (8005098 <USB_SetTurnaroundTime+0x138>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d202      	bcs.n	800500e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005008:	2309      	movs	r3, #9
 800500a:	617b      	str	r3, [r7, #20]
 800500c:	e020      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4a21      	ldr	r2, [pc, #132]	@ (8005098 <USB_SetTurnaroundTime+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d306      	bcc.n	8005024 <USB_SetTurnaroundTime+0xc4>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	4a20      	ldr	r2, [pc, #128]	@ (800509c <USB_SetTurnaroundTime+0x13c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d802      	bhi.n	8005024 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800501e:	2308      	movs	r3, #8
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e015      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4a1d      	ldr	r2, [pc, #116]	@ (800509c <USB_SetTurnaroundTime+0x13c>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d906      	bls.n	800503a <USB_SetTurnaroundTime+0xda>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <USB_SetTurnaroundTime+0x140>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d202      	bcs.n	800503a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005034:	2307      	movs	r3, #7
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e00a      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800503a:	2306      	movs	r3, #6
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	e007      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005040:	79fb      	ldrb	r3, [r7, #7]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d102      	bne.n	800504c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005046:	2309      	movs	r3, #9
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e001      	b.n	8005050 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800504c:	2309      	movs	r3, #9
 800504e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	029b      	lsls	r3, r3, #10
 8005064:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	371c      	adds	r7, #28
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	00d8acbf 	.word	0x00d8acbf
 8005080:	00e4e1c0 	.word	0x00e4e1c0
 8005084:	00f42400 	.word	0x00f42400
 8005088:	01067380 	.word	0x01067380
 800508c:	011a499f 	.word	0x011a499f
 8005090:	01312cff 	.word	0x01312cff
 8005094:	014ca43f 	.word	0x014ca43f
 8005098:	016e3600 	.word	0x016e3600
 800509c:	01a6ab1f 	.word	0x01a6ab1f
 80050a0:	01e84800 	.word	0x01e84800

080050a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f043 0201 	orr.w	r2, r3, #1
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d115      	bne.n	8005136 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005116:	200a      	movs	r0, #10
 8005118:	f7fc f804 	bl	8001124 <HAL_Delay>
      ms += 10U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	330a      	adds	r3, #10
 8005120:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f001 f93f 	bl	80063a6 <USB_GetMode>
 8005128:	4603      	mov	r3, r0
 800512a:	2b01      	cmp	r3, #1
 800512c:	d01e      	beq.n	800516c <USB_SetCurrentMode+0x84>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2bc7      	cmp	r3, #199	@ 0xc7
 8005132:	d9f0      	bls.n	8005116 <USB_SetCurrentMode+0x2e>
 8005134:	e01a      	b.n	800516c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005136:	78fb      	ldrb	r3, [r7, #3]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d115      	bne.n	8005168 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005148:	200a      	movs	r0, #10
 800514a:	f7fb ffeb 	bl	8001124 <HAL_Delay>
      ms += 10U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	330a      	adds	r3, #10
 8005152:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f001 f926 	bl	80063a6 <USB_GetMode>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <USB_SetCurrentMode+0x84>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2bc7      	cmp	r3, #199	@ 0xc7
 8005164:	d9f0      	bls.n	8005148 <USB_SetCurrentMode+0x60>
 8005166:	e001      	b.n	800516c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e005      	b.n	8005178 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005170:	d101      	bne.n	8005176 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e000      	b.n	8005178 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005180:	b084      	sub	sp, #16
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800518e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800519a:	2300      	movs	r3, #0
 800519c:	613b      	str	r3, [r7, #16]
 800519e:	e009      	b.n	80051b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	3340      	adds	r3, #64	@ 0x40
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	2200      	movs	r2, #0
 80051ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	3301      	adds	r3, #1
 80051b2:	613b      	str	r3, [r7, #16]
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b0e      	cmp	r3, #14
 80051b8:	d9f2      	bls.n	80051a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80051ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d11c      	bne.n	80051fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80051fa:	e00b      	b.n	8005214 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800520c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800521a:	461a      	mov	r2, r3
 800521c:	2300      	movs	r3, #0
 800521e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005220:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10d      	bne.n	8005244 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005228:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800522c:	2b00      	cmp	r3, #0
 800522e:	d104      	bne.n	800523a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005230:	2100      	movs	r1, #0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f968 	bl	8005508 <USB_SetDevSpeed>
 8005238:	e008      	b.n	800524c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800523a:	2101      	movs	r1, #1
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f963 	bl	8005508 <USB_SetDevSpeed>
 8005242:	e003      	b.n	800524c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005244:	2103      	movs	r1, #3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f95e 	bl	8005508 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800524c:	2110      	movs	r1, #16
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f8fa 	bl	8005448 <USB_FlushTxFifo>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f924 	bl	80054ac <USB_FlushRxFifo>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005274:	461a      	mov	r2, r3
 8005276:	2300      	movs	r3, #0
 8005278:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800528c:	461a      	mov	r2, r3
 800528e:	2300      	movs	r3, #0
 8005290:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	e043      	b.n	8005320 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052ae:	d118      	bne.n	80052e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c2:	461a      	mov	r2, r3
 80052c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052c8:	6013      	str	r3, [r2, #0]
 80052ca:	e013      	b.n	80052f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	e008      	b.n	80052f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ee:	461a      	mov	r2, r3
 80052f0:	2300      	movs	r3, #0
 80052f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005300:	461a      	mov	r2, r3
 8005302:	2300      	movs	r3, #0
 8005304:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005312:	461a      	mov	r2, r3
 8005314:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3301      	adds	r3, #1
 800531e:	613b      	str	r3, [r7, #16]
 8005320:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005324:	461a      	mov	r2, r3
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4293      	cmp	r3, r2
 800532a:	d3b5      	bcc.n	8005298 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	e043      	b.n	80053ba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005348:	d118      	bne.n	800537c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	e013      	b.n	800538e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005372:	461a      	mov	r2, r3
 8005374:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e008      	b.n	800538e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	461a      	mov	r2, r3
 800538a:	2300      	movs	r3, #0
 800538c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800539a:	461a      	mov	r2, r3
 800539c:	2300      	movs	r3, #0
 800539e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053ac:	461a      	mov	r2, r3
 80053ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	3301      	adds	r3, #1
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053be:	461a      	mov	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d3b5      	bcc.n	8005332 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053d8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80053e6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	4b10      	ldr	r3, [pc, #64]	@ (8005444 <USB_DevInit+0x2c4>)
 8005402:	4313      	orrs	r3, r2
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005408:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f043 0208 	orr.w	r2, r3, #8
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800541c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005420:	2b01      	cmp	r3, #1
 8005422:	d107      	bne.n	8005434 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005434:	7dfb      	ldrb	r3, [r7, #23]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3718      	adds	r7, #24
 800543a:	46bd      	mov	sp, r7
 800543c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005440:	b004      	add	sp, #16
 8005442:	4770      	bx	lr
 8005444:	803c3800 	.word	0x803c3800

08005448 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3301      	adds	r3, #1
 800545a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005462:	d901      	bls.n	8005468 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	e01b      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	daf2      	bge.n	8005456 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	019b      	lsls	r3, r3, #6
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800548c:	d901      	bls.n	8005492 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e006      	b.n	80054a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0320 	and.w	r3, r3, #32
 800549a:	2b20      	cmp	r3, #32
 800549c:	d0f0      	beq.n	8005480 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	3301      	adds	r3, #1
 80054bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054c4:	d901      	bls.n	80054ca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e018      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	daf2      	bge.n	80054b8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2210      	movs	r2, #16
 80054da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3301      	adds	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80054e8:	d901      	bls.n	80054ee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e006      	b.n	80054fc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d0f0      	beq.n	80054dc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005528:	4313      	orrs	r3, r2
 800552a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b087      	sub	sp, #28
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0306 	and.w	r3, r3, #6
 8005552:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d102      	bne.n	8005560 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]
 800555e:	e00a      	b.n	8005576 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2b02      	cmp	r3, #2
 8005564:	d002      	beq.n	800556c <USB_GetDevSpeed+0x32>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b06      	cmp	r3, #6
 800556a:	d102      	bne.n	8005572 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800556c:	2302      	movs	r3, #2
 800556e:	75fb      	strb	r3, [r7, #23]
 8005570:	e001      	b.n	8005576 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005572:	230f      	movs	r3, #15
 8005574:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d13a      	bne.n	8005616 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	2101      	movs	r1, #1
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	68f9      	ldr	r1, [r7, #12]
 80055ba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055be:	4313      	orrs	r3, r2
 80055c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	015a      	lsls	r2, r3, #5
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d155      	bne.n	8005684 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	015a      	lsls	r2, r3, #5
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	4413      	add	r3, r2
 80055e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	791b      	ldrb	r3, [r3, #4]
 80055f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	059b      	lsls	r3, r3, #22
 80055fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055fc:	4313      	orrs	r3, r2
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	0151      	lsls	r1, r2, #5
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	440a      	add	r2, r1
 8005606:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800560a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800560e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e036      	b.n	8005684 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561c:	69da      	ldr	r2, [r3, #28]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	f003 030f 	and.w	r3, r3, #15
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	041b      	lsls	r3, r3, #16
 800562e:	68f9      	ldr	r1, [r7, #12]
 8005630:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005634:	4313      	orrs	r3, r2
 8005636:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d11a      	bne.n	8005684 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	791b      	ldrb	r3, [r3, #4]
 8005668:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800566a:	430b      	orrs	r3, r1
 800566c:	4313      	orrs	r3, r2
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800567a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800567e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005682:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d161      	bne.n	8005774 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056c6:	d11f      	bne.n	8005708 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	0151      	lsls	r1, r2, #5
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	440a      	add	r2, r1
 80056de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005702:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005706:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800570e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	f003 030f 	and.w	r3, r3, #15
 8005718:	2101      	movs	r1, #1
 800571a:	fa01 f303 	lsl.w	r3, r1, r3
 800571e:	b29b      	uxth	r3, r3
 8005720:	43db      	mvns	r3, r3
 8005722:	68f9      	ldr	r1, [r7, #12]
 8005724:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005728:	4013      	ands	r3, r2
 800572a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	2101      	movs	r1, #1
 800573e:	fa01 f303 	lsl.w	r3, r1, r3
 8005742:	b29b      	uxth	r3, r3
 8005744:	43db      	mvns	r3, r3
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800574c:	4013      	ands	r3, r2
 800574e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	0159      	lsls	r1, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	440b      	add	r3, r1
 8005766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800576a:	4619      	mov	r1, r3
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <USB_DeactivateEndpoint+0x1b0>)
 800576e:	4013      	ands	r3, r2
 8005770:	600b      	str	r3, [r1, #0]
 8005772:	e060      	b.n	8005836 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005786:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800578a:	d11f      	bne.n	80057cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80057aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800582e:	4619      	mov	r1, r3
 8005830:	4b05      	ldr	r3, [pc, #20]	@ (8005848 <USB_DeactivateEndpoint+0x1b4>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	ec337800 	.word	0xec337800
 8005848:	eff37800 	.word	0xeff37800

0800584c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	@ 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b01      	cmp	r3, #1
 800586a:	f040 817f 	bne.w	8005b6c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d132      	bne.n	80058dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005890:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005894:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d4:	0cdb      	lsrs	r3, r3, #19
 80058d6:	04db      	lsls	r3, r3, #19
 80058d8:	6113      	str	r3, [r2, #16]
 80058da:	e097      	b.n	8005a0c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058f6:	0cdb      	lsrs	r3, r3, #19
 80058f8:	04db      	lsls	r3, r3, #19
 80058fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005916:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800591a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800591e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d11a      	bne.n	800595c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	429a      	cmp	r2, r3
 8005930:	d903      	bls.n	800593a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	689a      	ldr	r2, [r3, #8]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	0151      	lsls	r1, r2, #5
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	440a      	add	r2, r1
 8005950:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005954:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005958:	6113      	str	r3, [r2, #16]
 800595a:	e044      	b.n	80059e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	4413      	add	r3, r2
 8005966:	1e5a      	subs	r2, r3, #1
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	015a      	lsls	r2, r3, #5
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	8afb      	ldrh	r3, [r7, #22]
 8005982:	04d9      	lsls	r1, r3, #19
 8005984:	4ba4      	ldr	r3, [pc, #656]	@ (8005c18 <USB_EPStartXfer+0x3cc>)
 8005986:	400b      	ands	r3, r1
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	0148      	lsls	r0, r1, #5
 800598c:	69f9      	ldr	r1, [r7, #28]
 800598e:	4401      	add	r1, r0
 8005990:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005994:	4313      	orrs	r3, r2
 8005996:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	791b      	ldrb	r3, [r3, #4]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d122      	bne.n	80059e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80059be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	8afb      	ldrh	r3, [r7, #22]
 80059d0:	075b      	lsls	r3, r3, #29
 80059d2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80059d6:	69b9      	ldr	r1, [r7, #24]
 80059d8:	0148      	lsls	r0, r1, #5
 80059da:	69f9      	ldr	r1, [r7, #28]
 80059dc:	4401      	add	r1, r0
 80059de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80059e2:	4313      	orrs	r3, r2
 80059e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fc:	69b9      	ldr	r1, [r7, #24]
 80059fe:	0148      	lsls	r0, r1, #5
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	4401      	add	r1, r0
 8005a04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d14b      	bne.n	8005aaa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a26:	461a      	mov	r2, r3
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d128      	bne.n	8005a88 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d110      	bne.n	8005a68 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a60:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a64:	6013      	str	r3, [r2, #0]
 8005a66:	e00f      	b.n	8005a88 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a86:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e166      	b.n	8005d78 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005ac8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	791b      	ldrb	r3, [r3, #4]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d015      	beq.n	8005afe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 814e 	beq.w	8005d78 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	2101      	movs	r1, #1
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	69f9      	ldr	r1, [r7, #28]
 8005af4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005af8:	4313      	orrs	r3, r2
 8005afa:	634b      	str	r3, [r1, #52]	@ 0x34
 8005afc:	e13c      	b.n	8005d78 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d110      	bne.n	8005b30 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e00f      	b.n	8005b50 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b4e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	68d9      	ldr	r1, [r3, #12]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	b298      	uxth	r0, r3
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	4603      	mov	r3, r0
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f9b9 	bl	8005edc <USB_WritePacket>
 8005b6a:	e105      	b.n	8005d78 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b86:	0cdb      	lsrs	r3, r3, #19
 8005b88:	04db      	lsls	r3, r3, #19
 8005b8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	69fa      	ldr	r2, [r7, #28]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ba6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005baa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005bae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d132      	bne.n	8005c1c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	689a      	ldr	r2, [r3, #8]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bda:	691a      	ldr	r2, [r3, #16]
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	0148      	lsls	r0, r1, #5
 8005be8:	69f9      	ldr	r1, [r7, #28]
 8005bea:	4401      	add	r1, r0
 8005bec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	0151      	lsls	r1, r2, #5
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	440a      	add	r2, r1
 8005c0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c12:	6113      	str	r3, [r2, #16]
 8005c14:	e062      	b.n	8005cdc <USB_EPStartXfer+0x490>
 8005c16:	bf00      	nop
 8005c18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d123      	bne.n	8005c6c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c3a:	69b9      	ldr	r1, [r7, #24]
 8005c3c:	0148      	lsls	r0, r1, #5
 8005c3e:	69f9      	ldr	r1, [r7, #28]
 8005c40:	4401      	add	r1, r0
 8005c42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c46:	4313      	orrs	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005c68:	6113      	str	r3, [r2, #16]
 8005c6a:	e037      	b.n	8005cdc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	1e5a      	subs	r2, r3, #1
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c80:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	8afa      	ldrh	r2, [r7, #22]
 8005c88:	fb03 f202 	mul.w	r2, r3, r2
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9c:	691a      	ldr	r2, [r3, #16]
 8005c9e:	8afb      	ldrh	r3, [r7, #22]
 8005ca0:	04d9      	lsls	r1, r3, #19
 8005ca2:	4b38      	ldr	r3, [pc, #224]	@ (8005d84 <USB_EPStartXfer+0x538>)
 8005ca4:	400b      	ands	r3, r1
 8005ca6:	69b9      	ldr	r1, [r7, #24]
 8005ca8:	0148      	lsls	r0, r1, #5
 8005caa:	69f9      	ldr	r1, [r7, #28]
 8005cac:	4401      	add	r1, r0
 8005cae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ccc:	69b9      	ldr	r1, [r7, #24]
 8005cce:	0148      	lsls	r0, r1, #5
 8005cd0:	69f9      	ldr	r1, [r7, #28]
 8005cd2:	4401      	add	r1, r0
 8005cd4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d10d      	bne.n	8005cfe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	68d9      	ldr	r1, [r3, #12]
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cfa:	460a      	mov	r2, r1
 8005cfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	791b      	ldrb	r3, [r3, #4]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d128      	bne.n	8005d58 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	015a      	lsls	r2, r3, #5
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	69ba      	ldr	r2, [r7, #24]
 8005d26:	0151      	lsls	r1, r2, #5
 8005d28:	69fa      	ldr	r2, [r7, #28]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	e00f      	b.n	8005d58 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005d76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3720      	adds	r7, #32
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	1ff80000 	.word	0x1ff80000

08005d88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	785b      	ldrb	r3, [r3, #1]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d14a      	bne.n	8005e3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dbe:	f040 8086 	bne.w	8005ece <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	7812      	ldrb	r2, [r2, #0]
 8005dd6:	0151      	lsls	r1, r2, #5
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	440a      	add	r2, r1
 8005ddc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005de4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	683a      	ldr	r2, [r7, #0]
 8005df8:	7812      	ldrb	r2, [r2, #0]
 8005dfa:	0151      	lsls	r1, r2, #5
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	440a      	add	r2, r1
 8005e00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d902      	bls.n	8005e20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1e:	e056      	b.n	8005ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e38:	d0e7      	beq.n	8005e0a <USB_EPStopXfer+0x82>
 8005e3a:	e048      	b.n	8005ece <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e54:	d13b      	bne.n	8005ece <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	7812      	ldrb	r2, [r2, #0]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	015a      	lsls	r2, r3, #5
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	4413      	add	r3, r2
 8005e84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	0151      	lsls	r1, r2, #5
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	440a      	add	r2, r1
 8005e94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d902      	bls.n	8005eb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005eb2:	e00c      	b.n	8005ece <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ecc:	d0e7      	beq.n	8005e9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	371c      	adds	r7, #28
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	@ 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	461a      	mov	r2, r3
 8005eea:	460b      	mov	r3, r1
 8005eec:	71fb      	strb	r3, [r7, #7]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d123      	bne.n	8005f4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f02:	88bb      	ldrh	r3, [r7, #4]
 8005f04:	3303      	adds	r3, #3
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]
 8005f0e:	e018      	b.n	8005f42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f10:	79fb      	ldrb	r3, [r7, #7]
 8005f12:	031a      	lsls	r2, r3, #12
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3301      	adds	r3, #1
 8005f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d3e2      	bcc.n	8005f10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3724      	adds	r7, #36	@ 0x24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b08b      	sub	sp, #44	@ 0x2c
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	4613      	mov	r3, r2
 8005f64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	089b      	lsrs	r3, r3, #2
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f76:	88fb      	ldrh	r3, [r7, #6]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f7e:	2300      	movs	r3, #0
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	e014      	b.n	8005fae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	3301      	adds	r3, #1
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	3301      	adds	r3, #1
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	3301      	adds	r3, #1
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	6a3a      	ldr	r2, [r7, #32]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d3e6      	bcc.n	8005f84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fb6:	8bfb      	ldrh	r3, [r7, #30]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d01e      	beq.n	8005ffa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	f107 0310 	add.w	r3, r7, #16
 8005fcc:	6812      	ldr	r2, [r2, #0]
 8005fce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	701a      	strb	r2, [r3, #0]
      i++;
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	3301      	adds	r3, #1
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005fee:	8bfb      	ldrh	r3, [r7, #30]
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005ff4:	8bfb      	ldrh	r3, [r7, #30]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1ea      	bne.n	8005fd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	372c      	adds	r7, #44	@ 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	785b      	ldrb	r3, [r3, #1]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d12c      	bne.n	800607e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	015a      	lsls	r2, r3, #5
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	db12      	blt.n	800605c <USB_EPSetStall+0x54>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00f      	beq.n	800605c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	0151      	lsls	r1, r2, #5
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	440a      	add	r2, r1
 8006052:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006056:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800605a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4413      	add	r3, r2
 8006064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68ba      	ldr	r2, [r7, #8]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	440a      	add	r2, r1
 8006072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	e02b      	b.n	80060d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	db12      	blt.n	80060b6 <USB_EPSetStall+0xae>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00f      	beq.n	80060b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	015a      	lsls	r2, r3, #5
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	0151      	lsls	r1, r2, #5
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	440a      	add	r2, r1
 80060ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80060d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d128      	bne.n	8006152 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800611a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800611e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	791b      	ldrb	r3, [r3, #4]
 8006124:	2b03      	cmp	r3, #3
 8006126:	d003      	beq.n	8006130 <USB_EPClearStall+0x4c>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	791b      	ldrb	r3, [r3, #4]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d138      	bne.n	80061a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800614a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	e027      	b.n	80061a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	0151      	lsls	r1, r2, #5
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	440a      	add	r2, r1
 8006168:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800616c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006170:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	791b      	ldrb	r3, [r3, #4]
 8006176:	2b03      	cmp	r3, #3
 8006178:	d003      	beq.n	8006182 <USB_EPClearStall+0x9e>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	2b02      	cmp	r3, #2
 8006180:	d10f      	bne.n	80061a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800619c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80061d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	78fb      	ldrb	r3, [r7, #3]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80061e4:	68f9      	ldr	r1, [r7, #12]
 80061e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006216:	f023 0303 	bic.w	r3, r3, #3
 800621a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622a:	f023 0302 	bic.w	r3, r3, #2
 800622e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800623e:	b480      	push	{r7}
 8006240:	b085      	sub	sp, #20
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006258:	f023 0303 	bic.w	r3, r3, #3
 800625c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800626c:	f043 0302 	orr.w	r3, r3, #2
 8006270:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3714      	adds	r7, #20
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4013      	ands	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006298:	68fb      	ldr	r3, [r7, #12]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	4013      	ands	r3, r2
 80062c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	0c1b      	lsrs	r3, r3, #16
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f6:	69db      	ldr	r3, [r3, #28]
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	b29b      	uxth	r3, r3
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800630e:	b480      	push	{r7}
 8006310:	b085      	sub	sp, #20
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	460b      	mov	r3, r1
 8006318:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	4013      	ands	r3, r2
 800633a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800633c:	68bb      	ldr	r3, [r7, #8]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800634a:	b480      	push	{r7}
 800634c:	b087      	sub	sp, #28
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800636c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	fa22 f303 	lsr.w	r3, r2, r3
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	b2db      	uxtb	r3, r3
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	015a      	lsls	r2, r3, #5
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4413      	add	r3, r2
 800638c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4013      	ands	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006398:	68bb      	ldr	r3, [r7, #8]
}
 800639a:	4618      	mov	r0, r3
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	f003 0301 	and.w	r3, r3, #1
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80063dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80063e0:	f023 0307 	bic.w	r3, r3, #7
 80063e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	460b      	mov	r3, r1
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	333c      	adds	r3, #60	@ 0x3c
 800641e:	3304      	adds	r3, #4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4a26      	ldr	r2, [pc, #152]	@ (80064c0 <USB_EP0_OutStart+0xb8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d90a      	bls.n	8006442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006438:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800643c:	d101      	bne.n	8006442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800643e:	2300      	movs	r3, #0
 8006440:	e037      	b.n	80064b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	461a      	mov	r2, r3
 800644a:	2300      	movs	r3, #0
 800644c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	697a      	ldr	r2, [r7, #20]
 8006458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800645c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006470:	f043 0318 	orr.w	r3, r3, #24
 8006474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006484:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	697a      	ldr	r2, [r7, #20]
 80064a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80064ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	4f54300a 	.word	0x4f54300a

080064c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064dc:	d901      	bls.n	80064e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e022      	b.n	8006528 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	daf2      	bge.n	80064d0 <USB_CoreReset+0xc>

  count = 10U;
 80064ea:	230a      	movs	r3, #10
 80064ec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80064ee:	e002      	b.n	80064f6 <USB_CoreReset+0x32>
  {
    count--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	3b01      	subs	r3, #1
 80064f4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1f9      	bne.n	80064f0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f043 0201 	orr.w	r2, r3, #1
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006514:	d901      	bls.n	800651a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e006      	b.n	8006528 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b01      	cmp	r3, #1
 8006524:	d0f0      	beq.n	8006508 <USB_CoreReset+0x44>

  return HAL_OK;
 8006526:	2300      	movs	r3, #0
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	460b      	mov	r3, r1
 800653e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006540:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006544:	f002 fd7c 	bl	8009040 <USBD_static_malloc>
 8006548:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32b0      	adds	r2, #176	@ 0xb0
 800655a:	2100      	movs	r1, #0
 800655c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006560:	2302      	movs	r3, #2
 8006562:	e0d4      	b.n	800670e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006564:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006568:	2100      	movs	r1, #0
 800656a:	68f8      	ldr	r0, [r7, #12]
 800656c:	f002 febc 	bl	80092e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	32b0      	adds	r2, #176	@ 0xb0
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	32b0      	adds	r2, #176	@ 0xb0
 800658a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	7c1b      	ldrb	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d138      	bne.n	800660e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800659c:	4b5e      	ldr	r3, [pc, #376]	@ (8006718 <USBD_CDC_Init+0x1e4>)
 800659e:	7819      	ldrb	r1, [r3, #0]
 80065a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065a4:	2202      	movs	r2, #2
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 fc27 	bl	8008dfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065ac:	4b5a      	ldr	r3, [pc, #360]	@ (8006718 <USBD_CDC_Init+0x1e4>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3323      	adds	r3, #35	@ 0x23
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065c6:	4b55      	ldr	r3, [pc, #340]	@ (800671c <USBD_CDC_Init+0x1e8>)
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80065ce:	2202      	movs	r2, #2
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f002 fc12 	bl	8008dfa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065d6:	4b51      	ldr	r3, [pc, #324]	@ (800671c <USBD_CDC_Init+0x1e8>)
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80065ee:	2201      	movs	r2, #1
 80065f0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006720 <USBD_CDC_Init+0x1ec>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	f003 020f 	and.w	r2, r3, #15
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	331c      	adds	r3, #28
 8006608:	2210      	movs	r2, #16
 800660a:	601a      	str	r2, [r3, #0]
 800660c:	e035      	b.n	800667a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800660e:	4b42      	ldr	r3, [pc, #264]	@ (8006718 <USBD_CDC_Init+0x1e4>)
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	2340      	movs	r3, #64	@ 0x40
 8006614:	2202      	movs	r2, #2
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f002 fbef 	bl	8008dfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800661c:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <USBD_CDC_Init+0x1e4>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	3323      	adds	r3, #35	@ 0x23
 8006632:	2201      	movs	r2, #1
 8006634:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006636:	4b39      	ldr	r3, [pc, #228]	@ (800671c <USBD_CDC_Init+0x1e8>)
 8006638:	7819      	ldrb	r1, [r3, #0]
 800663a:	2340      	movs	r3, #64	@ 0x40
 800663c:	2202      	movs	r2, #2
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f002 fbdb 	bl	8008dfa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006644:	4b35      	ldr	r3, [pc, #212]	@ (800671c <USBD_CDC_Init+0x1e8>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	f003 020f 	and.w	r2, r3, #15
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800665c:	2201      	movs	r2, #1
 800665e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006660:	4b2f      	ldr	r3, [pc, #188]	@ (8006720 <USBD_CDC_Init+0x1ec>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 020f 	and.w	r2, r3, #15
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	4613      	mov	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	440b      	add	r3, r1
 8006674:	331c      	adds	r3, #28
 8006676:	2210      	movs	r2, #16
 8006678:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800667a:	4b29      	ldr	r3, [pc, #164]	@ (8006720 <USBD_CDC_Init+0x1ec>)
 800667c:	7819      	ldrb	r1, [r3, #0]
 800667e:	2308      	movs	r3, #8
 8006680:	2203      	movs	r2, #3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f002 fbb9 	bl	8008dfa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006688:	4b25      	ldr	r3, [pc, #148]	@ (8006720 <USBD_CDC_Init+0x1ec>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f003 020f 	and.w	r2, r3, #15
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	3323      	adds	r3, #35	@ 0x23
 800669e:	2201      	movs	r2, #1
 80066a0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	33b0      	adds	r3, #176	@ 0xb0
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066d8:	2302      	movs	r3, #2
 80066da:	e018      	b.n	800670e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	7c1b      	ldrb	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10a      	bne.n	80066fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066e4:	4b0d      	ldr	r3, [pc, #52]	@ (800671c <USBD_CDC_Init+0x1e8>)
 80066e6:	7819      	ldrb	r1, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80066ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f002 fc70 	bl	8008fd8 <USBD_LL_PrepareReceive>
 80066f8:	e008      	b.n	800670c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <USBD_CDC_Init+0x1e8>)
 80066fc:	7819      	ldrb	r1, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006704:	2340      	movs	r3, #64	@ 0x40
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f002 fc66 	bl	8008fd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800670c:	2300      	movs	r3, #0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000093 	.word	0x20000093
 800671c:	20000094 	.word	0x20000094
 8006720:	20000095 	.word	0x20000095

08006724 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006730:	4b3a      	ldr	r3, [pc, #232]	@ (800681c <USBD_CDC_DeInit+0xf8>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	4619      	mov	r1, r3
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f002 fb85 	bl	8008e46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800673c:	4b37      	ldr	r3, [pc, #220]	@ (800681c <USBD_CDC_DeInit+0xf8>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f003 020f 	and.w	r2, r3, #15
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	440b      	add	r3, r1
 8006750:	3323      	adds	r3, #35	@ 0x23
 8006752:	2200      	movs	r2, #0
 8006754:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006756:	4b32      	ldr	r3, [pc, #200]	@ (8006820 <USBD_CDC_DeInit+0xfc>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f002 fb72 	bl	8008e46 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006762:	4b2f      	ldr	r3, [pc, #188]	@ (8006820 <USBD_CDC_DeInit+0xfc>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800677e:	4b29      	ldr	r3, [pc, #164]	@ (8006824 <USBD_CDC_DeInit+0x100>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f002 fb5e 	bl	8008e46 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800678a:	4b26      	ldr	r3, [pc, #152]	@ (8006824 <USBD_CDC_DeInit+0x100>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	3323      	adds	r3, #35	@ 0x23
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067a4:	4b1f      	ldr	r3, [pc, #124]	@ (8006824 <USBD_CDC_DeInit+0x100>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	f003 020f 	and.w	r2, r3, #15
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	331c      	adds	r3, #28
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	32b0      	adds	r2, #176	@ 0xb0
 80067c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d01f      	beq.n	8006810 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	33b0      	adds	r3, #176	@ 0xb0
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	32b0      	adds	r2, #176	@ 0xb0
 80067ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f002 fc32 	bl	800905c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32b0      	adds	r2, #176	@ 0xb0
 8006802:	2100      	movs	r1, #0
 8006804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000093 	.word	0x20000093
 8006820:	20000094 	.word	0x20000094
 8006824:	20000095 	.word	0x20000095

08006828 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	32b0      	adds	r2, #176	@ 0xb0
 800683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006840:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e0bf      	b.n	80069d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006860:	2b00      	cmp	r3, #0
 8006862:	d050      	beq.n	8006906 <USBD_CDC_Setup+0xde>
 8006864:	2b20      	cmp	r3, #32
 8006866:	f040 80af 	bne.w	80069c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	88db      	ldrh	r3, [r3, #6]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d03a      	beq.n	80068e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	b25b      	sxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	da1b      	bge.n	80068b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	33b0      	adds	r3, #176	@ 0xb0
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006892:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	88d2      	ldrh	r2, [r2, #6]
 8006898:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	88db      	ldrh	r3, [r3, #6]
 800689e:	2b07      	cmp	r3, #7
 80068a0:	bf28      	it	cs
 80068a2:	2307      	movcs	r3, #7
 80068a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	89fa      	ldrh	r2, [r7, #14]
 80068aa:	4619      	mov	r1, r3
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f001 fda9 	bl	8008404 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068b2:	e090      	b.n	80069d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	785a      	ldrb	r2, [r3, #1]
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	88db      	ldrh	r3, [r3, #6]
 80068c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80068c4:	d803      	bhi.n	80068ce <USBD_CDC_Setup+0xa6>
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	88db      	ldrh	r3, [r3, #6]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	e000      	b.n	80068d0 <USBD_CDC_Setup+0xa8>
 80068ce:	2240      	movs	r2, #64	@ 0x40
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068d6:	6939      	ldr	r1, [r7, #16]
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80068de:	461a      	mov	r2, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fdbe 	bl	8008462 <USBD_CtlPrepareRx>
      break;
 80068e6:	e076      	b.n	80069d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	33b0      	adds	r3, #176	@ 0xb0
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	7850      	ldrb	r0, [r2, #1]
 80068fe:	2200      	movs	r2, #0
 8006900:	6839      	ldr	r1, [r7, #0]
 8006902:	4798      	blx	r3
      break;
 8006904:	e067      	b.n	80069d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b0b      	cmp	r3, #11
 800690c:	d851      	bhi.n	80069b2 <USBD_CDC_Setup+0x18a>
 800690e:	a201      	add	r2, pc, #4	@ (adr r2, 8006914 <USBD_CDC_Setup+0xec>)
 8006910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006914:	08006945 	.word	0x08006945
 8006918:	080069c1 	.word	0x080069c1
 800691c:	080069b3 	.word	0x080069b3
 8006920:	080069b3 	.word	0x080069b3
 8006924:	080069b3 	.word	0x080069b3
 8006928:	080069b3 	.word	0x080069b3
 800692c:	080069b3 	.word	0x080069b3
 8006930:	080069b3 	.word	0x080069b3
 8006934:	080069b3 	.word	0x080069b3
 8006938:	080069b3 	.word	0x080069b3
 800693c:	0800696f 	.word	0x0800696f
 8006940:	08006999 	.word	0x08006999
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b03      	cmp	r3, #3
 800694e:	d107      	bne.n	8006960 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006950:	f107 030a 	add.w	r3, r7, #10
 8006954:	2202      	movs	r2, #2
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f001 fd53 	bl	8008404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800695e:	e032      	b.n	80069c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fcd1 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 8006968:	2303      	movs	r3, #3
 800696a:	75fb      	strb	r3, [r7, #23]
          break;
 800696c:	e02b      	b.n	80069c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b03      	cmp	r3, #3
 8006978:	d107      	bne.n	800698a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800697a:	f107 030d 	add.w	r3, r7, #13
 800697e:	2201      	movs	r2, #1
 8006980:	4619      	mov	r1, r3
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f001 fd3e 	bl	8008404 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006988:	e01d      	b.n	80069c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800698a:	6839      	ldr	r1, [r7, #0]
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f001 fcbc 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	75fb      	strb	r3, [r7, #23]
          break;
 8006996:	e016      	b.n	80069c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b03      	cmp	r3, #3
 80069a2:	d00f      	beq.n	80069c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069a4:	6839      	ldr	r1, [r7, #0]
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 fcaf 	bl	800830a <USBD_CtlError>
            ret = USBD_FAIL;
 80069ac:	2303      	movs	r3, #3
 80069ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069b0:	e008      	b.n	80069c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f001 fca8 	bl	800830a <USBD_CtlError>
          ret = USBD_FAIL;
 80069ba:	2303      	movs	r3, #3
 80069bc:	75fb      	strb	r3, [r7, #23]
          break;
 80069be:	e002      	b.n	80069c6 <USBD_CDC_Setup+0x19e>
          break;
 80069c0:	bf00      	nop
 80069c2:	e008      	b.n	80069d6 <USBD_CDC_Setup+0x1ae>
          break;
 80069c4:	bf00      	nop
      }
      break;
 80069c6:	e006      	b.n	80069d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f001 fc9d 	bl	800830a <USBD_CtlError>
      ret = USBD_FAIL;
 80069d0:	2303      	movs	r3, #3
 80069d2:	75fb      	strb	r3, [r7, #23]
      break;
 80069d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	460b      	mov	r3, r1
 80069ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80069f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	32b0      	adds	r2, #176	@ 0xb0
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e065      	b.n	8006ad6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	32b0      	adds	r2, #176	@ 0xb0
 8006a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a18:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	f003 020f 	and.w	r2, r3, #15
 8006a20:	6879      	ldr	r1, [r7, #4]
 8006a22:	4613      	mov	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	440b      	add	r3, r1
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d02f      	beq.n	8006a94 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a34:	78fb      	ldrb	r3, [r7, #3]
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	3314      	adds	r3, #20
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	f003 010f 	and.w	r1, r3, #15
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	460b      	mov	r3, r1
 8006a54:	00db      	lsls	r3, r3, #3
 8006a56:	440b      	add	r3, r1
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	4403      	add	r3, r0
 8006a5c:	331c      	adds	r3, #28
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d112      	bne.n	8006a94 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a6e:	78fb      	ldrb	r3, [r7, #3]
 8006a70:	f003 020f 	and.w	r2, r3, #15
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	4613      	mov	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	440b      	add	r3, r1
 8006a80:	3314      	adds	r3, #20
 8006a82:	2200      	movs	r2, #0
 8006a84:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a86:	78f9      	ldrb	r1, [r7, #3]
 8006a88:	2300      	movs	r3, #0
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f002 fa82 	bl	8008f96 <USBD_LL_Transmit>
 8006a92:	e01f      	b.n	8006ad4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	33b0      	adds	r3, #176	@ 0xb0
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	33b0      	adds	r3, #176	@ 0xb0
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006ad0:	78fa      	ldrb	r2, [r7, #3]
 8006ad2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b084      	sub	sp, #16
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	32b0      	adds	r2, #176	@ 0xb0
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	32b0      	adds	r2, #176	@ 0xb0
 8006b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e01a      	b.n	8006b46 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f002 fa80 	bl	800901a <USBD_LL_GetRxDataSize>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	33b0      	adds	r3, #176	@ 0xb0
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006b40:	4611      	mov	r1, r2
 8006b42:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	32b0      	adds	r2, #176	@ 0xb0
 8006b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e024      	b.n	8006bba <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	33b0      	adds	r3, #176	@ 0xb0
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	4413      	add	r3, r2
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d019      	beq.n	8006bb8 <USBD_CDC_EP0_RxReady+0x6a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006b8a:	2bff      	cmp	r3, #255	@ 0xff
 8006b8c:	d014      	beq.n	8006bb8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	33b0      	adds	r3, #176	@ 0xb0
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006ba6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	22ff      	movs	r2, #255	@ 0xff
 8006bb4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bcc:	2182      	movs	r1, #130	@ 0x82
 8006bce:	4818      	ldr	r0, [pc, #96]	@ (8006c30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bd0:	f000 fd62 	bl	8007698 <USBD_GetEpDesc>
 8006bd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bd6:	2101      	movs	r1, #1
 8006bd8:	4815      	ldr	r0, [pc, #84]	@ (8006c30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bda:	f000 fd5d 	bl	8007698 <USBD_GetEpDesc>
 8006bde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006be0:	2181      	movs	r1, #129	@ 0x81
 8006be2:	4813      	ldr	r0, [pc, #76]	@ (8006c30 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006be4:	f000 fd58 	bl	8007698 <USBD_GetEpDesc>
 8006be8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d002      	beq.n	8006bf6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d006      	beq.n	8006c0a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c04:	711a      	strb	r2, [r3, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c18:	711a      	strb	r2, [r3, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2243      	movs	r2, #67	@ 0x43
 8006c22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c24:	4b02      	ldr	r3, [pc, #8]	@ (8006c30 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3718      	adds	r7, #24
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000050 	.word	0x20000050

08006c34 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b086      	sub	sp, #24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c3c:	2182      	movs	r1, #130	@ 0x82
 8006c3e:	4818      	ldr	r0, [pc, #96]	@ (8006ca0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c40:	f000 fd2a 	bl	8007698 <USBD_GetEpDesc>
 8006c44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c46:	2101      	movs	r1, #1
 8006c48:	4815      	ldr	r0, [pc, #84]	@ (8006ca0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c4a:	f000 fd25 	bl	8007698 <USBD_GetEpDesc>
 8006c4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c50:	2181      	movs	r1, #129	@ 0x81
 8006c52:	4813      	ldr	r0, [pc, #76]	@ (8006ca0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c54:	f000 fd20 	bl	8007698 <USBD_GetEpDesc>
 8006c58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2210      	movs	r2, #16
 8006c64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d006      	beq.n	8006c7a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	711a      	strb	r2, [r3, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f042 0202 	orr.w	r2, r2, #2
 8006c78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d006      	beq.n	8006c8e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	2200      	movs	r2, #0
 8006c84:	711a      	strb	r2, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f042 0202 	orr.w	r2, r2, #2
 8006c8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2243      	movs	r2, #67	@ 0x43
 8006c92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c94:	4b02      	ldr	r3, [pc, #8]	@ (8006ca0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3718      	adds	r7, #24
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	20000050 	.word	0x20000050

08006ca4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cac:	2182      	movs	r1, #130	@ 0x82
 8006cae:	4818      	ldr	r0, [pc, #96]	@ (8006d10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cb0:	f000 fcf2 	bl	8007698 <USBD_GetEpDesc>
 8006cb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4815      	ldr	r0, [pc, #84]	@ (8006d10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cba:	f000 fced 	bl	8007698 <USBD_GetEpDesc>
 8006cbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cc0:	2181      	movs	r1, #129	@ 0x81
 8006cc2:	4813      	ldr	r0, [pc, #76]	@ (8006d10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cc4:	f000 fce8 	bl	8007698 <USBD_GetEpDesc>
 8006cc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d002      	beq.n	8006cd6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ce4:	711a      	strb	r2, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d006      	beq.n	8006cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006cf8:	711a      	strb	r2, [r3, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2243      	movs	r2, #67	@ 0x43
 8006d02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d04:	4b02      	ldr	r3, [pc, #8]	@ (8006d10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000050 	.word	0x20000050

08006d14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	220a      	movs	r2, #10
 8006d20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d22:	4b03      	ldr	r3, [pc, #12]	@ (8006d30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	2000000c 	.word	0x2000000c

08006d34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e009      	b.n	8006d5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	33b0      	adds	r3, #176	@ 0xb0
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	370c      	adds	r7, #12
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	32b0      	adds	r2, #176	@ 0xb0
 8006d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d82:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e008      	b.n	8006da0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	371c      	adds	r7, #28
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	32b0      	adds	r2, #176	@ 0xb0
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e004      	b.n	8006dda <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3714      	adds	r7, #20
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
	...

08006de8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32b0      	adds	r2, #176	@ 0xb0
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e00:	2301      	movs	r3, #1
 8006e02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e025      	b.n	8006e5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d11f      	bne.n	8006e58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e20:	4b10      	ldr	r3, [pc, #64]	@ (8006e64 <USBD_CDC_TransmitPacket+0x7c>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	f003 020f 	and.w	r2, r3, #15
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4403      	add	r3, r0
 8006e3a:	3314      	adds	r3, #20
 8006e3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e3e:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <USBD_CDC_TransmitPacket+0x7c>)
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f002 f8a1 	bl	8008f96 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20000093 	.word	0x20000093

08006e68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	32b0      	adds	r2, #176	@ 0xb0
 8006e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	@ 0xb0
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e018      	b.n	8006ec8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7c1b      	ldrb	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed0 <USBD_CDC_ReceivePacket+0x68>)
 8006ea0:	7819      	ldrb	r1, [r3, #0]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f002 f893 	bl	8008fd8 <USBD_LL_PrepareReceive>
 8006eb2:	e008      	b.n	8006ec6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eb4:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <USBD_CDC_ReceivePacket+0x68>)
 8006eb6:	7819      	ldrb	r1, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006ebe:	2340      	movs	r3, #64	@ 0x40
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f002 f889 	bl	8008fd8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000094 	.word	0x20000094

08006ed4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b086      	sub	sp, #24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d101      	bne.n	8006eec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e01f      	b.n	8006f2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	79fa      	ldrb	r2, [r7, #7]
 8006f1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f001 ff03 	bl	8008d2c <USBD_LL_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e025      	b.n	8006f98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32ae      	adds	r2, #174	@ 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00f      	beq.n	8006f88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	32ae      	adds	r2, #174	@ 0xae
 8006f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f78:	f107 020e 	add.w	r2, r7, #14
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4798      	blx	r3
 8006f80:	4602      	mov	r2, r0
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f001 ff0b 	bl	8008dc4 <USBD_LL_Start>
 8006fae:	4603      	mov	r3, r0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b084      	sub	sp, #16
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d009      	beq.n	8006ffc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	78fa      	ldrb	r2, [r7, #3]
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	4798      	blx	r3
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	4611      	mov	r1, r2
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007030:	7bfb      	ldrb	r3, [r7, #15]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b084      	sub	sp, #16
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f922 	bl	8008296 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007060:	461a      	mov	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800706e:	f003 031f 	and.w	r3, r3, #31
 8007072:	2b02      	cmp	r3, #2
 8007074:	d01a      	beq.n	80070ac <USBD_LL_SetupStage+0x72>
 8007076:	2b02      	cmp	r3, #2
 8007078:	d822      	bhi.n	80070c0 <USBD_LL_SetupStage+0x86>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <USBD_LL_SetupStage+0x4a>
 800707e:	2b01      	cmp	r3, #1
 8007080:	d00a      	beq.n	8007098 <USBD_LL_SetupStage+0x5e>
 8007082:	e01d      	b.n	80070c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fb77 	bl	8007780 <USBD_StdDevReq>
 8007092:	4603      	mov	r3, r0
 8007094:	73fb      	strb	r3, [r7, #15]
      break;
 8007096:	e020      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800709e:	4619      	mov	r1, r3
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fbdf 	bl	8007864 <USBD_StdItfReq>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
      break;
 80070aa:	e016      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fc41 	bl	800793c <USBD_StdEPReq>
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
      break;
 80070be:	e00c      	b.n	80070da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f001 fed8 	bl	8008e84 <USBD_LL_StallEP>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	bf00      	nop
  }

  return ret;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b086      	sub	sp, #24
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	460b      	mov	r3, r1
 80070ee:	607a      	str	r2, [r7, #4]
 80070f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80070f6:	7afb      	ldrb	r3, [r7, #11]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d177      	bne.n	80071ec <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007102:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800710a:	2b03      	cmp	r3, #3
 800710c:	f040 80a1 	bne.w	8007252 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	8992      	ldrh	r2, [r2, #12]
 8007118:	4293      	cmp	r3, r2
 800711a:	d91c      	bls.n	8007156 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	8992      	ldrh	r2, [r2, #12]
 8007124:	1a9a      	subs	r2, r3, r2
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	8992      	ldrh	r2, [r2, #12]
 8007132:	441a      	add	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	6919      	ldr	r1, [r3, #16]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	899b      	ldrh	r3, [r3, #12]
 8007140:	461a      	mov	r2, r3
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	4293      	cmp	r3, r2
 8007148:	bf38      	it	cc
 800714a:	4613      	movcc	r3, r2
 800714c:	461a      	mov	r2, r3
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f001 f9a8 	bl	80084a4 <USBD_CtlContinueRx>
 8007154:	e07d      	b.n	8007252 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2b02      	cmp	r3, #2
 8007162:	d014      	beq.n	800718e <USBD_LL_DataOutStage+0xaa>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d81d      	bhi.n	80071a4 <USBD_LL_DataOutStage+0xc0>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <USBD_LL_DataOutStage+0x8e>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d003      	beq.n	8007178 <USBD_LL_DataOutStage+0x94>
 8007170:	e018      	b.n	80071a4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	75bb      	strb	r3, [r7, #22]
            break;
 8007176:	e018      	b.n	80071aa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800717e:	b2db      	uxtb	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fa6e 	bl	8007664 <USBD_CoreFindIF>
 8007188:	4603      	mov	r3, r0
 800718a:	75bb      	strb	r3, [r7, #22]
            break;
 800718c:	e00d      	b.n	80071aa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007194:	b2db      	uxtb	r3, r3
 8007196:	4619      	mov	r1, r3
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fa70 	bl	800767e <USBD_CoreFindEP>
 800719e:	4603      	mov	r3, r0
 80071a0:	75bb      	strb	r3, [r7, #22]
            break;
 80071a2:	e002      	b.n	80071aa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75bb      	strb	r3, [r7, #22]
            break;
 80071a8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071aa:	7dbb      	ldrb	r3, [r7, #22]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d119      	bne.n	80071e4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b03      	cmp	r3, #3
 80071ba:	d113      	bne.n	80071e4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071bc:	7dba      	ldrb	r2, [r7, #22]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	32ae      	adds	r2, #174	@ 0xae
 80071c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80071cc:	7dba      	ldrb	r2, [r7, #22]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80071d4:	7dba      	ldrb	r2, [r7, #22]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	32ae      	adds	r2, #174	@ 0xae
 80071da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f001 f96e 	bl	80084c6 <USBD_CtlSendStatus>
 80071ea:	e032      	b.n	8007252 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80071ec:	7afb      	ldrb	r3, [r7, #11]
 80071ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fa41 	bl	800767e <USBD_CoreFindEP>
 80071fc:	4603      	mov	r3, r0
 80071fe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007200:	7dbb      	ldrb	r3, [r7, #22]
 8007202:	2bff      	cmp	r3, #255	@ 0xff
 8007204:	d025      	beq.n	8007252 <USBD_LL_DataOutStage+0x16e>
 8007206:	7dbb      	ldrb	r3, [r7, #22]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d122      	bne.n	8007252 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b03      	cmp	r3, #3
 8007216:	d117      	bne.n	8007248 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007218:	7dba      	ldrb	r2, [r7, #22]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	32ae      	adds	r2, #174	@ 0xae
 800721e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00f      	beq.n	8007248 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007228:	7dba      	ldrb	r2, [r7, #22]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007230:	7dba      	ldrb	r2, [r7, #22]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	32ae      	adds	r2, #174	@ 0xae
 8007236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	7afa      	ldrb	r2, [r7, #11]
 800723e:	4611      	mov	r1, r2
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	4798      	blx	r3
 8007244:	4603      	mov	r3, r0
 8007246:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d001      	beq.n	8007252 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
 8007250:	e000      	b.n	8007254 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	460b      	mov	r3, r1
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800726a:	7afb      	ldrb	r3, [r7, #11]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d178      	bne.n	8007362 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3314      	adds	r3, #20
 8007274:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800727c:	2b02      	cmp	r3, #2
 800727e:	d163      	bne.n	8007348 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	8992      	ldrh	r2, [r2, #12]
 8007288:	4293      	cmp	r3, r2
 800728a:	d91c      	bls.n	80072c6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	8992      	ldrh	r2, [r2, #12]
 8007294:	1a9a      	subs	r2, r3, r2
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	8992      	ldrh	r2, [r2, #12]
 80072a2:	441a      	add	r2, r3
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6919      	ldr	r1, [r3, #16]
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	461a      	mov	r2, r3
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f001 f8c4 	bl	8008440 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072b8:	2300      	movs	r3, #0
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f001 fe8a 	bl	8008fd8 <USBD_LL_PrepareReceive>
 80072c4:	e040      	b.n	8007348 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	899b      	ldrh	r3, [r3, #12]
 80072ca:	461a      	mov	r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d11c      	bne.n	800730e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80072dc:	4293      	cmp	r3, r2
 80072de:	d316      	bcc.n	800730e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20f      	bcs.n	800730e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80072ee:	2200      	movs	r2, #0
 80072f0:	2100      	movs	r1, #0
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f001 f8a4 	bl	8008440 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007300:	2300      	movs	r3, #0
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f001 fe66 	bl	8008fd8 <USBD_LL_PrepareReceive>
 800730c:	e01c      	b.n	8007348 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b03      	cmp	r3, #3
 8007318:	d10f      	bne.n	800733a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d009      	beq.n	800733a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800733a:	2180      	movs	r1, #128	@ 0x80
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f001 fda1 	bl	8008e84 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f001 f8d2 	bl	80084ec <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d03a      	beq.n	80073c8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f7ff fe30 	bl	8006fb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007360:	e032      	b.n	80073c8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007368:	b2db      	uxtb	r3, r3
 800736a:	4619      	mov	r1, r3
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f986 	bl	800767e <USBD_CoreFindEP>
 8007372:	4603      	mov	r3, r0
 8007374:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	2bff      	cmp	r3, #255	@ 0xff
 800737a:	d025      	beq.n	80073c8 <USBD_LL_DataInStage+0x16c>
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d122      	bne.n	80073c8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b03      	cmp	r3, #3
 800738c:	d11c      	bne.n	80073c8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800738e:	7dfa      	ldrb	r2, [r7, #23]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	32ae      	adds	r2, #174	@ 0xae
 8007394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d014      	beq.n	80073c8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800739e:	7dfa      	ldrb	r2, [r7, #23]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073a6:	7dfa      	ldrb	r2, [r7, #23]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	32ae      	adds	r2, #174	@ 0xae
 80073ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073b0:	695b      	ldr	r3, [r3, #20]
 80073b2:	7afa      	ldrb	r2, [r7, #11]
 80073b4:	4611      	mov	r1, r2
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	4798      	blx	r3
 80073ba:	4603      	mov	r3, r0
 80073bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073be:	7dbb      	ldrb	r3, [r7, #22]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80073c4:	7dbb      	ldrb	r3, [r7, #22]
 80073c6:	e000      	b.n	80073ca <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073da:	2300      	movs	r3, #0
 80073dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d014      	beq.n	8007438 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6852      	ldr	r2, [r2, #4]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	4611      	mov	r1, r2
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007438:	2340      	movs	r3, #64	@ 0x40
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f001 fcdb 	bl	8008dfa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2240      	movs	r2, #64	@ 0x40
 8007450:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007454:	2340      	movs	r3, #64	@ 0x40
 8007456:	2200      	movs	r2, #0
 8007458:	2180      	movs	r1, #128	@ 0x80
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f001 fccd 	bl	8008dfa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2240      	movs	r2, #64	@ 0x40
 800746c:	841a      	strh	r2, [r3, #32]

  return ret;
 800746e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3710      	adds	r7, #16
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}

08007478 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d006      	beq.n	80074ba <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d106      	bne.n	80074f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b03      	cmp	r3, #3
 8007512:	d110      	bne.n	8007536 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00b      	beq.n	8007536 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	460b      	mov	r3, r1
 800754a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	32ae      	adds	r2, #174	@ 0xae
 8007556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d101      	bne.n	8007562 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800755e:	2303      	movs	r3, #3
 8007560:	e01c      	b.n	800759c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d115      	bne.n	800759a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	32ae      	adds	r2, #174	@ 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00b      	beq.n	800759a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32ae      	adds	r2, #174	@ 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	4611      	mov	r1, r2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32ae      	adds	r2, #174	@ 0xae
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e01c      	b.n	8007600 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d115      	bne.n	80075fe <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	@ 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00b      	beq.n	80075fe <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	32ae      	adds	r2, #174	@ 0xae
 80075f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	4611      	mov	r1, r2
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b084      	sub	sp, #16
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00e      	beq.n	800765a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6852      	ldr	r2, [r2, #4]
 8007648:	b2d2      	uxtb	r2, r2
 800764a:	4611      	mov	r1, r2
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007656:	2303      	movs	r3, #3
 8007658:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800765a:	7bfb      	ldrb	r3, [r7, #15]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007670:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007672:	4618      	mov	r0, r3
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
 8007686:	460b      	mov	r3, r1
 8007688:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800768a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	460b      	mov	r3, r1
 80076a2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ac:	2300      	movs	r3, #0
 80076ae:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	7812      	ldrb	r2, [r2, #0]
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d91f      	bls.n	80076fe <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076c4:	e013      	b.n	80076ee <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076c6:	f107 030a 	add.w	r3, r7, #10
 80076ca:	4619      	mov	r1, r3
 80076cc:	6978      	ldr	r0, [r7, #20]
 80076ce:	f000 f81b 	bl	8007708 <USBD_GetNextDesc>
 80076d2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b05      	cmp	r3, #5
 80076da:	d108      	bne.n	80076ee <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	789b      	ldrb	r3, [r3, #2]
 80076e4:	78fa      	ldrb	r2, [r7, #3]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d008      	beq.n	80076fc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	885b      	ldrh	r3, [r3, #2]
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	897b      	ldrh	r3, [r7, #10]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d8e5      	bhi.n	80076c6 <USBD_GetEpDesc+0x2e>
 80076fa:	e000      	b.n	80076fe <USBD_GetEpDesc+0x66>
          break;
 80076fc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80076fe:	693b      	ldr	r3, [r7, #16]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	4413      	add	r3, r2
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4413      	add	r3, r2
 8007730:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007732:	68fb      	ldr	r3, [r7, #12]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	3301      	adds	r3, #1
 8007756:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800775e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	b21a      	sxth	r2, r3
 8007766:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800776a:	4313      	orrs	r3, r2
 800776c:	b21b      	sxth	r3, r3
 800776e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007770:	89fb      	ldrh	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	371c      	adds	r7, #28
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
	...

08007780 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007796:	2b40      	cmp	r3, #64	@ 0x40
 8007798:	d005      	beq.n	80077a6 <USBD_StdDevReq+0x26>
 800779a:	2b40      	cmp	r3, #64	@ 0x40
 800779c:	d857      	bhi.n	800784e <USBD_StdDevReq+0xce>
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00f      	beq.n	80077c2 <USBD_StdDevReq+0x42>
 80077a2:	2b20      	cmp	r3, #32
 80077a4:	d153      	bne.n	800784e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	32ae      	adds	r2, #174	@ 0xae
 80077b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
 80077bc:	4603      	mov	r3, r0
 80077be:	73fb      	strb	r3, [r7, #15]
      break;
 80077c0:	e04a      	b.n	8007858 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	785b      	ldrb	r3, [r3, #1]
 80077c6:	2b09      	cmp	r3, #9
 80077c8:	d83b      	bhi.n	8007842 <USBD_StdDevReq+0xc2>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <USBD_StdDevReq+0x50>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007825 	.word	0x08007825
 80077d4:	08007839 	.word	0x08007839
 80077d8:	08007843 	.word	0x08007843
 80077dc:	0800782f 	.word	0x0800782f
 80077e0:	08007843 	.word	0x08007843
 80077e4:	08007803 	.word	0x08007803
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007843 	.word	0x08007843
 80077f0:	0800781b 	.word	0x0800781b
 80077f4:	0800780d 	.word	0x0800780d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa3e 	bl	8007c7c <USBD_GetDescriptor>
          break;
 8007800:	e024      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fba3 	bl	8007f50 <USBD_SetAddress>
          break;
 800780a:	e01f      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fbe2 	bl	8007fd8 <USBD_SetConfig>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
          break;
 8007818:	e018      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fc85 	bl	800812c <USBD_GetConfig>
          break;
 8007822:	e013      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fcb6 	bl	8008198 <USBD_GetStatus>
          break;
 800782c:	e00e      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fce5 	bl	8008200 <USBD_SetFeature>
          break;
 8007836:	e009      	b.n	800784c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fd09 	bl	8008252 <USBD_ClrFeature>
          break;
 8007840:	e004      	b.n	800784c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007842:	6839      	ldr	r1, [r7, #0]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fd60 	bl	800830a <USBD_CtlError>
          break;
 800784a:	bf00      	nop
      }
      break;
 800784c:	e004      	b.n	8007858 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fd5a 	bl	800830a <USBD_CtlError>
      break;
 8007856:	bf00      	nop
  }

  return ret;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop

08007864 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786e:	2300      	movs	r3, #0
 8007870:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800787a:	2b40      	cmp	r3, #64	@ 0x40
 800787c:	d005      	beq.n	800788a <USBD_StdItfReq+0x26>
 800787e:	2b40      	cmp	r3, #64	@ 0x40
 8007880:	d852      	bhi.n	8007928 <USBD_StdItfReq+0xc4>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <USBD_StdItfReq+0x26>
 8007886:	2b20      	cmp	r3, #32
 8007888:	d14e      	bne.n	8007928 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007890:	b2db      	uxtb	r3, r3
 8007892:	3b01      	subs	r3, #1
 8007894:	2b02      	cmp	r3, #2
 8007896:	d840      	bhi.n	800791a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	889b      	ldrh	r3, [r3, #4]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d836      	bhi.n	8007910 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	889b      	ldrh	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7ff feda 	bl	8007664 <USBD_CoreFindIF>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2bff      	cmp	r3, #255	@ 0xff
 80078b8:	d01d      	beq.n	80078f6 <USBD_StdItfReq+0x92>
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d11a      	bne.n	80078f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078c0:	7bba      	ldrb	r2, [r7, #14]
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	32ae      	adds	r2, #174	@ 0xae
 80078c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078d0:	7bba      	ldrb	r2, [r7, #14]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078d8:	7bba      	ldrb	r2, [r7, #14]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	@ 0xae
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	4798      	blx	r3
 80078ea:	4603      	mov	r3, r0
 80078ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078ee:	e004      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80078f4:	e001      	b.n	80078fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	88db      	ldrh	r3, [r3, #6]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d110      	bne.n	8007924 <USBD_StdItfReq+0xc0>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10d      	bne.n	8007924 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fddc 	bl	80084c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800790e:	e009      	b.n	8007924 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fcf9 	bl	800830a <USBD_CtlError>
          break;
 8007918:	e004      	b.n	8007924 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fcf4 	bl	800830a <USBD_CtlError>
          break;
 8007922:	e000      	b.n	8007926 <USBD_StdItfReq+0xc2>
          break;
 8007924:	bf00      	nop
      }
      break;
 8007926:	e004      	b.n	8007932 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fced 	bl	800830a <USBD_CtlError>
      break;
 8007930:	bf00      	nop
  }

  return ret;
 8007932:	7bfb      	ldrb	r3, [r7, #15]
}
 8007934:	4618      	mov	r0, r3
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	889b      	ldrh	r3, [r3, #4]
 800794e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007958:	2b40      	cmp	r3, #64	@ 0x40
 800795a:	d007      	beq.n	800796c <USBD_StdEPReq+0x30>
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	f200 8181 	bhi.w	8007c64 <USBD_StdEPReq+0x328>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02a      	beq.n	80079bc <USBD_StdEPReq+0x80>
 8007966:	2b20      	cmp	r3, #32
 8007968:	f040 817c 	bne.w	8007c64 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7ff fe84 	bl	800767e <USBD_CoreFindEP>
 8007976:	4603      	mov	r3, r0
 8007978:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800797a:	7b7b      	ldrb	r3, [r7, #13]
 800797c:	2bff      	cmp	r3, #255	@ 0xff
 800797e:	f000 8176 	beq.w	8007c6e <USBD_StdEPReq+0x332>
 8007982:	7b7b      	ldrb	r3, [r7, #13]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8172 	bne.w	8007c6e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800798a:	7b7a      	ldrb	r2, [r7, #13]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007992:	7b7a      	ldrb	r2, [r7, #13]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32ae      	adds	r2, #174	@ 0xae
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 8165 	beq.w	8007c6e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079a4:	7b7a      	ldrb	r2, [r7, #13]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32ae      	adds	r2, #174	@ 0xae
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
 80079b6:	4603      	mov	r3, r0
 80079b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ba:	e158      	b.n	8007c6e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d008      	beq.n	80079d6 <USBD_StdEPReq+0x9a>
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	f300 8147 	bgt.w	8007c58 <USBD_StdEPReq+0x31c>
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 809b 	beq.w	8007b06 <USBD_StdEPReq+0x1ca>
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d03c      	beq.n	8007a4e <USBD_StdEPReq+0x112>
 80079d4:	e140      	b.n	8007c58 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USBD_StdEPReq+0xac>
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d016      	beq.n	8007a14 <USBD_StdEPReq+0xd8>
 80079e6:	e02c      	b.n	8007a42 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <USBD_StdEPReq+0xce>
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b80      	cmp	r3, #128	@ 0x80
 80079f2:	d00a      	beq.n	8007a0a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 fa43 	bl	8008e84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 fa3f 	bl	8008e84 <USBD_LL_StallEP>
 8007a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a08:	e020      	b.n	8007a4c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fc7c 	bl	800830a <USBD_CtlError>
              break;
 8007a12:	e01b      	b.n	8007a4c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10e      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b80      	cmp	r3, #128	@ 0x80
 8007a26:	d008      	beq.n	8007a3a <USBD_StdEPReq+0xfe>
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	88db      	ldrh	r3, [r3, #6]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fa25 	bl	8008e84 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fd43 	bl	80084c6 <USBD_CtlSendStatus>

              break;
 8007a40:	e004      	b.n	8007a4c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a42:	6839      	ldr	r1, [r7, #0]
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 fc60 	bl	800830a <USBD_CtlError>
              break;
 8007a4a:	bf00      	nop
          }
          break;
 8007a4c:	e109      	b.n	8007c62 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0x124>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d016      	beq.n	8007a8c <USBD_StdEPReq+0x150>
 8007a5e:	e04b      	b.n	8007af8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <USBD_StdEPReq+0x146>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d00a      	beq.n	8007a82 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fa07 	bl	8008e84 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a76:	2180      	movs	r1, #128	@ 0x80
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fa03 	bl	8008e84 <USBD_LL_StallEP>
 8007a7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a80:	e040      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a82:	6839      	ldr	r1, [r7, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc40 	bl	800830a <USBD_CtlError>
              break;
 8007a8a:	e03b      	b.n	8007b04 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	885b      	ldrh	r3, [r3, #2]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d136      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a9e:	7bbb      	ldrb	r3, [r7, #14]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f001 fa0d 	bl	8008ec2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fd0c 	bl	80084c6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f7ff fde3 	bl	800767e <USBD_CoreFindEP>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007abc:	7b7b      	ldrb	r3, [r7, #13]
 8007abe:	2bff      	cmp	r3, #255	@ 0xff
 8007ac0:	d01f      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
 8007ac2:	7b7b      	ldrb	r3, [r7, #13]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d11c      	bne.n	8007b02 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ac8:	7b7a      	ldrb	r2, [r7, #13]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ad0:	7b7a      	ldrb	r2, [r7, #13]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	32ae      	adds	r2, #174	@ 0xae
 8007ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d010      	beq.n	8007b02 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	@ 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	4798      	blx	r3
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fc05 	bl	800830a <USBD_CtlError>
              break;
 8007b00:	e000      	b.n	8007b04 <USBD_StdEPReq+0x1c8>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e0ad      	b.n	8007c62 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d002      	beq.n	8007b18 <USBD_StdEPReq+0x1dc>
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d033      	beq.n	8007b7e <USBD_StdEPReq+0x242>
 8007b16:	e099      	b.n	8007c4c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d007      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b80      	cmp	r3, #128	@ 0x80
 8007b22:	d004      	beq.n	8007b2e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 fbef 	bl	800830a <USBD_CtlError>
                break;
 8007b2c:	e093      	b.n	8007c56 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	da0b      	bge.n	8007b4e <USBD_StdEPReq+0x212>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3310      	adds	r3, #16
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	4413      	add	r3, r2
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	e00b      	b.n	8007b66 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4413      	add	r3, r2
 8007b64:	3304      	adds	r3, #4
 8007b66:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	330e      	adds	r3, #14
 8007b72:	2202      	movs	r2, #2
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fc44 	bl	8008404 <USBD_CtlSendData>
              break;
 8007b7c:	e06b      	b.n	8007c56 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	da11      	bge.n	8007baa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b86:	7bbb      	ldrb	r3, [r7, #14]
 8007b88:	f003 020f 	and.w	r2, r3, #15
 8007b8c:	6879      	ldr	r1, [r7, #4]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	440b      	add	r3, r1
 8007b98:	3323      	adds	r3, #35	@ 0x23
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d117      	bne.n	8007bd0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fbb1 	bl	800830a <USBD_CtlError>
                  break;
 8007ba8:	e055      	b.n	8007c56 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	f003 020f 	and.w	r2, r3, #15
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	440b      	add	r3, r1
 8007bbc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d104      	bne.n	8007bd0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fb9e 	bl	800830a <USBD_CtlError>
                  break;
 8007bce:	e042      	b.n	8007c56 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da0b      	bge.n	8007bf0 <USBD_StdEPReq+0x2b4>
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	3310      	adds	r3, #16
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	4413      	add	r3, r2
 8007bec:	3304      	adds	r3, #4
 8007bee:	e00b      	b.n	8007c08 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	3304      	adds	r3, #4
 8007c08:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c0a:	7bbb      	ldrb	r3, [r7, #14]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d002      	beq.n	8007c16 <USBD_StdEPReq+0x2da>
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b80      	cmp	r3, #128	@ 0x80
 8007c14:	d103      	bne.n	8007c1e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	739a      	strb	r2, [r3, #14]
 8007c1c:	e00e      	b.n	8007c3c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c1e:	7bbb      	ldrb	r3, [r7, #14]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f001 f96c 	bl	8008f00 <USBD_LL_IsStallEP>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2201      	movs	r2, #1
 8007c32:	739a      	strb	r2, [r3, #14]
 8007c34:	e002      	b.n	8007c3c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	330e      	adds	r3, #14
 8007c40:	2202      	movs	r2, #2
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 fbdd 	bl	8008404 <USBD_CtlSendData>
              break;
 8007c4a:	e004      	b.n	8007c56 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fb5b 	bl	800830a <USBD_CtlError>
              break;
 8007c54:	bf00      	nop
          }
          break;
 8007c56:	e004      	b.n	8007c62 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fb55 	bl	800830a <USBD_CtlError>
          break;
 8007c60:	bf00      	nop
      }
      break;
 8007c62:	e005      	b.n	8007c70 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 fb4f 	bl	800830a <USBD_CtlError>
      break;
 8007c6c:	e000      	b.n	8007c70 <USBD_StdEPReq+0x334>
      break;
 8007c6e:	bf00      	nop
  }

  return ret;
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	2b06      	cmp	r3, #6
 8007c9e:	f200 8128 	bhi.w	8007ef2 <USBD_GetDescriptor+0x276>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <USBD_GetDescriptor+0x2c>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cc5 	.word	0x08007cc5
 8007cac:	08007cdd 	.word	0x08007cdd
 8007cb0:	08007d1d 	.word	0x08007d1d
 8007cb4:	08007ef3 	.word	0x08007ef3
 8007cb8:	08007ef3 	.word	0x08007ef3
 8007cbc:	08007e93 	.word	0x08007e93
 8007cc0:	08007ebf 	.word	0x08007ebf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
      break;
 8007cda:	e112      	b.n	8007f02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	7c1b      	ldrb	r3, [r3, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10d      	bne.n	8007d00 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	4610      	mov	r0, r2
 8007cf2:	4798      	blx	r3
 8007cf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cfe:	e100      	b.n	8007f02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d08:	f107 0208 	add.w	r2, r7, #8
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4798      	blx	r3
 8007d10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3301      	adds	r3, #1
 8007d16:	2202      	movs	r2, #2
 8007d18:	701a      	strb	r2, [r3, #0]
      break;
 8007d1a:	e0f2      	b.n	8007f02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	885b      	ldrh	r3, [r3, #2]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b05      	cmp	r3, #5
 8007d24:	f200 80ac 	bhi.w	8007e80 <USBD_GetDescriptor+0x204>
 8007d28:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <USBD_GetDescriptor+0xb4>)
 8007d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d2e:	bf00      	nop
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d7d 	.word	0x08007d7d
 8007d38:	08007db1 	.word	0x08007db1
 8007d3c:	08007de5 	.word	0x08007de5
 8007d40:	08007e19 	.word	0x08007e19
 8007d44:	08007e4d 	.word	0x08007e4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	7c12      	ldrb	r2, [r2, #16]
 8007d60:	f107 0108 	add.w	r1, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d6a:	e091      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 facb 	bl	800830a <USBD_CtlError>
            err++;
 8007d74:	7afb      	ldrb	r3, [r7, #11]
 8007d76:	3301      	adds	r3, #1
 8007d78:	72fb      	strb	r3, [r7, #11]
          break;
 8007d7a:	e089      	b.n	8007e90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
 8007d94:	f107 0108 	add.w	r1, r7, #8
 8007d98:	4610      	mov	r0, r2
 8007d9a:	4798      	blx	r3
 8007d9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d9e:	e077      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007da0:	6839      	ldr	r1, [r7, #0]
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fab1 	bl	800830a <USBD_CtlError>
            err++;
 8007da8:	7afb      	ldrb	r3, [r7, #11]
 8007daa:	3301      	adds	r3, #1
 8007dac:	72fb      	strb	r3, [r7, #11]
          break;
 8007dae:	e06f      	b.n	8007e90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00b      	beq.n	8007dd4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	7c12      	ldrb	r2, [r2, #16]
 8007dc8:	f107 0108 	add.w	r1, r7, #8
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4798      	blx	r3
 8007dd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dd2:	e05d      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fa97 	bl	800830a <USBD_CtlError>
            err++;
 8007ddc:	7afb      	ldrb	r3, [r7, #11]
 8007dde:	3301      	adds	r3, #1
 8007de0:	72fb      	strb	r3, [r7, #11]
          break;
 8007de2:	e055      	b.n	8007e90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00b      	beq.n	8007e08 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	7c12      	ldrb	r2, [r2, #16]
 8007dfc:	f107 0108 	add.w	r1, r7, #8
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e06:	e043      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fa7d 	bl	800830a <USBD_CtlError>
            err++;
 8007e10:	7afb      	ldrb	r3, [r7, #11]
 8007e12:	3301      	adds	r3, #1
 8007e14:	72fb      	strb	r3, [r7, #11]
          break;
 8007e16:	e03b      	b.n	8007e90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e1e:	695b      	ldr	r3, [r3, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e2a:	695b      	ldr	r3, [r3, #20]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	7c12      	ldrb	r2, [r2, #16]
 8007e30:	f107 0108 	add.w	r1, r7, #8
 8007e34:	4610      	mov	r0, r2
 8007e36:	4798      	blx	r3
 8007e38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e3a:	e029      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e3c:	6839      	ldr	r1, [r7, #0]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa63 	bl	800830a <USBD_CtlError>
            err++;
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	3301      	adds	r3, #1
 8007e48:	72fb      	strb	r3, [r7, #11]
          break;
 8007e4a:	e021      	b.n	8007e90 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00b      	beq.n	8007e70 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	7c12      	ldrb	r2, [r2, #16]
 8007e64:	f107 0108 	add.w	r1, r7, #8
 8007e68:	4610      	mov	r0, r2
 8007e6a:	4798      	blx	r3
 8007e6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e6e:	e00f      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fa49 	bl	800830a <USBD_CtlError>
            err++;
 8007e78:	7afb      	ldrb	r3, [r7, #11]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e7e:	e007      	b.n	8007e90 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e80:	6839      	ldr	r1, [r7, #0]
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 fa41 	bl	800830a <USBD_CtlError>
          err++;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e8e:	bf00      	nop
      }
      break;
 8007e90:	e037      	b.n	8007f02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7c1b      	ldrb	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ea2:	f107 0208 	add.w	r2, r7, #8
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4798      	blx	r3
 8007eaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eac:	e029      	b.n	8007f02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa2a 	bl	800830a <USBD_CtlError>
        err++;
 8007eb6:	7afb      	ldrb	r3, [r7, #11]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	72fb      	strb	r3, [r7, #11]
      break;
 8007ebc:	e021      	b.n	8007f02 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	7c1b      	ldrb	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10d      	bne.n	8007ee2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f107 0208 	add.w	r2, r7, #8
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4798      	blx	r3
 8007ed6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	3301      	adds	r3, #1
 8007edc:	2207      	movs	r2, #7
 8007ede:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ee0:	e00f      	b.n	8007f02 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fa10 	bl	800830a <USBD_CtlError>
        err++;
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	3301      	adds	r3, #1
 8007eee:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef0:	e007      	b.n	8007f02 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007ef2:	6839      	ldr	r1, [r7, #0]
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 fa08 	bl	800830a <USBD_CtlError>
      err++;
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	3301      	adds	r3, #1
 8007efe:	72fb      	strb	r3, [r7, #11]
      break;
 8007f00:	bf00      	nop
  }

  if (err != 0U)
 8007f02:	7afb      	ldrb	r3, [r7, #11]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d11e      	bne.n	8007f46 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	88db      	ldrh	r3, [r3, #6]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d016      	beq.n	8007f3e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f10:	893b      	ldrh	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00e      	beq.n	8007f34 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88da      	ldrh	r2, [r3, #6]
 8007f1a:	893b      	ldrh	r3, [r7, #8]
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	bf28      	it	cs
 8007f20:	4613      	movcs	r3, r2
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f26:	893b      	ldrh	r3, [r7, #8]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 fa69 	bl	8008404 <USBD_CtlSendData>
 8007f32:	e009      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f9e7 	bl	800830a <USBD_CtlError>
 8007f3c:	e004      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 fac1 	bl	80084c6 <USBD_CtlSendStatus>
 8007f44:	e000      	b.n	8007f48 <USBD_GetDescriptor+0x2cc>
    return;
 8007f46:	bf00      	nop
  }
}
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d131      	bne.n	8007fc6 <USBD_SetAddress+0x76>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	88db      	ldrh	r3, [r3, #6]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d12d      	bne.n	8007fc6 <USBD_SetAddress+0x76>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f70:	d829      	bhi.n	8007fc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	885b      	ldrh	r3, [r3, #2]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d104      	bne.n	8007f94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9bc 	bl	800830a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f92:	e01d      	b.n	8007fd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 ffd9 	bl	8008f58 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fa8d 	bl	80084c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2202      	movs	r2, #2
 8007fb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fba:	e009      	b.n	8007fd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc4:	e004      	b.n	8007fd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f99e 	bl	800830a <USBD_CtlError>
  }
}
 8007fce:	bf00      	nop
 8007fd0:	bf00      	nop
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b084      	sub	sp, #16
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	4b4e      	ldr	r3, [pc, #312]	@ (8008128 <USBD_SetConfig+0x150>)
 8007fee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8008128 <USBD_SetConfig+0x150>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d905      	bls.n	8008004 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f985 	bl	800830a <USBD_CtlError>
    return USBD_FAIL;
 8008000:	2303      	movs	r3, #3
 8008002:	e08c      	b.n	800811e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b02      	cmp	r3, #2
 800800e:	d002      	beq.n	8008016 <USBD_SetConfig+0x3e>
 8008010:	2b03      	cmp	r3, #3
 8008012:	d029      	beq.n	8008068 <USBD_SetConfig+0x90>
 8008014:	e075      	b.n	8008102 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008016:	4b44      	ldr	r3, [pc, #272]	@ (8008128 <USBD_SetConfig+0x150>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d020      	beq.n	8008060 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800801e:	4b42      	ldr	r3, [pc, #264]	@ (8008128 <USBD_SetConfig+0x150>)
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008028:	4b3f      	ldr	r3, [pc, #252]	@ (8008128 <USBD_SetConfig+0x150>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fe ffcd 	bl	8006fce <USBD_SetClassConfig>
 8008034:	4603      	mov	r3, r0
 8008036:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008038:	7bfb      	ldrb	r3, [r7, #15]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f962 	bl	800830a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2202      	movs	r2, #2
 800804a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800804e:	e065      	b.n	800811c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fa38 	bl	80084c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2203      	movs	r2, #3
 800805a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800805e:	e05d      	b.n	800811c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa30 	bl	80084c6 <USBD_CtlSendStatus>
      break;
 8008066:	e059      	b.n	800811c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008068:	4b2f      	ldr	r3, [pc, #188]	@ (8008128 <USBD_SetConfig+0x150>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d112      	bne.n	8008096 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2202      	movs	r2, #2
 8008074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008078:	4b2b      	ldr	r3, [pc, #172]	@ (8008128 <USBD_SetConfig+0x150>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008082:	4b29      	ldr	r3, [pc, #164]	@ (8008128 <USBD_SetConfig+0x150>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7fe ffbc 	bl	8007006 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fa19 	bl	80084c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008094:	e042      	b.n	800811c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008096:	4b24      	ldr	r3, [pc, #144]	@ (8008128 <USBD_SetConfig+0x150>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d02a      	beq.n	80080fa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	b2db      	uxtb	r3, r3
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f7fe ffaa 	bl	8007006 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080b2:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <USBD_SetConfig+0x150>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <USBD_SetConfig+0x150>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fe ff83 	bl	8006fce <USBD_SetClassConfig>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d00f      	beq.n	80080f2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f918 	bl	800830a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f7fe ff8f 	bl	8007006 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80080f0:	e014      	b.n	800811c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f9e7 	bl	80084c6 <USBD_CtlSendStatus>
      break;
 80080f8:	e010      	b.n	800811c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9e3 	bl	80084c6 <USBD_CtlSendStatus>
      break;
 8008100:	e00c      	b.n	800811c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f900 	bl	800830a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800810a:	4b07      	ldr	r3, [pc, #28]	@ (8008128 <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f7fe ff78 	bl	8007006 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
      break;
 800811a:	bf00      	nop
  }

  return ret;
 800811c:	7bfb      	ldrb	r3, [r7, #15]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000220 	.word	0x20000220

0800812c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	88db      	ldrh	r3, [r3, #6]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d004      	beq.n	8008148 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f8e2 	bl	800830a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008146:	e023      	b.n	8008190 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800814e:	b2db      	uxtb	r3, r3
 8008150:	2b02      	cmp	r3, #2
 8008152:	dc02      	bgt.n	800815a <USBD_GetConfig+0x2e>
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc03      	bgt.n	8008160 <USBD_GetConfig+0x34>
 8008158:	e015      	b.n	8008186 <USBD_GetConfig+0x5a>
 800815a:	2b03      	cmp	r3, #3
 800815c:	d00b      	beq.n	8008176 <USBD_GetConfig+0x4a>
 800815e:	e012      	b.n	8008186 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3308      	adds	r3, #8
 800816a:	2201      	movs	r2, #1
 800816c:	4619      	mov	r1, r3
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f948 	bl	8008404 <USBD_CtlSendData>
        break;
 8008174:	e00c      	b.n	8008190 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	3304      	adds	r3, #4
 800817a:	2201      	movs	r2, #1
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f940 	bl	8008404 <USBD_CtlSendData>
        break;
 8008184:	e004      	b.n	8008190 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8be 	bl	800830a <USBD_CtlError>
        break;
 800818e:	bf00      	nop
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d81e      	bhi.n	80081ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	88db      	ldrh	r3, [r3, #6]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d004      	beq.n	80081c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f8a5 	bl	800830a <USBD_CtlError>
        break;
 80081c0:	e01a      	b.n	80081f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d005      	beq.n	80081de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f043 0202 	orr.w	r2, r3, #2
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	330c      	adds	r3, #12
 80081e2:	2202      	movs	r2, #2
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 f90c 	bl	8008404 <USBD_CtlSendData>
      break;
 80081ec:	e004      	b.n	80081f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 f88a 	bl	800830a <USBD_CtlError>
      break;
 80081f6:	bf00      	nop
  }
}
 80081f8:	bf00      	nop
 80081fa:	3708      	adds	r7, #8
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	885b      	ldrh	r3, [r3, #2]
 800820e:	2b01      	cmp	r3, #1
 8008210:	d107      	bne.n	8008222 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f953 	bl	80084c6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008220:	e013      	b.n	800824a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	885b      	ldrh	r3, [r3, #2]
 8008226:	2b02      	cmp	r3, #2
 8008228:	d10b      	bne.n	8008242 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	889b      	ldrh	r3, [r3, #4]
 800822e:	0a1b      	lsrs	r3, r3, #8
 8008230:	b29b      	uxth	r3, r3
 8008232:	b2da      	uxtb	r2, r3
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f943 	bl	80084c6 <USBD_CtlSendStatus>
}
 8008240:	e003      	b.n	800824a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f860 	bl	800830a <USBD_CtlError>
}
 800824a:	bf00      	nop
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008262:	b2db      	uxtb	r3, r3
 8008264:	3b01      	subs	r3, #1
 8008266:	2b02      	cmp	r3, #2
 8008268:	d80b      	bhi.n	8008282 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	885b      	ldrh	r3, [r3, #2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d10c      	bne.n	800828c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 f923 	bl	80084c6 <USBD_CtlSendStatus>
      }
      break;
 8008280:	e004      	b.n	800828c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f840 	bl	800830a <USBD_CtlError>
      break;
 800828a:	e000      	b.n	800828e <USBD_ClrFeature+0x3c>
      break;
 800828c:	bf00      	nop
  }
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781a      	ldrb	r2, [r3, #0]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	781a      	ldrb	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3301      	adds	r3, #1
 80082be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff fa3d 	bl	8007740 <SWAPBYTE>
 80082c6:	4603      	mov	r3, r0
 80082c8:	461a      	mov	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fa30 	bl	8007740 <SWAPBYTE>
 80082e0:	4603      	mov	r3, r0
 80082e2:	461a      	mov	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f7ff fa23 	bl	8007740 <SWAPBYTE>
 80082fa:	4603      	mov	r3, r0
 80082fc:	461a      	mov	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	80da      	strh	r2, [r3, #6]
}
 8008302:	bf00      	nop
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008314:	2180      	movs	r1, #128	@ 0x80
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fdb4 	bl	8008e84 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800831c:	2100      	movs	r1, #0
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fdb0 	bl	8008e84 <USBD_LL_StallEP>
}
 8008324:	bf00      	nop
 8008326:	3708      	adds	r7, #8
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d042      	beq.n	80083c8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008346:	6938      	ldr	r0, [r7, #16]
 8008348:	f000 f842 	bl	80083d0 <USBD_GetLen>
 800834c:	4603      	mov	r3, r0
 800834e:	3301      	adds	r3, #1
 8008350:	005b      	lsls	r3, r3, #1
 8008352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008356:	d808      	bhi.n	800836a <USBD_GetString+0x3e>
 8008358:	6938      	ldr	r0, [r7, #16]
 800835a:	f000 f839 	bl	80083d0 <USBD_GetLen>
 800835e:	4603      	mov	r3, r0
 8008360:	3301      	adds	r3, #1
 8008362:	b29b      	uxth	r3, r3
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	e001      	b.n	800836e <USBD_GetString+0x42>
 800836a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	4413      	add	r3, r2
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	7812      	ldrb	r2, [r2, #0]
 800837c:	701a      	strb	r2, [r3, #0]
  idx++;
 800837e:	7dfb      	ldrb	r3, [r7, #23]
 8008380:	3301      	adds	r3, #1
 8008382:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	4413      	add	r3, r2
 800838a:	2203      	movs	r2, #3
 800838c:	701a      	strb	r2, [r3, #0]
  idx++;
 800838e:	7dfb      	ldrb	r3, [r7, #23]
 8008390:	3301      	adds	r3, #1
 8008392:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008394:	e013      	b.n	80083be <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	7812      	ldrb	r2, [r2, #0]
 80083a0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3301      	adds	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
    idx++;
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	3301      	adds	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083ae:	7dfb      	ldrb	r3, [r7, #23]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	4413      	add	r3, r2
 80083b4:	2200      	movs	r2, #0
 80083b6:	701a      	strb	r2, [r3, #0]
    idx++;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	3301      	adds	r3, #1
 80083bc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e7      	bne.n	8008396 <USBD_GetString+0x6a>
 80083c6:	e000      	b.n	80083ca <USBD_GetString+0x9e>
    return;
 80083c8:	bf00      	nop
  }
}
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083e0:	e005      	b.n	80083ee <USBD_GetLen+0x1e>
  {
    len++;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	3301      	adds	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	3301      	adds	r3, #1
 80083ec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1f5      	bne.n	80083e2 <USBD_GetLen+0x12>
  }

  return len;
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	60b9      	str	r1, [r7, #8]
 800840e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2202      	movs	r2, #2
 8008414:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	2100      	movs	r1, #0
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f000 fdb0 	bl	8008f96 <USBD_LL_Transmit>

  return USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	2100      	movs	r1, #0
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 fd9f 	bl	8008f96 <USBD_LL_Transmit>

  return USBD_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2203      	movs	r2, #3
 8008472:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	687a      	ldr	r2, [r7, #4]
 800847a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	2100      	movs	r1, #0
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f000 fd9f 	bl	8008fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800849a:	2300      	movs	r3, #0
}
 800849c:	4618      	mov	r0, r3
 800849e:	3710      	adds	r7, #16
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	2100      	movs	r1, #0
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fd8e 	bl	8008fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b082      	sub	sp, #8
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	2100      	movs	r1, #0
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f000 fd5a 	bl	8008f96 <USBD_LL_Transmit>

  return USBD_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2205      	movs	r2, #5
 80084f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084fc:	2300      	movs	r3, #0
 80084fe:	2200      	movs	r2, #0
 8008500:	2100      	movs	r1, #0
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fd68 	bl	8008fd8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008518:	2200      	movs	r2, #0
 800851a:	4912      	ldr	r1, [pc, #72]	@ (8008564 <MX_USB_DEVICE_Init+0x50>)
 800851c:	4812      	ldr	r0, [pc, #72]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 800851e:	f7fe fcd9 	bl	8006ed4 <USBD_Init>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008528:	f7f8 fc26 	bl	8000d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800852c:	490f      	ldr	r1, [pc, #60]	@ (800856c <MX_USB_DEVICE_Init+0x58>)
 800852e:	480e      	ldr	r0, [pc, #56]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008530:	f7fe fd00 	bl	8006f34 <USBD_RegisterClass>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800853a:	f7f8 fc1d 	bl	8000d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800853e:	490c      	ldr	r1, [pc, #48]	@ (8008570 <MX_USB_DEVICE_Init+0x5c>)
 8008540:	4809      	ldr	r0, [pc, #36]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008542:	f7fe fbf7 	bl	8006d34 <USBD_CDC_RegisterInterface>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800854c:	f7f8 fc14 	bl	8000d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008550:	4805      	ldr	r0, [pc, #20]	@ (8008568 <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe fd25 	bl	8006fa0 <USBD_Start>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800855c:	f7f8 fc0c 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008560:	bf00      	nop
 8008562:	bd80      	pop	{r7, pc}
 8008564:	200000ac 	.word	0x200000ac
 8008568:	20000224 	.word	0x20000224
 800856c:	20000018 	.word	0x20000018
 8008570:	20000098 	.word	0x20000098

08008574 <CDC_Init_FS>:
  CDC_DeInit_FS,
  CDC_Control_FS,
  CDC_Receive_FS
};

static int8_t CDC_Init_FS(void) {
 8008574:	b580      	push	{r7, lr}
 8008576:	af00      	add	r7, sp, #0
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008578:	2200      	movs	r2, #0
 800857a:	4905      	ldr	r1, [pc, #20]	@ (8008590 <CDC_Init_FS+0x1c>)
 800857c:	4805      	ldr	r0, [pc, #20]	@ (8008594 <CDC_Init_FS+0x20>)
 800857e:	f7fe fbf3 	bl	8006d68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008582:	4905      	ldr	r1, [pc, #20]	@ (8008598 <CDC_Init_FS+0x24>)
 8008584:	4803      	ldr	r0, [pc, #12]	@ (8008594 <CDC_Init_FS+0x20>)
 8008586:	f7fe fc11 	bl	8006dac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800858a:	2300      	movs	r3, #0
}
 800858c:	4618      	mov	r0, r3
 800858e:	bd80      	pop	{r7, pc}
 8008590:	20000d00 	.word	0x20000d00
 8008594:	20000224 	.word	0x20000224
 8008598:	20000500 	.word	0x20000500

0800859c <CDC_DeInit_FS>:

static int8_t CDC_DeInit_FS(void) {
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return (USBD_OK);
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <CDC_Control_FS>:

static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length) {
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
 80085b8:	4613      	mov	r3, r2
 80085ba:	80bb      	strh	r3, [r7, #4]
  return (USBD_OK);
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <CDC_Transmit_FS>:

uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len) {
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	807b      	strh	r3, [r7, #2]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085d8:	4b0c      	ldr	r3, [pc, #48]	@ (800860c <CDC_Transmit_FS+0x40>)
 80085da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085de:	60fb      	str	r3, [r7, #12]
  if (hcdc->TxState != 0) return USBD_BUSY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <CDC_Transmit_FS+0x22>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e009      	b.n	8008602 <CDC_Transmit_FS+0x36>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085ee:	887b      	ldrh	r3, [r7, #2]
 80085f0:	461a      	mov	r2, r3
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	4805      	ldr	r0, [pc, #20]	@ (800860c <CDC_Transmit_FS+0x40>)
 80085f6:	f7fe fbb7 	bl	8006d68 <USBD_CDC_SetTxBuffer>
  return USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085fa:	4804      	ldr	r0, [pc, #16]	@ (800860c <CDC_Transmit_FS+0x40>)
 80085fc:	f7fe fbf4 	bl	8006de8 <USBD_CDC_TransmitPacket>
 8008600:	4603      	mov	r3, r0
}
 8008602:	4618      	mov	r0, r3
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	20000224 	.word	0x20000224

08008610 <CDC_Receive_FS>:

static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len) {
 8008610:	b580      	push	{r7, lr}
 8008612:	b09c      	sub	sp, #112	@ 0x70
 8008614:	af02      	add	r7, sp, #8
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	6039      	str	r1, [r7, #0]
  static char cmdBuffer[64];
  static uint8_t cmdIndex = 0;

  for (uint32_t i = 0; i < *Len; i++) {
 800861a:	2300      	movs	r3, #0
 800861c:	667b      	str	r3, [r7, #100]	@ 0x64
 800861e:	e0fd      	b.n	800881c <CDC_Receive_FS+0x20c>
    char ch = Buf[i];
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008624:	4413      	add	r3, r2
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    if (ch == '\r' || ch == '\n') {
 800862c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8008630:	2b0d      	cmp	r3, #13
 8008632:	d004      	beq.n	800863e <CDC_Receive_FS+0x2e>
 8008634:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8008638:	2b0a      	cmp	r3, #10
 800863a:	f040 80dd 	bne.w	80087f8 <CDC_Receive_FS+0x1e8>
      cmdBuffer[cmdIndex] = '\0';
 800863e:	4b80      	ldr	r3, [pc, #512]	@ (8008840 <CDC_Receive_FS+0x230>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	4b7f      	ldr	r3, [pc, #508]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008646:	2100      	movs	r1, #0
 8008648:	5499      	strb	r1, [r3, r2]
      cmdIndex = 0;
 800864a:	4b7d      	ldr	r3, [pc, #500]	@ (8008840 <CDC_Receive_FS+0x230>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]

      if (strncmp(cmdBuffer, "GETuserFloor", 13) == 0) {
 8008650:	497d      	ldr	r1, [pc, #500]	@ (8008848 <CDC_Receive_FS+0x238>)
 8008652:	487c      	ldr	r0, [pc, #496]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008654:	f7f7 fdc4 	bl	80001e0 <strcmp>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d116      	bne.n	800868c <CDC_Receive_FS+0x7c>
        char msg[32];
        sprintf(msg, "userFloor: %d\r\n", userFloor);
 800865e:	4b7b      	ldr	r3, [pc, #492]	@ (800884c <CDC_Receive_FS+0x23c>)
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f107 030c 	add.w	r3, r7, #12
 8008668:	4979      	ldr	r1, [pc, #484]	@ (8008850 <CDC_Receive_FS+0x240>)
 800866a:	4618      	mov	r0, r3
 800866c:	f000 fdec 	bl	8009248 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	4618      	mov	r0, r3
 8008676:	f7f7 fdbd 	bl	80001f4 <strlen>
 800867a:	4603      	mov	r3, r0
 800867c:	b29a      	uxth	r2, r3
 800867e:	f107 030c 	add.w	r3, r7, #12
 8008682:	4611      	mov	r1, r2
 8008684:	4618      	mov	r0, r3
 8008686:	f7ff ffa1 	bl	80085cc <CDC_Transmit_FS>
 800868a:	e0af      	b.n	80087ec <CDC_Receive_FS+0x1dc>

      } else if (strncmp(cmdBuffer, "GETuserReq", 11) == 0) {
 800868c:	4971      	ldr	r1, [pc, #452]	@ (8008854 <CDC_Receive_FS+0x244>)
 800868e:	486d      	ldr	r0, [pc, #436]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008690:	f7f7 fda6 	bl	80001e0 <strcmp>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d116      	bne.n	80086c8 <CDC_Receive_FS+0xb8>
        char msg[32];
        sprintf(msg, "userReq: %d\r\n", userReq);
 800869a:	4b6f      	ldr	r3, [pc, #444]	@ (8008858 <CDC_Receive_FS+0x248>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	496d      	ldr	r1, [pc, #436]	@ (800885c <CDC_Receive_FS+0x24c>)
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fdce 	bl	8009248 <siprintf>
        CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7f7 fd9f 	bl	80001f4 <strlen>
 80086b6:	4603      	mov	r3, r0
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7ff ff83 	bl	80085cc <CDC_Transmit_FS>
 80086c6:	e091      	b.n	80087ec <CDC_Receive_FS+0x1dc>

      } else if (strncmp(cmdBuffer, "GETCurrFloor,", 13) == 0) {
 80086c8:	220d      	movs	r2, #13
 80086ca:	4965      	ldr	r1, [pc, #404]	@ (8008860 <CDC_Receive_FS+0x250>)
 80086cc:	485d      	ldr	r0, [pc, #372]	@ (8008844 <CDC_Receive_FS+0x234>)
 80086ce:	f000 fe13 	bl	80092f8 <strncmp>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d12a      	bne.n	800872e <CDC_Receive_FS+0x11e>
        int car = atoi(&cmdBuffer[13]);
 80086d8:	4862      	ldr	r0, [pc, #392]	@ (8008864 <CDC_Receive_FS+0x254>)
 80086da:	f000 fcf5 	bl	80090c8 <atoi>
 80086de:	65f8      	str	r0, [r7, #92]	@ 0x5c
        if (car >= 0 && car < 3) {
 80086e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db1e      	blt.n	8008724 <CDC_Receive_FS+0x114>
 80086e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	dc1b      	bgt.n	8008724 <CDC_Receive_FS+0x114>
          char msg[32];
          sprintf(msg, "CurrFloor%d: %d\r\n", car, cReg[car].currFloor);
 80086ec:	495e      	ldr	r1, [pc, #376]	@ (8008868 <CDC_Receive_FS+0x258>)
 80086ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	440b      	add	r3, r1
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	f107 000c 	add.w	r0, r7, #12
 8008700:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008702:	495a      	ldr	r1, [pc, #360]	@ (800886c <CDC_Receive_FS+0x25c>)
 8008704:	f000 fda0 	bl	8009248 <siprintf>
          CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 fd71 	bl	80001f4 <strlen>
 8008712:	4603      	mov	r3, r0
 8008714:	b29a      	uxth	r2, r3
 8008716:	f107 030c 	add.w	r3, r7, #12
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff ff55 	bl	80085cc <CDC_Transmit_FS>
        if (car >= 0 && car < 3) {
 8008722:	e063      	b.n	80087ec <CDC_Receive_FS+0x1dc>
        } else {
          CDC_Transmit_FS((uint8_t*)"Invalid car\r\n", 14);
 8008724:	210e      	movs	r1, #14
 8008726:	4852      	ldr	r0, [pc, #328]	@ (8008870 <CDC_Receive_FS+0x260>)
 8008728:	f7ff ff50 	bl	80085cc <CDC_Transmit_FS>
 800872c:	e05e      	b.n	80087ec <CDC_Receive_FS+0x1dc>
        }

      } else if (strncmp(cmdBuffer, "UP,", 3) == 0 || strncmp(cmdBuffer, "DOWN,", 5) == 0) {
 800872e:	2203      	movs	r2, #3
 8008730:	4950      	ldr	r1, [pc, #320]	@ (8008874 <CDC_Receive_FS+0x264>)
 8008732:	4844      	ldr	r0, [pc, #272]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008734:	f000 fde0 	bl	80092f8 <strncmp>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <CDC_Receive_FS+0x13e>
 800873e:	2205      	movs	r2, #5
 8008740:	494d      	ldr	r1, [pc, #308]	@ (8008878 <CDC_Receive_FS+0x268>)
 8008742:	4840      	ldr	r0, [pc, #256]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008744:	f000 fdd8 	bl	80092f8 <strncmp>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d14a      	bne.n	80087e4 <CDC_Receive_FS+0x1d4>
        char dir[6];
        int from, to;
        if (sscanf(cmdBuffer, "%5[^,],%d,%d", dir, &from, &to) == 3) {
 800874e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008752:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8008756:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800875a:	9300      	str	r3, [sp, #0]
 800875c:	460b      	mov	r3, r1
 800875e:	4947      	ldr	r1, [pc, #284]	@ (800887c <CDC_Receive_FS+0x26c>)
 8008760:	4838      	ldr	r0, [pc, #224]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008762:	f000 fd93 	bl	800928c <siscanf>
 8008766:	4603      	mov	r3, r0
 8008768:	2b03      	cmp	r3, #3
 800876a:	d136      	bne.n	80087da <CDC_Receive_FS+0x1ca>
          if (from >= 0 && from < 8 && to >= 0 && to < 8 && from != to) {
 800876c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800876e:	2b00      	cmp	r3, #0
 8008770:	db2e      	blt.n	80087d0 <CDC_Receive_FS+0x1c0>
 8008772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008774:	2b07      	cmp	r3, #7
 8008776:	dc2b      	bgt.n	80087d0 <CDC_Receive_FS+0x1c0>
 8008778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800877a:	2b00      	cmp	r3, #0
 800877c:	db28      	blt.n	80087d0 <CDC_Receive_FS+0x1c0>
 800877e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008780:	2b07      	cmp	r3, #7
 8008782:	dc25      	bgt.n	80087d0 <CDC_Receive_FS+0x1c0>
 8008784:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008788:	429a      	cmp	r2, r3
 800878a:	d021      	beq.n	80087d0 <CDC_Receive_FS+0x1c0>
            handleUserRequest(from, to);
 800878c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800878e:	b2db      	uxtb	r3, r3
 8008790:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008792:	b2d2      	uxtb	r2, r2
 8008794:	4611      	mov	r1, r2
 8008796:	4618      	mov	r0, r3
 8008798:	f7f7 ff72 	bl	8000680 <handleUserRequest>
            char msg[64];
            sprintf(msg, "Request %s from %d to %d\r\n", dir, from, to);
 800879c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800879e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087a0:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80087a4:	f107 000c 	add.w	r0, r7, #12
 80087a8:	9300      	str	r3, [sp, #0]
 80087aa:	460b      	mov	r3, r1
 80087ac:	4934      	ldr	r1, [pc, #208]	@ (8008880 <CDC_Receive_FS+0x270>)
 80087ae:	f000 fd4b 	bl	8009248 <siprintf>
            CDC_Transmit_FS((uint8_t*)msg, strlen(msg));
 80087b2:	f107 030c 	add.w	r3, r7, #12
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7f7 fd1c 	bl	80001f4 <strlen>
 80087bc:	4603      	mov	r3, r0
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f107 030c 	add.w	r3, r7, #12
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff ff00 	bl	80085cc <CDC_Transmit_FS>
          if (from >= 0 && from < 8 && to >= 0 && to < 8 && from != to) {
 80087cc:	bf00      	nop
      } else if (strncmp(cmdBuffer, "UP,", 3) == 0 || strncmp(cmdBuffer, "DOWN,", 5) == 0) {
 80087ce:	e00d      	b.n	80087ec <CDC_Receive_FS+0x1dc>
          } else {
            CDC_Transmit_FS((uint8_t*)"Invalid floor values\r\n", 23);
 80087d0:	2117      	movs	r1, #23
 80087d2:	482c      	ldr	r0, [pc, #176]	@ (8008884 <CDC_Receive_FS+0x274>)
 80087d4:	f7ff fefa 	bl	80085cc <CDC_Transmit_FS>
      } else if (strncmp(cmdBuffer, "UP,", 3) == 0 || strncmp(cmdBuffer, "DOWN,", 5) == 0) {
 80087d8:	e008      	b.n	80087ec <CDC_Receive_FS+0x1dc>
          }
        } else {
          CDC_Transmit_FS((uint8_t*)"Invalid command format\r\n", 25);
 80087da:	2119      	movs	r1, #25
 80087dc:	482a      	ldr	r0, [pc, #168]	@ (8008888 <CDC_Receive_FS+0x278>)
 80087de:	f7ff fef5 	bl	80085cc <CDC_Transmit_FS>
      } else if (strncmp(cmdBuffer, "UP,", 3) == 0 || strncmp(cmdBuffer, "DOWN,", 5) == 0) {
 80087e2:	e003      	b.n	80087ec <CDC_Receive_FS+0x1dc>
        }

      } else {
        CDC_Transmit_FS((uint8_t*)"Unknown command\r\n", 18);
 80087e4:	2112      	movs	r1, #18
 80087e6:	4829      	ldr	r0, [pc, #164]	@ (800888c <CDC_Receive_FS+0x27c>)
 80087e8:	f7ff fef0 	bl	80085cc <CDC_Transmit_FS>
      }

      memset(cmdBuffer, 0, sizeof(cmdBuffer));
 80087ec:	2240      	movs	r2, #64	@ 0x40
 80087ee:	2100      	movs	r1, #0
 80087f0:	4814      	ldr	r0, [pc, #80]	@ (8008844 <CDC_Receive_FS+0x234>)
 80087f2:	f000 fd79 	bl	80092e8 <memset>
 80087f6:	e00e      	b.n	8008816 <CDC_Receive_FS+0x206>
    } else if (cmdIndex < sizeof(cmdBuffer) - 1) {
 80087f8:	4b11      	ldr	r3, [pc, #68]	@ (8008840 <CDC_Receive_FS+0x230>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80087fe:	d80a      	bhi.n	8008816 <CDC_Receive_FS+0x206>
      cmdBuffer[cmdIndex++] = ch;
 8008800:	4b0f      	ldr	r3, [pc, #60]	@ (8008840 <CDC_Receive_FS+0x230>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	b2d1      	uxtb	r1, r2
 8008808:	4a0d      	ldr	r2, [pc, #52]	@ (8008840 <CDC_Receive_FS+0x230>)
 800880a:	7011      	strb	r1, [r2, #0]
 800880c:	4619      	mov	r1, r3
 800880e:	4a0d      	ldr	r2, [pc, #52]	@ (8008844 <CDC_Receive_FS+0x234>)
 8008810:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8008814:	5453      	strb	r3, [r2, r1]
  for (uint32_t i = 0; i < *Len; i++) {
 8008816:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008818:	3301      	adds	r3, #1
 800881a:	667b      	str	r3, [r7, #100]	@ 0x64
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008822:	429a      	cmp	r2, r3
 8008824:	f4ff aefc 	bcc.w	8008620 <CDC_Receive_FS+0x10>
    }
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4819      	ldr	r0, [pc, #100]	@ (8008890 <CDC_Receive_FS+0x280>)
 800882c:	f7fe fabe 	bl	8006dac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008830:	4817      	ldr	r0, [pc, #92]	@ (8008890 <CDC_Receive_FS+0x280>)
 8008832:	f7fe fb19 	bl	8006e68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3768      	adds	r7, #104	@ 0x68
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20001500 	.word	0x20001500
 8008844:	20001504 	.word	0x20001504
 8008848:	0800a470 	.word	0x0800a470
 800884c:	20000216 	.word	0x20000216
 8008850:	0800a480 	.word	0x0800a480
 8008854:	0800a490 	.word	0x0800a490
 8008858:	20000217 	.word	0x20000217
 800885c:	0800a49c 	.word	0x0800a49c
 8008860:	0800a4ac 	.word	0x0800a4ac
 8008864:	20001511 	.word	0x20001511
 8008868:	200001f8 	.word	0x200001f8
 800886c:	0800a4bc 	.word	0x0800a4bc
 8008870:	0800a4d0 	.word	0x0800a4d0
 8008874:	0800a4e0 	.word	0x0800a4e0
 8008878:	0800a4e4 	.word	0x0800a4e4
 800887c:	0800a4ec 	.word	0x0800a4ec
 8008880:	0800a4fc 	.word	0x0800a4fc
 8008884:	0800a518 	.word	0x0800a518
 8008888:	0800a530 	.word	0x0800a530
 800888c:	0800a54c 	.word	0x0800a54c
 8008890:	20000224 	.word	0x20000224

08008894 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b480      	push	{r7}
 8008896:	b083      	sub	sp, #12
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2212      	movs	r2, #18
 80088a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088a6:	4b03      	ldr	r3, [pc, #12]	@ (80088b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	200000c8 	.word	0x200000c8

080088b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	4603      	mov	r3, r0
 80088c0:	6039      	str	r1, [r7, #0]
 80088c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	2204      	movs	r2, #4
 80088c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80088ca:	4b03      	ldr	r3, [pc, #12]	@ (80088d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	200000dc 	.word	0x200000dc

080088dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	6039      	str	r1, [r7, #0]
 80088e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088e8:	79fb      	ldrb	r3, [r7, #7]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d105      	bne.n	80088fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	4907      	ldr	r1, [pc, #28]	@ (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
 80088f2:	4808      	ldr	r0, [pc, #32]	@ (8008914 <USBD_FS_ProductStrDescriptor+0x38>)
 80088f4:	f7ff fd1a 	bl	800832c <USBD_GetString>
 80088f8:	e004      	b.n	8008904 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	4904      	ldr	r1, [pc, #16]	@ (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
 80088fe:	4805      	ldr	r0, [pc, #20]	@ (8008914 <USBD_FS_ProductStrDescriptor+0x38>)
 8008900:	f7ff fd14 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008904:	4b02      	ldr	r3, [pc, #8]	@ (8008910 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20001544 	.word	0x20001544
 8008914:	0800a560 	.word	0x0800a560

08008918 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	6039      	str	r1, [r7, #0]
 8008922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	4904      	ldr	r1, [pc, #16]	@ (8008938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008928:	4804      	ldr	r0, [pc, #16]	@ (800893c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800892a:	f7ff fcff 	bl	800832c <USBD_GetString>
  return USBD_StrDesc;
 800892e:	4b02      	ldr	r3, [pc, #8]	@ (8008938 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008930:	4618      	mov	r0, r3
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20001544 	.word	0x20001544
 800893c:	0800a578 	.word	0x0800a578

08008940 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	221a      	movs	r2, #26
 8008950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008952:	f000 f843 	bl	80089dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008956:	4b02      	ldr	r3, [pc, #8]	@ (8008960 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008958:	4618      	mov	r0, r3
 800895a:	3708      	adds	r7, #8
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	200000e0 	.word	0x200000e0

08008964 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d105      	bne.n	8008982 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4907      	ldr	r1, [pc, #28]	@ (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
 800897a:	4808      	ldr	r0, [pc, #32]	@ (800899c <USBD_FS_ConfigStrDescriptor+0x38>)
 800897c:	f7ff fcd6 	bl	800832c <USBD_GetString>
 8008980:	e004      	b.n	800898c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	4904      	ldr	r1, [pc, #16]	@ (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008986:	4805      	ldr	r0, [pc, #20]	@ (800899c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008988:	f7ff fcd0 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 800898c:	4b02      	ldr	r3, [pc, #8]	@ (8008998 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800898e:	4618      	mov	r0, r3
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20001544 	.word	0x20001544
 800899c:	0800a58c 	.word	0x0800a58c

080089a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	4603      	mov	r3, r0
 80089a8:	6039      	str	r1, [r7, #0]
 80089aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80089ac:	79fb      	ldrb	r3, [r7, #7]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d105      	bne.n	80089be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089b2:	683a      	ldr	r2, [r7, #0]
 80089b4:	4907      	ldr	r1, [pc, #28]	@ (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089b6:	4808      	ldr	r0, [pc, #32]	@ (80089d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089b8:	f7ff fcb8 	bl	800832c <USBD_GetString>
 80089bc:	e004      	b.n	80089c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	4904      	ldr	r1, [pc, #16]	@ (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80089c2:	4805      	ldr	r0, [pc, #20]	@ (80089d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80089c4:	f7ff fcb2 	bl	800832c <USBD_GetString>
  }
  return USBD_StrDesc;
 80089c8:	4b02      	ldr	r3, [pc, #8]	@ (80089d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	20001544 	.word	0x20001544
 80089d8:	0800a598 	.word	0x0800a598

080089dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80089e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008a20 <Get_SerialNum+0x44>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80089e8:	4b0e      	ldr	r3, [pc, #56]	@ (8008a24 <Get_SerialNum+0x48>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80089ee:	4b0e      	ldr	r3, [pc, #56]	@ (8008a28 <Get_SerialNum+0x4c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d009      	beq.n	8008a16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a02:	2208      	movs	r2, #8
 8008a04:	4909      	ldr	r1, [pc, #36]	@ (8008a2c <Get_SerialNum+0x50>)
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 f814 	bl	8008a34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a0c:	2204      	movs	r2, #4
 8008a0e:	4908      	ldr	r1, [pc, #32]	@ (8008a30 <Get_SerialNum+0x54>)
 8008a10:	68b8      	ldr	r0, [r7, #8]
 8008a12:	f000 f80f 	bl	8008a34 <IntToUnicode>
  }
}
 8008a16:	bf00      	nop
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	1fff7a10 	.word	0x1fff7a10
 8008a24:	1fff7a14 	.word	0x1fff7a14
 8008a28:	1fff7a18 	.word	0x1fff7a18
 8008a2c:	200000e2 	.word	0x200000e2
 8008a30:	200000f2 	.word	0x200000f2

08008a34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	4613      	mov	r3, r2
 8008a40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a46:	2300      	movs	r3, #0
 8008a48:	75fb      	strb	r3, [r7, #23]
 8008a4a:	e027      	b.n	8008a9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	0f1b      	lsrs	r3, r3, #28
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d80b      	bhi.n	8008a6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	0f1b      	lsrs	r3, r3, #28
 8008a58:	b2da      	uxtb	r2, r3
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	4619      	mov	r1, r3
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	440b      	add	r3, r1
 8008a64:	3230      	adds	r2, #48	@ 0x30
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	701a      	strb	r2, [r3, #0]
 8008a6a:	e00a      	b.n	8008a82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	0f1b      	lsrs	r3, r3, #28
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4619      	mov	r1, r3
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	440b      	add	r3, r1
 8008a7c:	3237      	adds	r2, #55	@ 0x37
 8008a7e:	b2d2      	uxtb	r2, r2
 8008a80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	005b      	lsls	r3, r3, #1
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	4413      	add	r3, r2
 8008a92:	2200      	movs	r2, #0
 8008a94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	75fb      	strb	r3, [r7, #23]
 8008a9c:	7dfa      	ldrb	r2, [r7, #23]
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d3d3      	bcc.n	8008a4c <IntToUnicode+0x18>
  }
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop
 8008aa8:	371c      	adds	r7, #28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	@ 0x28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008abc:	f107 0314 	add.w	r3, r7, #20
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	605a      	str	r2, [r3, #4]
 8008ac6:	609a      	str	r2, [r3, #8]
 8008ac8:	60da      	str	r2, [r3, #12]
 8008aca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ad4:	d13a      	bne.n	8008b4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	4b1e      	ldr	r3, [pc, #120]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ade:	4a1d      	ldr	r2, [pc, #116]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008ae0:	f043 0301 	orr.w	r3, r3, #1
 8008ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008af2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008af8:	2302      	movs	r3, #2
 8008afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afc:	2300      	movs	r3, #0
 8008afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b00:	2303      	movs	r3, #3
 8008b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008b04:	230a      	movs	r3, #10
 8008b06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b08:	f107 0314 	add.w	r3, r7, #20
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4812      	ldr	r0, [pc, #72]	@ (8008b58 <HAL_PCD_MspInit+0xa4>)
 8008b10:	f7f8 fcd0 	bl	80014b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008b14:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b18:	4a0e      	ldr	r2, [pc, #56]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b1e:	6353      	str	r3, [r2, #52]	@ 0x34
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	4b0b      	ldr	r3, [pc, #44]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b28:	4a0a      	ldr	r2, [pc, #40]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008b2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b2e:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b30:	4b08      	ldr	r3, [pc, #32]	@ (8008b54 <HAL_PCD_MspInit+0xa0>)
 8008b32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	2043      	movs	r0, #67	@ 0x43
 8008b42:	f7f8 fbee 	bl	8001322 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008b46:	2043      	movs	r0, #67	@ 0x43
 8008b48:	f7f8 fc07 	bl	800135a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3728      	adds	r7, #40	@ 0x28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	40023800 	.word	0x40023800
 8008b58:	40020000 	.word	0x40020000

08008b5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f7fe fa61 	bl	800703a <USBD_LL_SetupStage>
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008b92:	78fa      	ldrb	r2, [r7, #3]
 8008b94:	6879      	ldr	r1, [r7, #4]
 8008b96:	4613      	mov	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	4413      	add	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	440b      	add	r3, r1
 8008ba0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	78fb      	ldrb	r3, [r7, #3]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	f7fe fa9b 	bl	80070e4 <USBD_LL_DataOutStage>
}
 8008bae:	bf00      	nop
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b082      	sub	sp, #8
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008bc8:	78fa      	ldrb	r2, [r7, #3]
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3320      	adds	r3, #32
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	78fb      	ldrb	r3, [r7, #3]
 8008bdc:	4619      	mov	r1, r3
 8008bde:	f7fe fb3d 	bl	800725c <USBD_LL_DataInStage>
}
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b082      	sub	sp, #8
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fc81 	bl	8007500 <USBD_LL_SOF>
}
 8008bfe:	bf00      	nop
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	79db      	ldrb	r3, [r3, #7]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d001      	beq.n	8008c1e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c1a:	f7f8 f8ad 	bl	8000d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c24:	7bfa      	ldrb	r2, [r7, #15]
 8008c26:	4611      	mov	r1, r2
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7fe fc25 	bl	8007478 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fbcc 	bl	80073d2 <USBD_LL_Reset>
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fc20 	bl	8007498 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6812      	ldr	r2, [r2, #0]
 8008c66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008c6a:	f043 0301 	orr.w	r3, r3, #1
 8008c6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	7adb      	ldrb	r3, [r3, #11]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c78:	4b04      	ldr	r3, [pc, #16]	@ (8008c8c <HAL_PCD_SuspendCallback+0x48>)
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	4a03      	ldr	r2, [pc, #12]	@ (8008c8c <HAL_PCD_SuspendCallback+0x48>)
 8008c7e:	f043 0306 	orr.w	r3, r3, #6
 8008c82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed00 	.word	0xe000ed00

08008c90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fe fc16 	bl	80074d0 <USBD_LL_Resume>
}
 8008ca4:	bf00      	nop
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fe fc6e 	bl	80075a4 <USBD_LL_IsoOUTIncomplete>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008ce2:	78fa      	ldrb	r2, [r7, #3]
 8008ce4:	4611      	mov	r1, r2
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fc2a 	bl	8007540 <USBD_LL_IsoINIncomplete>
}
 8008cec:	bf00      	nop
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fe fc80 	bl	8007608 <USBD_LL_DevConnected>
}
 8008d08:	bf00      	nop
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7fe fc7d 	bl	800761e <USBD_LL_DevDisconnected>
}
 8008d24:	bf00      	nop
 8008d26:	3708      	adds	r7, #8
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d13c      	bne.n	8008db6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008d3c:	4a20      	ldr	r2, [pc, #128]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d48:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d4e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008d52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008d54:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d56:	2204      	movs	r2, #4
 8008d58:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008d5a:	4b19      	ldr	r3, [pc, #100]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d5c:	2202      	movs	r2, #2
 8008d5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008d60:	4b17      	ldr	r3, [pc, #92]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008d66:	4b16      	ldr	r3, [pc, #88]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d68:	2202      	movs	r2, #2
 8008d6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008d6c:	4b14      	ldr	r3, [pc, #80]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008d72:	4b13      	ldr	r3, [pc, #76]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008d78:	4b11      	ldr	r3, [pc, #68]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008d7e:	4b10      	ldr	r3, [pc, #64]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008d84:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008d8a:	480d      	ldr	r0, [pc, #52]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d8c:	f7f8 fd2f 	bl	80017ee <HAL_PCD_Init>
 8008d90:	4603      	mov	r3, r0
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008d96:	f7f7 ffef 	bl	8000d78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008d9a:	2180      	movs	r1, #128	@ 0x80
 8008d9c:	4808      	ldr	r0, [pc, #32]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008d9e:	f7f9 ff5c 	bl	8002c5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008da2:	2240      	movs	r2, #64	@ 0x40
 8008da4:	2100      	movs	r1, #0
 8008da6:	4806      	ldr	r0, [pc, #24]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008da8:	f7f9 ff10 	bl	8002bcc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008dac:	2280      	movs	r2, #128	@ 0x80
 8008dae:	2101      	movs	r1, #1
 8008db0:	4803      	ldr	r0, [pc, #12]	@ (8008dc0 <USBD_LL_Init+0x94>)
 8008db2:	f7f9 ff0b 	bl	8002bcc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20001744 	.word	0x20001744

08008dc4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f7f8 fe16 	bl	8001a0c <HAL_PCD_Start>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f000 f942 	bl	8009070 <USBD_Get_USB_Status>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	4608      	mov	r0, r1
 8008e04:	4611      	mov	r1, r2
 8008e06:	461a      	mov	r2, r3
 8008e08:	4603      	mov	r3, r0
 8008e0a:	70fb      	strb	r3, [r7, #3]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	70bb      	strb	r3, [r7, #2]
 8008e10:	4613      	mov	r3, r2
 8008e12:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008e22:	78bb      	ldrb	r3, [r7, #2]
 8008e24:	883a      	ldrh	r2, [r7, #0]
 8008e26:	78f9      	ldrb	r1, [r7, #3]
 8008e28:	f7f9 faea 	bl	8002400 <HAL_PCD_EP_Open>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 f91c 	bl	8009070 <USBD_Get_USB_Status>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b084      	sub	sp, #16
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	460b      	mov	r3, r1
 8008e50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e56:	2300      	movs	r3, #0
 8008e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e60:	78fa      	ldrb	r2, [r7, #3]
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7f9 fb35 	bl	80024d4 <HAL_PCD_EP_Close>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 f8fd 	bl	8009070 <USBD_Get_USB_Status>
 8008e76:	4603      	mov	r3, r0
 8008e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008e9e:	78fa      	ldrb	r2, [r7, #3]
 8008ea0:	4611      	mov	r1, r2
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7f9 fbed 	bl	8002682 <HAL_PCD_EP_SetStall>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 f8de 	bl	8009070 <USBD_Get_USB_Status>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7f9 fc31 	bl	8002748 <HAL_PCD_EP_ClrStall>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f8bf 	bl	8009070 <USBD_Get_USB_Status>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	460b      	mov	r3, r1
 8008f0a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f12:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	da0b      	bge.n	8008f34 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f22:	68f9      	ldr	r1, [r7, #12]
 8008f24:	4613      	mov	r3, r2
 8008f26:	00db      	lsls	r3, r3, #3
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	3316      	adds	r3, #22
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	e00b      	b.n	8008f4c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f34:	78fb      	ldrb	r3, [r7, #3]
 8008f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008f4a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3714      	adds	r7, #20
 8008f50:	46bd      	mov	sp, r7
 8008f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f56:	4770      	bx	lr

08008f58 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f72:	78fa      	ldrb	r2, [r7, #3]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f7f9 fa1e 	bl	80023b8 <HAL_PCD_SetAddress>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f000 f874 	bl	8009070 <USBD_Get_USB_Status>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}

08008f96 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f96:	b580      	push	{r7, lr}
 8008f98:	b086      	sub	sp, #24
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	60f8      	str	r0, [r7, #12]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	603b      	str	r3, [r7, #0]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008fb4:	7af9      	ldrb	r1, [r7, #11]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	f7f9 fb28 	bl	800260e <HAL_PCD_EP_Transmit>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f853 	bl	8009070 <USBD_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008fce:	7dbb      	ldrb	r3, [r7, #22]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3718      	adds	r7, #24
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ff6:	7af9      	ldrb	r1, [r7, #11]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	f7f9 fab4 	bl	8002568 <HAL_PCD_EP_Receive>
 8009000:	4603      	mov	r3, r0
 8009002:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009004:	7dfb      	ldrb	r3, [r7, #23]
 8009006:	4618      	mov	r0, r3
 8009008:	f000 f832 	bl	8009070 <USBD_Get_USB_Status>
 800900c:	4603      	mov	r3, r0
 800900e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009010:	7dbb      	ldrb	r3, [r7, #22]
}
 8009012:	4618      	mov	r0, r3
 8009014:	3718      	adds	r7, #24
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800902c:	78fa      	ldrb	r2, [r7, #3]
 800902e:	4611      	mov	r1, r2
 8009030:	4618      	mov	r0, r3
 8009032:	f7f9 fad4 	bl	80025de <HAL_PCD_EP_GetRxCount>
 8009036:	4603      	mov	r3, r0
}
 8009038:	4618      	mov	r0, r3
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009048:	4b03      	ldr	r3, [pc, #12]	@ (8009058 <USBD_static_malloc+0x18>)
}
 800904a:	4618      	mov	r0, r3
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	20001c28 	.word	0x20001c28

0800905c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]

}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009070:	b480      	push	{r7}
 8009072:	b085      	sub	sp, #20
 8009074:	af00      	add	r7, sp, #0
 8009076:	4603      	mov	r3, r0
 8009078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b03      	cmp	r3, #3
 8009082:	d817      	bhi.n	80090b4 <USBD_Get_USB_Status+0x44>
 8009084:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <USBD_Get_USB_Status+0x1c>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	0800909d 	.word	0x0800909d
 8009090:	080090a3 	.word	0x080090a3
 8009094:	080090a9 	.word	0x080090a9
 8009098:	080090af 	.word	0x080090af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
    break;
 80090a0:	e00b      	b.n	80090ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090a2:	2303      	movs	r3, #3
 80090a4:	73fb      	strb	r3, [r7, #15]
    break;
 80090a6:	e008      	b.n	80090ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090a8:	2301      	movs	r3, #1
 80090aa:	73fb      	strb	r3, [r7, #15]
    break;
 80090ac:	e005      	b.n	80090ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090ae:	2303      	movs	r3, #3
 80090b0:	73fb      	strb	r3, [r7, #15]
    break;
 80090b2:	e002      	b.n	80090ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80090b4:	2303      	movs	r3, #3
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	bf00      	nop
  }
  return usb_status;
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <atoi>:
 80090c8:	220a      	movs	r2, #10
 80090ca:	2100      	movs	r1, #0
 80090cc:	f000 b87c 	b.w	80091c8 <strtol>

080090d0 <_strtol_l.isra.0>:
 80090d0:	2b24      	cmp	r3, #36	@ 0x24
 80090d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d6:	4686      	mov	lr, r0
 80090d8:	4690      	mov	r8, r2
 80090da:	d801      	bhi.n	80090e0 <_strtol_l.isra.0+0x10>
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d106      	bne.n	80090ee <_strtol_l.isra.0+0x1e>
 80090e0:	f000 f91c 	bl	800931c <__errno>
 80090e4:	2316      	movs	r3, #22
 80090e6:	6003      	str	r3, [r0, #0]
 80090e8:	2000      	movs	r0, #0
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	4834      	ldr	r0, [pc, #208]	@ (80091c0 <_strtol_l.isra.0+0xf0>)
 80090f0:	460d      	mov	r5, r1
 80090f2:	462a      	mov	r2, r5
 80090f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090f8:	5d06      	ldrb	r6, [r0, r4]
 80090fa:	f016 0608 	ands.w	r6, r6, #8
 80090fe:	d1f8      	bne.n	80090f2 <_strtol_l.isra.0+0x22>
 8009100:	2c2d      	cmp	r4, #45	@ 0x2d
 8009102:	d110      	bne.n	8009126 <_strtol_l.isra.0+0x56>
 8009104:	782c      	ldrb	r4, [r5, #0]
 8009106:	2601      	movs	r6, #1
 8009108:	1c95      	adds	r5, r2, #2
 800910a:	f033 0210 	bics.w	r2, r3, #16
 800910e:	d115      	bne.n	800913c <_strtol_l.isra.0+0x6c>
 8009110:	2c30      	cmp	r4, #48	@ 0x30
 8009112:	d10d      	bne.n	8009130 <_strtol_l.isra.0+0x60>
 8009114:	782a      	ldrb	r2, [r5, #0]
 8009116:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800911a:	2a58      	cmp	r2, #88	@ 0x58
 800911c:	d108      	bne.n	8009130 <_strtol_l.isra.0+0x60>
 800911e:	786c      	ldrb	r4, [r5, #1]
 8009120:	3502      	adds	r5, #2
 8009122:	2310      	movs	r3, #16
 8009124:	e00a      	b.n	800913c <_strtol_l.isra.0+0x6c>
 8009126:	2c2b      	cmp	r4, #43	@ 0x2b
 8009128:	bf04      	itt	eq
 800912a:	782c      	ldrbeq	r4, [r5, #0]
 800912c:	1c95      	addeq	r5, r2, #2
 800912e:	e7ec      	b.n	800910a <_strtol_l.isra.0+0x3a>
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f6      	bne.n	8009122 <_strtol_l.isra.0+0x52>
 8009134:	2c30      	cmp	r4, #48	@ 0x30
 8009136:	bf14      	ite	ne
 8009138:	230a      	movne	r3, #10
 800913a:	2308      	moveq	r3, #8
 800913c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009140:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009144:	2200      	movs	r2, #0
 8009146:	fbbc f9f3 	udiv	r9, ip, r3
 800914a:	4610      	mov	r0, r2
 800914c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009150:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009154:	2f09      	cmp	r7, #9
 8009156:	d80f      	bhi.n	8009178 <_strtol_l.isra.0+0xa8>
 8009158:	463c      	mov	r4, r7
 800915a:	42a3      	cmp	r3, r4
 800915c:	dd1b      	ble.n	8009196 <_strtol_l.isra.0+0xc6>
 800915e:	1c57      	adds	r7, r2, #1
 8009160:	d007      	beq.n	8009172 <_strtol_l.isra.0+0xa2>
 8009162:	4581      	cmp	r9, r0
 8009164:	d314      	bcc.n	8009190 <_strtol_l.isra.0+0xc0>
 8009166:	d101      	bne.n	800916c <_strtol_l.isra.0+0x9c>
 8009168:	45a2      	cmp	sl, r4
 800916a:	db11      	blt.n	8009190 <_strtol_l.isra.0+0xc0>
 800916c:	fb00 4003 	mla	r0, r0, r3, r4
 8009170:	2201      	movs	r2, #1
 8009172:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009176:	e7eb      	b.n	8009150 <_strtol_l.isra.0+0x80>
 8009178:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800917c:	2f19      	cmp	r7, #25
 800917e:	d801      	bhi.n	8009184 <_strtol_l.isra.0+0xb4>
 8009180:	3c37      	subs	r4, #55	@ 0x37
 8009182:	e7ea      	b.n	800915a <_strtol_l.isra.0+0x8a>
 8009184:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009188:	2f19      	cmp	r7, #25
 800918a:	d804      	bhi.n	8009196 <_strtol_l.isra.0+0xc6>
 800918c:	3c57      	subs	r4, #87	@ 0x57
 800918e:	e7e4      	b.n	800915a <_strtol_l.isra.0+0x8a>
 8009190:	f04f 32ff 	mov.w	r2, #4294967295
 8009194:	e7ed      	b.n	8009172 <_strtol_l.isra.0+0xa2>
 8009196:	1c53      	adds	r3, r2, #1
 8009198:	d108      	bne.n	80091ac <_strtol_l.isra.0+0xdc>
 800919a:	2322      	movs	r3, #34	@ 0x22
 800919c:	f8ce 3000 	str.w	r3, [lr]
 80091a0:	4660      	mov	r0, ip
 80091a2:	f1b8 0f00 	cmp.w	r8, #0
 80091a6:	d0a0      	beq.n	80090ea <_strtol_l.isra.0+0x1a>
 80091a8:	1e69      	subs	r1, r5, #1
 80091aa:	e006      	b.n	80091ba <_strtol_l.isra.0+0xea>
 80091ac:	b106      	cbz	r6, 80091b0 <_strtol_l.isra.0+0xe0>
 80091ae:	4240      	negs	r0, r0
 80091b0:	f1b8 0f00 	cmp.w	r8, #0
 80091b4:	d099      	beq.n	80090ea <_strtol_l.isra.0+0x1a>
 80091b6:	2a00      	cmp	r2, #0
 80091b8:	d1f6      	bne.n	80091a8 <_strtol_l.isra.0+0xd8>
 80091ba:	f8c8 1000 	str.w	r1, [r8]
 80091be:	e794      	b.n	80090ea <_strtol_l.isra.0+0x1a>
 80091c0:	0800a5cd 	.word	0x0800a5cd

080091c4 <_strtol_r>:
 80091c4:	f7ff bf84 	b.w	80090d0 <_strtol_l.isra.0>

080091c8 <strtol>:
 80091c8:	4613      	mov	r3, r2
 80091ca:	460a      	mov	r2, r1
 80091cc:	4601      	mov	r1, r0
 80091ce:	4802      	ldr	r0, [pc, #8]	@ (80091d8 <strtol+0x10>)
 80091d0:	6800      	ldr	r0, [r0, #0]
 80091d2:	f7ff bf7d 	b.w	80090d0 <_strtol_l.isra.0>
 80091d6:	bf00      	nop
 80091d8:	200000fc 	.word	0x200000fc

080091dc <sniprintf>:
 80091dc:	b40c      	push	{r2, r3}
 80091de:	b530      	push	{r4, r5, lr}
 80091e0:	4b18      	ldr	r3, [pc, #96]	@ (8009244 <sniprintf+0x68>)
 80091e2:	1e0c      	subs	r4, r1, #0
 80091e4:	681d      	ldr	r5, [r3, #0]
 80091e6:	b09d      	sub	sp, #116	@ 0x74
 80091e8:	da08      	bge.n	80091fc <sniprintf+0x20>
 80091ea:	238b      	movs	r3, #139	@ 0x8b
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	f04f 30ff 	mov.w	r0, #4294967295
 80091f2:	b01d      	add	sp, #116	@ 0x74
 80091f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f8:	b002      	add	sp, #8
 80091fa:	4770      	bx	lr
 80091fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009200:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009204:	f04f 0300 	mov.w	r3, #0
 8009208:	931b      	str	r3, [sp, #108]	@ 0x6c
 800920a:	bf14      	ite	ne
 800920c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009210:	4623      	moveq	r3, r4
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800921a:	9002      	str	r0, [sp, #8]
 800921c:	9006      	str	r0, [sp, #24]
 800921e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009222:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009224:	ab21      	add	r3, sp, #132	@ 0x84
 8009226:	a902      	add	r1, sp, #8
 8009228:	4628      	mov	r0, r5
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	f000 f9f6 	bl	800961c <_svfiprintf_r>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	bfbc      	itt	lt
 8009234:	238b      	movlt	r3, #139	@ 0x8b
 8009236:	602b      	strlt	r3, [r5, #0]
 8009238:	2c00      	cmp	r4, #0
 800923a:	d0da      	beq.n	80091f2 <sniprintf+0x16>
 800923c:	9b02      	ldr	r3, [sp, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	e7d6      	b.n	80091f2 <sniprintf+0x16>
 8009244:	200000fc 	.word	0x200000fc

08009248 <siprintf>:
 8009248:	b40e      	push	{r1, r2, r3}
 800924a:	b510      	push	{r4, lr}
 800924c:	b09d      	sub	sp, #116	@ 0x74
 800924e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009250:	9002      	str	r0, [sp, #8]
 8009252:	9006      	str	r0, [sp, #24]
 8009254:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009258:	480a      	ldr	r0, [pc, #40]	@ (8009284 <siprintf+0x3c>)
 800925a:	9107      	str	r1, [sp, #28]
 800925c:	9104      	str	r1, [sp, #16]
 800925e:	490a      	ldr	r1, [pc, #40]	@ (8009288 <siprintf+0x40>)
 8009260:	f853 2b04 	ldr.w	r2, [r3], #4
 8009264:	9105      	str	r1, [sp, #20]
 8009266:	2400      	movs	r4, #0
 8009268:	a902      	add	r1, sp, #8
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009270:	f000 f9d4 	bl	800961c <_svfiprintf_r>
 8009274:	9b02      	ldr	r3, [sp, #8]
 8009276:	701c      	strb	r4, [r3, #0]
 8009278:	b01d      	add	sp, #116	@ 0x74
 800927a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800927e:	b003      	add	sp, #12
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	200000fc 	.word	0x200000fc
 8009288:	ffff0208 	.word	0xffff0208

0800928c <siscanf>:
 800928c:	b40e      	push	{r1, r2, r3}
 800928e:	b570      	push	{r4, r5, r6, lr}
 8009290:	b09d      	sub	sp, #116	@ 0x74
 8009292:	ac21      	add	r4, sp, #132	@ 0x84
 8009294:	2500      	movs	r5, #0
 8009296:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800929a:	f854 6b04 	ldr.w	r6, [r4], #4
 800929e:	f8ad 2014 	strh.w	r2, [sp, #20]
 80092a2:	951b      	str	r5, [sp, #108]	@ 0x6c
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	9006      	str	r0, [sp, #24]
 80092a8:	f7f6 ffa4 	bl	80001f4 <strlen>
 80092ac:	4b0b      	ldr	r3, [pc, #44]	@ (80092dc <siscanf+0x50>)
 80092ae:	9003      	str	r0, [sp, #12]
 80092b0:	9007      	str	r0, [sp, #28]
 80092b2:	480b      	ldr	r0, [pc, #44]	@ (80092e0 <siscanf+0x54>)
 80092b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092be:	4632      	mov	r2, r6
 80092c0:	4623      	mov	r3, r4
 80092c2:	a902      	add	r1, sp, #8
 80092c4:	6800      	ldr	r0, [r0, #0]
 80092c6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80092c8:	9514      	str	r5, [sp, #80]	@ 0x50
 80092ca:	9401      	str	r4, [sp, #4]
 80092cc:	f000 fafc 	bl	80098c8 <__ssvfiscanf_r>
 80092d0:	b01d      	add	sp, #116	@ 0x74
 80092d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80092d6:	b003      	add	sp, #12
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	080092e5 	.word	0x080092e5
 80092e0:	200000fc 	.word	0x200000fc

080092e4 <__seofread>:
 80092e4:	2000      	movs	r0, #0
 80092e6:	4770      	bx	lr

080092e8 <memset>:
 80092e8:	4402      	add	r2, r0
 80092ea:	4603      	mov	r3, r0
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d100      	bne.n	80092f2 <memset+0xa>
 80092f0:	4770      	bx	lr
 80092f2:	f803 1b01 	strb.w	r1, [r3], #1
 80092f6:	e7f9      	b.n	80092ec <memset+0x4>

080092f8 <strncmp>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	b16a      	cbz	r2, 8009318 <strncmp+0x20>
 80092fc:	3901      	subs	r1, #1
 80092fe:	1884      	adds	r4, r0, r2
 8009300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009304:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009308:	429a      	cmp	r2, r3
 800930a:	d103      	bne.n	8009314 <strncmp+0x1c>
 800930c:	42a0      	cmp	r0, r4
 800930e:	d001      	beq.n	8009314 <strncmp+0x1c>
 8009310:	2a00      	cmp	r2, #0
 8009312:	d1f5      	bne.n	8009300 <strncmp+0x8>
 8009314:	1ad0      	subs	r0, r2, r3
 8009316:	bd10      	pop	{r4, pc}
 8009318:	4610      	mov	r0, r2
 800931a:	e7fc      	b.n	8009316 <strncmp+0x1e>

0800931c <__errno>:
 800931c:	4b01      	ldr	r3, [pc, #4]	@ (8009324 <__errno+0x8>)
 800931e:	6818      	ldr	r0, [r3, #0]
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	200000fc 	.word	0x200000fc

08009328 <__libc_init_array>:
 8009328:	b570      	push	{r4, r5, r6, lr}
 800932a:	4d0d      	ldr	r5, [pc, #52]	@ (8009360 <__libc_init_array+0x38>)
 800932c:	4c0d      	ldr	r4, [pc, #52]	@ (8009364 <__libc_init_array+0x3c>)
 800932e:	1b64      	subs	r4, r4, r5
 8009330:	10a4      	asrs	r4, r4, #2
 8009332:	2600      	movs	r6, #0
 8009334:	42a6      	cmp	r6, r4
 8009336:	d109      	bne.n	800934c <__libc_init_array+0x24>
 8009338:	4d0b      	ldr	r5, [pc, #44]	@ (8009368 <__libc_init_array+0x40>)
 800933a:	4c0c      	ldr	r4, [pc, #48]	@ (800936c <__libc_init_array+0x44>)
 800933c:	f001 f866 	bl	800a40c <_init>
 8009340:	1b64      	subs	r4, r4, r5
 8009342:	10a4      	asrs	r4, r4, #2
 8009344:	2600      	movs	r6, #0
 8009346:	42a6      	cmp	r6, r4
 8009348:	d105      	bne.n	8009356 <__libc_init_array+0x2e>
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009350:	4798      	blx	r3
 8009352:	3601      	adds	r6, #1
 8009354:	e7ee      	b.n	8009334 <__libc_init_array+0xc>
 8009356:	f855 3b04 	ldr.w	r3, [r5], #4
 800935a:	4798      	blx	r3
 800935c:	3601      	adds	r6, #1
 800935e:	e7f2      	b.n	8009346 <__libc_init_array+0x1e>
 8009360:	0800a724 	.word	0x0800a724
 8009364:	0800a724 	.word	0x0800a724
 8009368:	0800a724 	.word	0x0800a724
 800936c:	0800a728 	.word	0x0800a728

08009370 <__retarget_lock_acquire_recursive>:
 8009370:	4770      	bx	lr

08009372 <__retarget_lock_release_recursive>:
 8009372:	4770      	bx	lr

08009374 <_free_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4605      	mov	r5, r0
 8009378:	2900      	cmp	r1, #0
 800937a:	d041      	beq.n	8009400 <_free_r+0x8c>
 800937c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009380:	1f0c      	subs	r4, r1, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfb8      	it	lt
 8009386:	18e4      	addlt	r4, r4, r3
 8009388:	f000 f8e0 	bl	800954c <__malloc_lock>
 800938c:	4a1d      	ldr	r2, [pc, #116]	@ (8009404 <_free_r+0x90>)
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	b933      	cbnz	r3, 80093a0 <_free_r+0x2c>
 8009392:	6063      	str	r3, [r4, #4]
 8009394:	6014      	str	r4, [r2, #0]
 8009396:	4628      	mov	r0, r5
 8009398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939c:	f000 b8dc 	b.w	8009558 <__malloc_unlock>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d908      	bls.n	80093b6 <_free_r+0x42>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	1821      	adds	r1, r4, r0
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf01      	itttt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	1809      	addeq	r1, r1, r0
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	e7ed      	b.n	8009392 <_free_r+0x1e>
 80093b6:	461a      	mov	r2, r3
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b10b      	cbz	r3, 80093c0 <_free_r+0x4c>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d9fa      	bls.n	80093b6 <_free_r+0x42>
 80093c0:	6811      	ldr	r1, [r2, #0]
 80093c2:	1850      	adds	r0, r2, r1
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d10b      	bne.n	80093e0 <_free_r+0x6c>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	4401      	add	r1, r0
 80093cc:	1850      	adds	r0, r2, r1
 80093ce:	4283      	cmp	r3, r0
 80093d0:	6011      	str	r1, [r2, #0]
 80093d2:	d1e0      	bne.n	8009396 <_free_r+0x22>
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	6053      	str	r3, [r2, #4]
 80093da:	4408      	add	r0, r1
 80093dc:	6010      	str	r0, [r2, #0]
 80093de:	e7da      	b.n	8009396 <_free_r+0x22>
 80093e0:	d902      	bls.n	80093e8 <_free_r+0x74>
 80093e2:	230c      	movs	r3, #12
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	e7d6      	b.n	8009396 <_free_r+0x22>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf04      	itt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	bf04      	itt	eq
 80093f8:	1809      	addeq	r1, r1, r0
 80093fa:	6021      	streq	r1, [r4, #0]
 80093fc:	6054      	str	r4, [r2, #4]
 80093fe:	e7ca      	b.n	8009396 <_free_r+0x22>
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	20001f8c 	.word	0x20001f8c

08009408 <sbrk_aligned>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4e0f      	ldr	r6, [pc, #60]	@ (8009448 <sbrk_aligned+0x40>)
 800940c:	460c      	mov	r4, r1
 800940e:	6831      	ldr	r1, [r6, #0]
 8009410:	4605      	mov	r5, r0
 8009412:	b911      	cbnz	r1, 800941a <sbrk_aligned+0x12>
 8009414:	f000 ff36 	bl	800a284 <_sbrk_r>
 8009418:	6030      	str	r0, [r6, #0]
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f000 ff31 	bl	800a284 <_sbrk_r>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d103      	bne.n	800942e <sbrk_aligned+0x26>
 8009426:	f04f 34ff 	mov.w	r4, #4294967295
 800942a:	4620      	mov	r0, r4
 800942c:	bd70      	pop	{r4, r5, r6, pc}
 800942e:	1cc4      	adds	r4, r0, #3
 8009430:	f024 0403 	bic.w	r4, r4, #3
 8009434:	42a0      	cmp	r0, r4
 8009436:	d0f8      	beq.n	800942a <sbrk_aligned+0x22>
 8009438:	1a21      	subs	r1, r4, r0
 800943a:	4628      	mov	r0, r5
 800943c:	f000 ff22 	bl	800a284 <_sbrk_r>
 8009440:	3001      	adds	r0, #1
 8009442:	d1f2      	bne.n	800942a <sbrk_aligned+0x22>
 8009444:	e7ef      	b.n	8009426 <sbrk_aligned+0x1e>
 8009446:	bf00      	nop
 8009448:	20001f88 	.word	0x20001f88

0800944c <_malloc_r>:
 800944c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009450:	1ccd      	adds	r5, r1, #3
 8009452:	f025 0503 	bic.w	r5, r5, #3
 8009456:	3508      	adds	r5, #8
 8009458:	2d0c      	cmp	r5, #12
 800945a:	bf38      	it	cc
 800945c:	250c      	movcc	r5, #12
 800945e:	2d00      	cmp	r5, #0
 8009460:	4606      	mov	r6, r0
 8009462:	db01      	blt.n	8009468 <_malloc_r+0x1c>
 8009464:	42a9      	cmp	r1, r5
 8009466:	d904      	bls.n	8009472 <_malloc_r+0x26>
 8009468:	230c      	movs	r3, #12
 800946a:	6033      	str	r3, [r6, #0]
 800946c:	2000      	movs	r0, #0
 800946e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009472:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009548 <_malloc_r+0xfc>
 8009476:	f000 f869 	bl	800954c <__malloc_lock>
 800947a:	f8d8 3000 	ldr.w	r3, [r8]
 800947e:	461c      	mov	r4, r3
 8009480:	bb44      	cbnz	r4, 80094d4 <_malloc_r+0x88>
 8009482:	4629      	mov	r1, r5
 8009484:	4630      	mov	r0, r6
 8009486:	f7ff ffbf 	bl	8009408 <sbrk_aligned>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	4604      	mov	r4, r0
 800948e:	d158      	bne.n	8009542 <_malloc_r+0xf6>
 8009490:	f8d8 4000 	ldr.w	r4, [r8]
 8009494:	4627      	mov	r7, r4
 8009496:	2f00      	cmp	r7, #0
 8009498:	d143      	bne.n	8009522 <_malloc_r+0xd6>
 800949a:	2c00      	cmp	r4, #0
 800949c:	d04b      	beq.n	8009536 <_malloc_r+0xea>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	4639      	mov	r1, r7
 80094a2:	4630      	mov	r0, r6
 80094a4:	eb04 0903 	add.w	r9, r4, r3
 80094a8:	f000 feec 	bl	800a284 <_sbrk_r>
 80094ac:	4581      	cmp	r9, r0
 80094ae:	d142      	bne.n	8009536 <_malloc_r+0xea>
 80094b0:	6821      	ldr	r1, [r4, #0]
 80094b2:	1a6d      	subs	r5, r5, r1
 80094b4:	4629      	mov	r1, r5
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ffa6 	bl	8009408 <sbrk_aligned>
 80094bc:	3001      	adds	r0, #1
 80094be:	d03a      	beq.n	8009536 <_malloc_r+0xea>
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	442b      	add	r3, r5
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	bb62      	cbnz	r2, 8009528 <_malloc_r+0xdc>
 80094ce:	f8c8 7000 	str.w	r7, [r8]
 80094d2:	e00f      	b.n	80094f4 <_malloc_r+0xa8>
 80094d4:	6822      	ldr	r2, [r4, #0]
 80094d6:	1b52      	subs	r2, r2, r5
 80094d8:	d420      	bmi.n	800951c <_malloc_r+0xd0>
 80094da:	2a0b      	cmp	r2, #11
 80094dc:	d917      	bls.n	800950e <_malloc_r+0xc2>
 80094de:	1961      	adds	r1, r4, r5
 80094e0:	42a3      	cmp	r3, r4
 80094e2:	6025      	str	r5, [r4, #0]
 80094e4:	bf18      	it	ne
 80094e6:	6059      	strne	r1, [r3, #4]
 80094e8:	6863      	ldr	r3, [r4, #4]
 80094ea:	bf08      	it	eq
 80094ec:	f8c8 1000 	streq.w	r1, [r8]
 80094f0:	5162      	str	r2, [r4, r5]
 80094f2:	604b      	str	r3, [r1, #4]
 80094f4:	4630      	mov	r0, r6
 80094f6:	f000 f82f 	bl	8009558 <__malloc_unlock>
 80094fa:	f104 000b 	add.w	r0, r4, #11
 80094fe:	1d23      	adds	r3, r4, #4
 8009500:	f020 0007 	bic.w	r0, r0, #7
 8009504:	1ac2      	subs	r2, r0, r3
 8009506:	bf1c      	itt	ne
 8009508:	1a1b      	subne	r3, r3, r0
 800950a:	50a3      	strne	r3, [r4, r2]
 800950c:	e7af      	b.n	800946e <_malloc_r+0x22>
 800950e:	6862      	ldr	r2, [r4, #4]
 8009510:	42a3      	cmp	r3, r4
 8009512:	bf0c      	ite	eq
 8009514:	f8c8 2000 	streq.w	r2, [r8]
 8009518:	605a      	strne	r2, [r3, #4]
 800951a:	e7eb      	b.n	80094f4 <_malloc_r+0xa8>
 800951c:	4623      	mov	r3, r4
 800951e:	6864      	ldr	r4, [r4, #4]
 8009520:	e7ae      	b.n	8009480 <_malloc_r+0x34>
 8009522:	463c      	mov	r4, r7
 8009524:	687f      	ldr	r7, [r7, #4]
 8009526:	e7b6      	b.n	8009496 <_malloc_r+0x4a>
 8009528:	461a      	mov	r2, r3
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	42a3      	cmp	r3, r4
 800952e:	d1fb      	bne.n	8009528 <_malloc_r+0xdc>
 8009530:	2300      	movs	r3, #0
 8009532:	6053      	str	r3, [r2, #4]
 8009534:	e7de      	b.n	80094f4 <_malloc_r+0xa8>
 8009536:	230c      	movs	r3, #12
 8009538:	6033      	str	r3, [r6, #0]
 800953a:	4630      	mov	r0, r6
 800953c:	f000 f80c 	bl	8009558 <__malloc_unlock>
 8009540:	e794      	b.n	800946c <_malloc_r+0x20>
 8009542:	6005      	str	r5, [r0, #0]
 8009544:	e7d6      	b.n	80094f4 <_malloc_r+0xa8>
 8009546:	bf00      	nop
 8009548:	20001f8c 	.word	0x20001f8c

0800954c <__malloc_lock>:
 800954c:	4801      	ldr	r0, [pc, #4]	@ (8009554 <__malloc_lock+0x8>)
 800954e:	f7ff bf0f 	b.w	8009370 <__retarget_lock_acquire_recursive>
 8009552:	bf00      	nop
 8009554:	20001f84 	.word	0x20001f84

08009558 <__malloc_unlock>:
 8009558:	4801      	ldr	r0, [pc, #4]	@ (8009560 <__malloc_unlock+0x8>)
 800955a:	f7ff bf0a 	b.w	8009372 <__retarget_lock_release_recursive>
 800955e:	bf00      	nop
 8009560:	20001f84 	.word	0x20001f84

08009564 <__ssputs_r>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	688e      	ldr	r6, [r1, #8]
 800956a:	461f      	mov	r7, r3
 800956c:	42be      	cmp	r6, r7
 800956e:	680b      	ldr	r3, [r1, #0]
 8009570:	4682      	mov	sl, r0
 8009572:	460c      	mov	r4, r1
 8009574:	4690      	mov	r8, r2
 8009576:	d82d      	bhi.n	80095d4 <__ssputs_r+0x70>
 8009578:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800957c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009580:	d026      	beq.n	80095d0 <__ssputs_r+0x6c>
 8009582:	6965      	ldr	r5, [r4, #20]
 8009584:	6909      	ldr	r1, [r1, #16]
 8009586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800958a:	eba3 0901 	sub.w	r9, r3, r1
 800958e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009592:	1c7b      	adds	r3, r7, #1
 8009594:	444b      	add	r3, r9
 8009596:	106d      	asrs	r5, r5, #1
 8009598:	429d      	cmp	r5, r3
 800959a:	bf38      	it	cc
 800959c:	461d      	movcc	r5, r3
 800959e:	0553      	lsls	r3, r2, #21
 80095a0:	d527      	bpl.n	80095f2 <__ssputs_r+0x8e>
 80095a2:	4629      	mov	r1, r5
 80095a4:	f7ff ff52 	bl	800944c <_malloc_r>
 80095a8:	4606      	mov	r6, r0
 80095aa:	b360      	cbz	r0, 8009606 <__ssputs_r+0xa2>
 80095ac:	6921      	ldr	r1, [r4, #16]
 80095ae:	464a      	mov	r2, r9
 80095b0:	f000 fe78 	bl	800a2a4 <memcpy>
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	6126      	str	r6, [r4, #16]
 80095c2:	6165      	str	r5, [r4, #20]
 80095c4:	444e      	add	r6, r9
 80095c6:	eba5 0509 	sub.w	r5, r5, r9
 80095ca:	6026      	str	r6, [r4, #0]
 80095cc:	60a5      	str	r5, [r4, #8]
 80095ce:	463e      	mov	r6, r7
 80095d0:	42be      	cmp	r6, r7
 80095d2:	d900      	bls.n	80095d6 <__ssputs_r+0x72>
 80095d4:	463e      	mov	r6, r7
 80095d6:	6820      	ldr	r0, [r4, #0]
 80095d8:	4632      	mov	r2, r6
 80095da:	4641      	mov	r1, r8
 80095dc:	f000 fe37 	bl	800a24e <memmove>
 80095e0:	68a3      	ldr	r3, [r4, #8]
 80095e2:	1b9b      	subs	r3, r3, r6
 80095e4:	60a3      	str	r3, [r4, #8]
 80095e6:	6823      	ldr	r3, [r4, #0]
 80095e8:	4433      	add	r3, r6
 80095ea:	6023      	str	r3, [r4, #0]
 80095ec:	2000      	movs	r0, #0
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	462a      	mov	r2, r5
 80095f4:	f000 fe64 	bl	800a2c0 <_realloc_r>
 80095f8:	4606      	mov	r6, r0
 80095fa:	2800      	cmp	r0, #0
 80095fc:	d1e0      	bne.n	80095c0 <__ssputs_r+0x5c>
 80095fe:	6921      	ldr	r1, [r4, #16]
 8009600:	4650      	mov	r0, sl
 8009602:	f7ff feb7 	bl	8009374 <_free_r>
 8009606:	230c      	movs	r3, #12
 8009608:	f8ca 3000 	str.w	r3, [sl]
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	f04f 30ff 	mov.w	r0, #4294967295
 8009618:	e7e9      	b.n	80095ee <__ssputs_r+0x8a>
	...

0800961c <_svfiprintf_r>:
 800961c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009620:	4698      	mov	r8, r3
 8009622:	898b      	ldrh	r3, [r1, #12]
 8009624:	061b      	lsls	r3, r3, #24
 8009626:	b09d      	sub	sp, #116	@ 0x74
 8009628:	4607      	mov	r7, r0
 800962a:	460d      	mov	r5, r1
 800962c:	4614      	mov	r4, r2
 800962e:	d510      	bpl.n	8009652 <_svfiprintf_r+0x36>
 8009630:	690b      	ldr	r3, [r1, #16]
 8009632:	b973      	cbnz	r3, 8009652 <_svfiprintf_r+0x36>
 8009634:	2140      	movs	r1, #64	@ 0x40
 8009636:	f7ff ff09 	bl	800944c <_malloc_r>
 800963a:	6028      	str	r0, [r5, #0]
 800963c:	6128      	str	r0, [r5, #16]
 800963e:	b930      	cbnz	r0, 800964e <_svfiprintf_r+0x32>
 8009640:	230c      	movs	r3, #12
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	b01d      	add	sp, #116	@ 0x74
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	2340      	movs	r3, #64	@ 0x40
 8009650:	616b      	str	r3, [r5, #20]
 8009652:	2300      	movs	r3, #0
 8009654:	9309      	str	r3, [sp, #36]	@ 0x24
 8009656:	2320      	movs	r3, #32
 8009658:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800965c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009660:	2330      	movs	r3, #48	@ 0x30
 8009662:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009800 <_svfiprintf_r+0x1e4>
 8009666:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800966a:	f04f 0901 	mov.w	r9, #1
 800966e:	4623      	mov	r3, r4
 8009670:	469a      	mov	sl, r3
 8009672:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009676:	b10a      	cbz	r2, 800967c <_svfiprintf_r+0x60>
 8009678:	2a25      	cmp	r2, #37	@ 0x25
 800967a:	d1f9      	bne.n	8009670 <_svfiprintf_r+0x54>
 800967c:	ebba 0b04 	subs.w	fp, sl, r4
 8009680:	d00b      	beq.n	800969a <_svfiprintf_r+0x7e>
 8009682:	465b      	mov	r3, fp
 8009684:	4622      	mov	r2, r4
 8009686:	4629      	mov	r1, r5
 8009688:	4638      	mov	r0, r7
 800968a:	f7ff ff6b 	bl	8009564 <__ssputs_r>
 800968e:	3001      	adds	r0, #1
 8009690:	f000 80a7 	beq.w	80097e2 <_svfiprintf_r+0x1c6>
 8009694:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009696:	445a      	add	r2, fp
 8009698:	9209      	str	r2, [sp, #36]	@ 0x24
 800969a:	f89a 3000 	ldrb.w	r3, [sl]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 809f 	beq.w	80097e2 <_svfiprintf_r+0x1c6>
 80096a4:	2300      	movs	r3, #0
 80096a6:	f04f 32ff 	mov.w	r2, #4294967295
 80096aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ae:	f10a 0a01 	add.w	sl, sl, #1
 80096b2:	9304      	str	r3, [sp, #16]
 80096b4:	9307      	str	r3, [sp, #28]
 80096b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80096bc:	4654      	mov	r4, sl
 80096be:	2205      	movs	r2, #5
 80096c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096c4:	484e      	ldr	r0, [pc, #312]	@ (8009800 <_svfiprintf_r+0x1e4>)
 80096c6:	f7f6 fda3 	bl	8000210 <memchr>
 80096ca:	9a04      	ldr	r2, [sp, #16]
 80096cc:	b9d8      	cbnz	r0, 8009706 <_svfiprintf_r+0xea>
 80096ce:	06d0      	lsls	r0, r2, #27
 80096d0:	bf44      	itt	mi
 80096d2:	2320      	movmi	r3, #32
 80096d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096d8:	0711      	lsls	r1, r2, #28
 80096da:	bf44      	itt	mi
 80096dc:	232b      	movmi	r3, #43	@ 0x2b
 80096de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80096e2:	f89a 3000 	ldrb.w	r3, [sl]
 80096e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80096e8:	d015      	beq.n	8009716 <_svfiprintf_r+0xfa>
 80096ea:	9a07      	ldr	r2, [sp, #28]
 80096ec:	4654      	mov	r4, sl
 80096ee:	2000      	movs	r0, #0
 80096f0:	f04f 0c0a 	mov.w	ip, #10
 80096f4:	4621      	mov	r1, r4
 80096f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096fa:	3b30      	subs	r3, #48	@ 0x30
 80096fc:	2b09      	cmp	r3, #9
 80096fe:	d94b      	bls.n	8009798 <_svfiprintf_r+0x17c>
 8009700:	b1b0      	cbz	r0, 8009730 <_svfiprintf_r+0x114>
 8009702:	9207      	str	r2, [sp, #28]
 8009704:	e014      	b.n	8009730 <_svfiprintf_r+0x114>
 8009706:	eba0 0308 	sub.w	r3, r0, r8
 800970a:	fa09 f303 	lsl.w	r3, r9, r3
 800970e:	4313      	orrs	r3, r2
 8009710:	9304      	str	r3, [sp, #16]
 8009712:	46a2      	mov	sl, r4
 8009714:	e7d2      	b.n	80096bc <_svfiprintf_r+0xa0>
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	1d19      	adds	r1, r3, #4
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	9103      	str	r1, [sp, #12]
 800971e:	2b00      	cmp	r3, #0
 8009720:	bfbb      	ittet	lt
 8009722:	425b      	neglt	r3, r3
 8009724:	f042 0202 	orrlt.w	r2, r2, #2
 8009728:	9307      	strge	r3, [sp, #28]
 800972a:	9307      	strlt	r3, [sp, #28]
 800972c:	bfb8      	it	lt
 800972e:	9204      	strlt	r2, [sp, #16]
 8009730:	7823      	ldrb	r3, [r4, #0]
 8009732:	2b2e      	cmp	r3, #46	@ 0x2e
 8009734:	d10a      	bne.n	800974c <_svfiprintf_r+0x130>
 8009736:	7863      	ldrb	r3, [r4, #1]
 8009738:	2b2a      	cmp	r3, #42	@ 0x2a
 800973a:	d132      	bne.n	80097a2 <_svfiprintf_r+0x186>
 800973c:	9b03      	ldr	r3, [sp, #12]
 800973e:	1d1a      	adds	r2, r3, #4
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	9203      	str	r2, [sp, #12]
 8009744:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009748:	3402      	adds	r4, #2
 800974a:	9305      	str	r3, [sp, #20]
 800974c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009810 <_svfiprintf_r+0x1f4>
 8009750:	7821      	ldrb	r1, [r4, #0]
 8009752:	2203      	movs	r2, #3
 8009754:	4650      	mov	r0, sl
 8009756:	f7f6 fd5b 	bl	8000210 <memchr>
 800975a:	b138      	cbz	r0, 800976c <_svfiprintf_r+0x150>
 800975c:	9b04      	ldr	r3, [sp, #16]
 800975e:	eba0 000a 	sub.w	r0, r0, sl
 8009762:	2240      	movs	r2, #64	@ 0x40
 8009764:	4082      	lsls	r2, r0
 8009766:	4313      	orrs	r3, r2
 8009768:	3401      	adds	r4, #1
 800976a:	9304      	str	r3, [sp, #16]
 800976c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009770:	4824      	ldr	r0, [pc, #144]	@ (8009804 <_svfiprintf_r+0x1e8>)
 8009772:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009776:	2206      	movs	r2, #6
 8009778:	f7f6 fd4a 	bl	8000210 <memchr>
 800977c:	2800      	cmp	r0, #0
 800977e:	d036      	beq.n	80097ee <_svfiprintf_r+0x1d2>
 8009780:	4b21      	ldr	r3, [pc, #132]	@ (8009808 <_svfiprintf_r+0x1ec>)
 8009782:	bb1b      	cbnz	r3, 80097cc <_svfiprintf_r+0x1b0>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	3307      	adds	r3, #7
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	3308      	adds	r3, #8
 800978e:	9303      	str	r3, [sp, #12]
 8009790:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009792:	4433      	add	r3, r6
 8009794:	9309      	str	r3, [sp, #36]	@ 0x24
 8009796:	e76a      	b.n	800966e <_svfiprintf_r+0x52>
 8009798:	fb0c 3202 	mla	r2, ip, r2, r3
 800979c:	460c      	mov	r4, r1
 800979e:	2001      	movs	r0, #1
 80097a0:	e7a8      	b.n	80096f4 <_svfiprintf_r+0xd8>
 80097a2:	2300      	movs	r3, #0
 80097a4:	3401      	adds	r4, #1
 80097a6:	9305      	str	r3, [sp, #20]
 80097a8:	4619      	mov	r1, r3
 80097aa:	f04f 0c0a 	mov.w	ip, #10
 80097ae:	4620      	mov	r0, r4
 80097b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097b4:	3a30      	subs	r2, #48	@ 0x30
 80097b6:	2a09      	cmp	r2, #9
 80097b8:	d903      	bls.n	80097c2 <_svfiprintf_r+0x1a6>
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d0c6      	beq.n	800974c <_svfiprintf_r+0x130>
 80097be:	9105      	str	r1, [sp, #20]
 80097c0:	e7c4      	b.n	800974c <_svfiprintf_r+0x130>
 80097c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80097c6:	4604      	mov	r4, r0
 80097c8:	2301      	movs	r3, #1
 80097ca:	e7f0      	b.n	80097ae <_svfiprintf_r+0x192>
 80097cc:	ab03      	add	r3, sp, #12
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	462a      	mov	r2, r5
 80097d2:	4b0e      	ldr	r3, [pc, #56]	@ (800980c <_svfiprintf_r+0x1f0>)
 80097d4:	a904      	add	r1, sp, #16
 80097d6:	4638      	mov	r0, r7
 80097d8:	f3af 8000 	nop.w
 80097dc:	1c42      	adds	r2, r0, #1
 80097de:	4606      	mov	r6, r0
 80097e0:	d1d6      	bne.n	8009790 <_svfiprintf_r+0x174>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	065b      	lsls	r3, r3, #25
 80097e6:	f53f af2d 	bmi.w	8009644 <_svfiprintf_r+0x28>
 80097ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80097ec:	e72c      	b.n	8009648 <_svfiprintf_r+0x2c>
 80097ee:	ab03      	add	r3, sp, #12
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	462a      	mov	r2, r5
 80097f4:	4b05      	ldr	r3, [pc, #20]	@ (800980c <_svfiprintf_r+0x1f0>)
 80097f6:	a904      	add	r1, sp, #16
 80097f8:	4638      	mov	r0, r7
 80097fa:	f000 fa49 	bl	8009c90 <_printf_i>
 80097fe:	e7ed      	b.n	80097dc <_svfiprintf_r+0x1c0>
 8009800:	0800a6cd 	.word	0x0800a6cd
 8009804:	0800a6d7 	.word	0x0800a6d7
 8009808:	00000000 	.word	0x00000000
 800980c:	08009565 	.word	0x08009565
 8009810:	0800a6d3 	.word	0x0800a6d3

08009814 <_sungetc_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	1c4b      	adds	r3, r1, #1
 8009818:	4614      	mov	r4, r2
 800981a:	d103      	bne.n	8009824 <_sungetc_r+0x10>
 800981c:	f04f 35ff 	mov.w	r5, #4294967295
 8009820:	4628      	mov	r0, r5
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	8993      	ldrh	r3, [r2, #12]
 8009826:	f023 0320 	bic.w	r3, r3, #32
 800982a:	8193      	strh	r3, [r2, #12]
 800982c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800982e:	6852      	ldr	r2, [r2, #4]
 8009830:	b2cd      	uxtb	r5, r1
 8009832:	b18b      	cbz	r3, 8009858 <_sungetc_r+0x44>
 8009834:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009836:	4293      	cmp	r3, r2
 8009838:	dd08      	ble.n	800984c <_sungetc_r+0x38>
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	1e5a      	subs	r2, r3, #1
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009844:	6863      	ldr	r3, [r4, #4]
 8009846:	3301      	adds	r3, #1
 8009848:	6063      	str	r3, [r4, #4]
 800984a:	e7e9      	b.n	8009820 <_sungetc_r+0xc>
 800984c:	4621      	mov	r1, r4
 800984e:	f000 fcc4 	bl	800a1da <__submore>
 8009852:	2800      	cmp	r0, #0
 8009854:	d0f1      	beq.n	800983a <_sungetc_r+0x26>
 8009856:	e7e1      	b.n	800981c <_sungetc_r+0x8>
 8009858:	6921      	ldr	r1, [r4, #16]
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	b151      	cbz	r1, 8009874 <_sungetc_r+0x60>
 800985e:	4299      	cmp	r1, r3
 8009860:	d208      	bcs.n	8009874 <_sungetc_r+0x60>
 8009862:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009866:	42a9      	cmp	r1, r5
 8009868:	d104      	bne.n	8009874 <_sungetc_r+0x60>
 800986a:	3b01      	subs	r3, #1
 800986c:	3201      	adds	r2, #1
 800986e:	6023      	str	r3, [r4, #0]
 8009870:	6062      	str	r2, [r4, #4]
 8009872:	e7d5      	b.n	8009820 <_sungetc_r+0xc>
 8009874:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8009878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800987c:	6363      	str	r3, [r4, #52]	@ 0x34
 800987e:	2303      	movs	r3, #3
 8009880:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009882:	4623      	mov	r3, r4
 8009884:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	2301      	movs	r3, #1
 800988c:	e7dc      	b.n	8009848 <_sungetc_r+0x34>

0800988e <__ssrefill_r>:
 800988e:	b510      	push	{r4, lr}
 8009890:	460c      	mov	r4, r1
 8009892:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009894:	b169      	cbz	r1, 80098b2 <__ssrefill_r+0x24>
 8009896:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800989a:	4299      	cmp	r1, r3
 800989c:	d001      	beq.n	80098a2 <__ssrefill_r+0x14>
 800989e:	f7ff fd69 	bl	8009374 <_free_r>
 80098a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098a4:	6063      	str	r3, [r4, #4]
 80098a6:	2000      	movs	r0, #0
 80098a8:	6360      	str	r0, [r4, #52]	@ 0x34
 80098aa:	b113      	cbz	r3, 80098b2 <__ssrefill_r+0x24>
 80098ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80098ae:	6023      	str	r3, [r4, #0]
 80098b0:	bd10      	pop	{r4, pc}
 80098b2:	6923      	ldr	r3, [r4, #16]
 80098b4:	6023      	str	r3, [r4, #0]
 80098b6:	2300      	movs	r3, #0
 80098b8:	6063      	str	r3, [r4, #4]
 80098ba:	89a3      	ldrh	r3, [r4, #12]
 80098bc:	f043 0320 	orr.w	r3, r3, #32
 80098c0:	81a3      	strh	r3, [r4, #12]
 80098c2:	f04f 30ff 	mov.w	r0, #4294967295
 80098c6:	e7f3      	b.n	80098b0 <__ssrefill_r+0x22>

080098c8 <__ssvfiscanf_r>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	460c      	mov	r4, r1
 80098ce:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80098d2:	2100      	movs	r1, #0
 80098d4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80098d8:	49a6      	ldr	r1, [pc, #664]	@ (8009b74 <__ssvfiscanf_r+0x2ac>)
 80098da:	91a0      	str	r1, [sp, #640]	@ 0x280
 80098dc:	f10d 0804 	add.w	r8, sp, #4
 80098e0:	49a5      	ldr	r1, [pc, #660]	@ (8009b78 <__ssvfiscanf_r+0x2b0>)
 80098e2:	4fa6      	ldr	r7, [pc, #664]	@ (8009b7c <__ssvfiscanf_r+0x2b4>)
 80098e4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80098e8:	4606      	mov	r6, r0
 80098ea:	91a1      	str	r1, [sp, #644]	@ 0x284
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	f892 9000 	ldrb.w	r9, [r2]
 80098f2:	f1b9 0f00 	cmp.w	r9, #0
 80098f6:	f000 8158 	beq.w	8009baa <__ssvfiscanf_r+0x2e2>
 80098fa:	f817 3009 	ldrb.w	r3, [r7, r9]
 80098fe:	f013 0308 	ands.w	r3, r3, #8
 8009902:	f102 0501 	add.w	r5, r2, #1
 8009906:	d019      	beq.n	800993c <__ssvfiscanf_r+0x74>
 8009908:	6863      	ldr	r3, [r4, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	dd0f      	ble.n	800992e <__ssvfiscanf_r+0x66>
 800990e:	6823      	ldr	r3, [r4, #0]
 8009910:	781a      	ldrb	r2, [r3, #0]
 8009912:	5cba      	ldrb	r2, [r7, r2]
 8009914:	0712      	lsls	r2, r2, #28
 8009916:	d401      	bmi.n	800991c <__ssvfiscanf_r+0x54>
 8009918:	462a      	mov	r2, r5
 800991a:	e7e8      	b.n	80098ee <__ssvfiscanf_r+0x26>
 800991c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800991e:	3201      	adds	r2, #1
 8009920:	9245      	str	r2, [sp, #276]	@ 0x114
 8009922:	6862      	ldr	r2, [r4, #4]
 8009924:	3301      	adds	r3, #1
 8009926:	3a01      	subs	r2, #1
 8009928:	6062      	str	r2, [r4, #4]
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	e7ec      	b.n	8009908 <__ssvfiscanf_r+0x40>
 800992e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009930:	4621      	mov	r1, r4
 8009932:	4630      	mov	r0, r6
 8009934:	4798      	blx	r3
 8009936:	2800      	cmp	r0, #0
 8009938:	d0e9      	beq.n	800990e <__ssvfiscanf_r+0x46>
 800993a:	e7ed      	b.n	8009918 <__ssvfiscanf_r+0x50>
 800993c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8009940:	f040 8085 	bne.w	8009a4e <__ssvfiscanf_r+0x186>
 8009944:	9341      	str	r3, [sp, #260]	@ 0x104
 8009946:	9343      	str	r3, [sp, #268]	@ 0x10c
 8009948:	7853      	ldrb	r3, [r2, #1]
 800994a:	2b2a      	cmp	r3, #42	@ 0x2a
 800994c:	bf02      	ittt	eq
 800994e:	2310      	moveq	r3, #16
 8009950:	1c95      	addeq	r5, r2, #2
 8009952:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009954:	220a      	movs	r2, #10
 8009956:	46aa      	mov	sl, r5
 8009958:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800995c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009960:	2b09      	cmp	r3, #9
 8009962:	d91e      	bls.n	80099a2 <__ssvfiscanf_r+0xda>
 8009964:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8009b80 <__ssvfiscanf_r+0x2b8>
 8009968:	2203      	movs	r2, #3
 800996a:	4658      	mov	r0, fp
 800996c:	f7f6 fc50 	bl	8000210 <memchr>
 8009970:	b138      	cbz	r0, 8009982 <__ssvfiscanf_r+0xba>
 8009972:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009974:	eba0 000b 	sub.w	r0, r0, fp
 8009978:	2301      	movs	r3, #1
 800997a:	4083      	lsls	r3, r0
 800997c:	4313      	orrs	r3, r2
 800997e:	9341      	str	r3, [sp, #260]	@ 0x104
 8009980:	4655      	mov	r5, sl
 8009982:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009986:	2b78      	cmp	r3, #120	@ 0x78
 8009988:	d806      	bhi.n	8009998 <__ssvfiscanf_r+0xd0>
 800998a:	2b57      	cmp	r3, #87	@ 0x57
 800998c:	d810      	bhi.n	80099b0 <__ssvfiscanf_r+0xe8>
 800998e:	2b25      	cmp	r3, #37	@ 0x25
 8009990:	d05d      	beq.n	8009a4e <__ssvfiscanf_r+0x186>
 8009992:	d857      	bhi.n	8009a44 <__ssvfiscanf_r+0x17c>
 8009994:	2b00      	cmp	r3, #0
 8009996:	d075      	beq.n	8009a84 <__ssvfiscanf_r+0x1bc>
 8009998:	2303      	movs	r3, #3
 800999a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800999c:	230a      	movs	r3, #10
 800999e:	9342      	str	r3, [sp, #264]	@ 0x108
 80099a0:	e088      	b.n	8009ab4 <__ssvfiscanf_r+0x1ec>
 80099a2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80099a4:	fb02 1103 	mla	r1, r2, r3, r1
 80099a8:	3930      	subs	r1, #48	@ 0x30
 80099aa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80099ac:	4655      	mov	r5, sl
 80099ae:	e7d2      	b.n	8009956 <__ssvfiscanf_r+0x8e>
 80099b0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80099b4:	2a20      	cmp	r2, #32
 80099b6:	d8ef      	bhi.n	8009998 <__ssvfiscanf_r+0xd0>
 80099b8:	a101      	add	r1, pc, #4	@ (adr r1, 80099c0 <__ssvfiscanf_r+0xf8>)
 80099ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80099be:	bf00      	nop
 80099c0:	08009a93 	.word	0x08009a93
 80099c4:	08009999 	.word	0x08009999
 80099c8:	08009999 	.word	0x08009999
 80099cc:	08009aed 	.word	0x08009aed
 80099d0:	08009999 	.word	0x08009999
 80099d4:	08009999 	.word	0x08009999
 80099d8:	08009999 	.word	0x08009999
 80099dc:	08009999 	.word	0x08009999
 80099e0:	08009999 	.word	0x08009999
 80099e4:	08009999 	.word	0x08009999
 80099e8:	08009999 	.word	0x08009999
 80099ec:	08009b03 	.word	0x08009b03
 80099f0:	08009ae9 	.word	0x08009ae9
 80099f4:	08009a4b 	.word	0x08009a4b
 80099f8:	08009a4b 	.word	0x08009a4b
 80099fc:	08009a4b 	.word	0x08009a4b
 8009a00:	08009999 	.word	0x08009999
 8009a04:	08009aa5 	.word	0x08009aa5
 8009a08:	08009999 	.word	0x08009999
 8009a0c:	08009999 	.word	0x08009999
 8009a10:	08009999 	.word	0x08009999
 8009a14:	08009999 	.word	0x08009999
 8009a18:	08009b13 	.word	0x08009b13
 8009a1c:	08009aad 	.word	0x08009aad
 8009a20:	08009a8b 	.word	0x08009a8b
 8009a24:	08009999 	.word	0x08009999
 8009a28:	08009999 	.word	0x08009999
 8009a2c:	08009b0f 	.word	0x08009b0f
 8009a30:	08009999 	.word	0x08009999
 8009a34:	08009ae9 	.word	0x08009ae9
 8009a38:	08009999 	.word	0x08009999
 8009a3c:	08009999 	.word	0x08009999
 8009a40:	08009a93 	.word	0x08009a93
 8009a44:	3b45      	subs	r3, #69	@ 0x45
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d8a6      	bhi.n	8009998 <__ssvfiscanf_r+0xd0>
 8009a4a:	2305      	movs	r3, #5
 8009a4c:	e031      	b.n	8009ab2 <__ssvfiscanf_r+0x1ea>
 8009a4e:	6863      	ldr	r3, [r4, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dd0d      	ble.n	8009a70 <__ssvfiscanf_r+0x1a8>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	781a      	ldrb	r2, [r3, #0]
 8009a58:	454a      	cmp	r2, r9
 8009a5a:	f040 80a6 	bne.w	8009baa <__ssvfiscanf_r+0x2e2>
 8009a5e:	3301      	adds	r3, #1
 8009a60:	6862      	ldr	r2, [r4, #4]
 8009a62:	6023      	str	r3, [r4, #0]
 8009a64:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009a66:	3a01      	subs	r2, #1
 8009a68:	3301      	adds	r3, #1
 8009a6a:	6062      	str	r2, [r4, #4]
 8009a6c:	9345      	str	r3, [sp, #276]	@ 0x114
 8009a6e:	e753      	b.n	8009918 <__ssvfiscanf_r+0x50>
 8009a70:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009a72:	4621      	mov	r1, r4
 8009a74:	4630      	mov	r0, r6
 8009a76:	4798      	blx	r3
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d0eb      	beq.n	8009a54 <__ssvfiscanf_r+0x18c>
 8009a7c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f040 808b 	bne.w	8009b9a <__ssvfiscanf_r+0x2d2>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	e08b      	b.n	8009ba2 <__ssvfiscanf_r+0x2da>
 8009a8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a8c:	f042 0220 	orr.w	r2, r2, #32
 8009a90:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009a94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a98:	9241      	str	r2, [sp, #260]	@ 0x104
 8009a9a:	2210      	movs	r2, #16
 8009a9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8009a9e:	9242      	str	r2, [sp, #264]	@ 0x108
 8009aa0:	d902      	bls.n	8009aa8 <__ssvfiscanf_r+0x1e0>
 8009aa2:	e005      	b.n	8009ab0 <__ssvfiscanf_r+0x1e8>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9342      	str	r3, [sp, #264]	@ 0x108
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e002      	b.n	8009ab2 <__ssvfiscanf_r+0x1ea>
 8009aac:	2308      	movs	r3, #8
 8009aae:	9342      	str	r3, [sp, #264]	@ 0x108
 8009ab0:	2304      	movs	r3, #4
 8009ab2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009ab4:	6863      	ldr	r3, [r4, #4]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	dd39      	ble.n	8009b2e <__ssvfiscanf_r+0x266>
 8009aba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009abc:	0659      	lsls	r1, r3, #25
 8009abe:	d404      	bmi.n	8009aca <__ssvfiscanf_r+0x202>
 8009ac0:	6823      	ldr	r3, [r4, #0]
 8009ac2:	781a      	ldrb	r2, [r3, #0]
 8009ac4:	5cba      	ldrb	r2, [r7, r2]
 8009ac6:	0712      	lsls	r2, r2, #28
 8009ac8:	d438      	bmi.n	8009b3c <__ssvfiscanf_r+0x274>
 8009aca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009acc:	2b02      	cmp	r3, #2
 8009ace:	dc47      	bgt.n	8009b60 <__ssvfiscanf_r+0x298>
 8009ad0:	466b      	mov	r3, sp
 8009ad2:	4622      	mov	r2, r4
 8009ad4:	a941      	add	r1, sp, #260	@ 0x104
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	f000 f9f8 	bl	8009ecc <_scanf_chars>
 8009adc:	2801      	cmp	r0, #1
 8009ade:	d064      	beq.n	8009baa <__ssvfiscanf_r+0x2e2>
 8009ae0:	2802      	cmp	r0, #2
 8009ae2:	f47f af19 	bne.w	8009918 <__ssvfiscanf_r+0x50>
 8009ae6:	e7c9      	b.n	8009a7c <__ssvfiscanf_r+0x1b4>
 8009ae8:	220a      	movs	r2, #10
 8009aea:	e7d7      	b.n	8009a9c <__ssvfiscanf_r+0x1d4>
 8009aec:	4629      	mov	r1, r5
 8009aee:	4640      	mov	r0, r8
 8009af0:	f000 fb3a 	bl	800a168 <__sccl>
 8009af4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009af6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009afa:	9341      	str	r3, [sp, #260]	@ 0x104
 8009afc:	4605      	mov	r5, r0
 8009afe:	2301      	movs	r3, #1
 8009b00:	e7d7      	b.n	8009ab2 <__ssvfiscanf_r+0x1ea>
 8009b02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b08:	9341      	str	r3, [sp, #260]	@ 0x104
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	e7d1      	b.n	8009ab2 <__ssvfiscanf_r+0x1ea>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	e7cf      	b.n	8009ab2 <__ssvfiscanf_r+0x1ea>
 8009b12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009b14:	06c3      	lsls	r3, r0, #27
 8009b16:	f53f aeff 	bmi.w	8009918 <__ssvfiscanf_r+0x50>
 8009b1a:	9b00      	ldr	r3, [sp, #0]
 8009b1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b1e:	1d19      	adds	r1, r3, #4
 8009b20:	9100      	str	r1, [sp, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	07c0      	lsls	r0, r0, #31
 8009b26:	bf4c      	ite	mi
 8009b28:	801a      	strhmi	r2, [r3, #0]
 8009b2a:	601a      	strpl	r2, [r3, #0]
 8009b2c:	e6f4      	b.n	8009918 <__ssvfiscanf_r+0x50>
 8009b2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b30:	4621      	mov	r1, r4
 8009b32:	4630      	mov	r0, r6
 8009b34:	4798      	blx	r3
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d0bf      	beq.n	8009aba <__ssvfiscanf_r+0x1f2>
 8009b3a:	e79f      	b.n	8009a7c <__ssvfiscanf_r+0x1b4>
 8009b3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b3e:	3201      	adds	r2, #1
 8009b40:	9245      	str	r2, [sp, #276]	@ 0x114
 8009b42:	6862      	ldr	r2, [r4, #4]
 8009b44:	3a01      	subs	r2, #1
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	6062      	str	r2, [r4, #4]
 8009b4a:	dd02      	ble.n	8009b52 <__ssvfiscanf_r+0x28a>
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	e7b6      	b.n	8009ac0 <__ssvfiscanf_r+0x1f8>
 8009b52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b54:	4621      	mov	r1, r4
 8009b56:	4630      	mov	r0, r6
 8009b58:	4798      	blx	r3
 8009b5a:	2800      	cmp	r0, #0
 8009b5c:	d0b0      	beq.n	8009ac0 <__ssvfiscanf_r+0x1f8>
 8009b5e:	e78d      	b.n	8009a7c <__ssvfiscanf_r+0x1b4>
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	dc0f      	bgt.n	8009b84 <__ssvfiscanf_r+0x2bc>
 8009b64:	466b      	mov	r3, sp
 8009b66:	4622      	mov	r2, r4
 8009b68:	a941      	add	r1, sp, #260	@ 0x104
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f000 fa08 	bl	8009f80 <_scanf_i>
 8009b70:	e7b4      	b.n	8009adc <__ssvfiscanf_r+0x214>
 8009b72:	bf00      	nop
 8009b74:	08009815 	.word	0x08009815
 8009b78:	0800988f 	.word	0x0800988f
 8009b7c:	0800a5cd 	.word	0x0800a5cd
 8009b80:	0800a6d3 	.word	0x0800a6d3
 8009b84:	4b0a      	ldr	r3, [pc, #40]	@ (8009bb0 <__ssvfiscanf_r+0x2e8>)
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f43f aec6 	beq.w	8009918 <__ssvfiscanf_r+0x50>
 8009b8c:	466b      	mov	r3, sp
 8009b8e:	4622      	mov	r2, r4
 8009b90:	a941      	add	r1, sp, #260	@ 0x104
 8009b92:	4630      	mov	r0, r6
 8009b94:	f3af 8000 	nop.w
 8009b98:	e7a0      	b.n	8009adc <__ssvfiscanf_r+0x214>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	065b      	lsls	r3, r3, #25
 8009b9e:	f53f af71 	bmi.w	8009a84 <__ssvfiscanf_r+0x1bc>
 8009ba2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8009ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009baa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009bac:	e7f9      	b.n	8009ba2 <__ssvfiscanf_r+0x2da>
 8009bae:	bf00      	nop
 8009bb0:	00000000 	.word	0x00000000

08009bb4 <_printf_common>:
 8009bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bb8:	4616      	mov	r6, r2
 8009bba:	4698      	mov	r8, r3
 8009bbc:	688a      	ldr	r2, [r1, #8]
 8009bbe:	690b      	ldr	r3, [r1, #16]
 8009bc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	bfb8      	it	lt
 8009bc8:	4613      	movlt	r3, r2
 8009bca:	6033      	str	r3, [r6, #0]
 8009bcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bd0:	4607      	mov	r7, r0
 8009bd2:	460c      	mov	r4, r1
 8009bd4:	b10a      	cbz	r2, 8009bda <_printf_common+0x26>
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	6033      	str	r3, [r6, #0]
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	0699      	lsls	r1, r3, #26
 8009bde:	bf42      	ittt	mi
 8009be0:	6833      	ldrmi	r3, [r6, #0]
 8009be2:	3302      	addmi	r3, #2
 8009be4:	6033      	strmi	r3, [r6, #0]
 8009be6:	6825      	ldr	r5, [r4, #0]
 8009be8:	f015 0506 	ands.w	r5, r5, #6
 8009bec:	d106      	bne.n	8009bfc <_printf_common+0x48>
 8009bee:	f104 0a19 	add.w	sl, r4, #25
 8009bf2:	68e3      	ldr	r3, [r4, #12]
 8009bf4:	6832      	ldr	r2, [r6, #0]
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dc26      	bgt.n	8009c4a <_printf_common+0x96>
 8009bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c00:	6822      	ldr	r2, [r4, #0]
 8009c02:	3b00      	subs	r3, #0
 8009c04:	bf18      	it	ne
 8009c06:	2301      	movne	r3, #1
 8009c08:	0692      	lsls	r2, r2, #26
 8009c0a:	d42b      	bmi.n	8009c64 <_printf_common+0xb0>
 8009c0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c10:	4641      	mov	r1, r8
 8009c12:	4638      	mov	r0, r7
 8009c14:	47c8      	blx	r9
 8009c16:	3001      	adds	r0, #1
 8009c18:	d01e      	beq.n	8009c58 <_printf_common+0xa4>
 8009c1a:	6823      	ldr	r3, [r4, #0]
 8009c1c:	6922      	ldr	r2, [r4, #16]
 8009c1e:	f003 0306 	and.w	r3, r3, #6
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	bf02      	ittt	eq
 8009c26:	68e5      	ldreq	r5, [r4, #12]
 8009c28:	6833      	ldreq	r3, [r6, #0]
 8009c2a:	1aed      	subeq	r5, r5, r3
 8009c2c:	68a3      	ldr	r3, [r4, #8]
 8009c2e:	bf0c      	ite	eq
 8009c30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c34:	2500      	movne	r5, #0
 8009c36:	4293      	cmp	r3, r2
 8009c38:	bfc4      	itt	gt
 8009c3a:	1a9b      	subgt	r3, r3, r2
 8009c3c:	18ed      	addgt	r5, r5, r3
 8009c3e:	2600      	movs	r6, #0
 8009c40:	341a      	adds	r4, #26
 8009c42:	42b5      	cmp	r5, r6
 8009c44:	d11a      	bne.n	8009c7c <_printf_common+0xc8>
 8009c46:	2000      	movs	r0, #0
 8009c48:	e008      	b.n	8009c5c <_printf_common+0xa8>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	4641      	mov	r1, r8
 8009c50:	4638      	mov	r0, r7
 8009c52:	47c8      	blx	r9
 8009c54:	3001      	adds	r0, #1
 8009c56:	d103      	bne.n	8009c60 <_printf_common+0xac>
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c60:	3501      	adds	r5, #1
 8009c62:	e7c6      	b.n	8009bf2 <_printf_common+0x3e>
 8009c64:	18e1      	adds	r1, r4, r3
 8009c66:	1c5a      	adds	r2, r3, #1
 8009c68:	2030      	movs	r0, #48	@ 0x30
 8009c6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c6e:	4422      	add	r2, r4
 8009c70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c78:	3302      	adds	r3, #2
 8009c7a:	e7c7      	b.n	8009c0c <_printf_common+0x58>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4622      	mov	r2, r4
 8009c80:	4641      	mov	r1, r8
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c8      	blx	r9
 8009c86:	3001      	adds	r0, #1
 8009c88:	d0e6      	beq.n	8009c58 <_printf_common+0xa4>
 8009c8a:	3601      	adds	r6, #1
 8009c8c:	e7d9      	b.n	8009c42 <_printf_common+0x8e>
	...

08009c90 <_printf_i>:
 8009c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c94:	7e0f      	ldrb	r7, [r1, #24]
 8009c96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c98:	2f78      	cmp	r7, #120	@ 0x78
 8009c9a:	4691      	mov	r9, r2
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	469a      	mov	sl, r3
 8009ca2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ca6:	d807      	bhi.n	8009cb8 <_printf_i+0x28>
 8009ca8:	2f62      	cmp	r7, #98	@ 0x62
 8009caa:	d80a      	bhi.n	8009cc2 <_printf_i+0x32>
 8009cac:	2f00      	cmp	r7, #0
 8009cae:	f000 80d1 	beq.w	8009e54 <_printf_i+0x1c4>
 8009cb2:	2f58      	cmp	r7, #88	@ 0x58
 8009cb4:	f000 80b8 	beq.w	8009e28 <_printf_i+0x198>
 8009cb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cc0:	e03a      	b.n	8009d38 <_printf_i+0xa8>
 8009cc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cc6:	2b15      	cmp	r3, #21
 8009cc8:	d8f6      	bhi.n	8009cb8 <_printf_i+0x28>
 8009cca:	a101      	add	r1, pc, #4	@ (adr r1, 8009cd0 <_printf_i+0x40>)
 8009ccc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cd0:	08009d29 	.word	0x08009d29
 8009cd4:	08009d3d 	.word	0x08009d3d
 8009cd8:	08009cb9 	.word	0x08009cb9
 8009cdc:	08009cb9 	.word	0x08009cb9
 8009ce0:	08009cb9 	.word	0x08009cb9
 8009ce4:	08009cb9 	.word	0x08009cb9
 8009ce8:	08009d3d 	.word	0x08009d3d
 8009cec:	08009cb9 	.word	0x08009cb9
 8009cf0:	08009cb9 	.word	0x08009cb9
 8009cf4:	08009cb9 	.word	0x08009cb9
 8009cf8:	08009cb9 	.word	0x08009cb9
 8009cfc:	08009e3b 	.word	0x08009e3b
 8009d00:	08009d67 	.word	0x08009d67
 8009d04:	08009df5 	.word	0x08009df5
 8009d08:	08009cb9 	.word	0x08009cb9
 8009d0c:	08009cb9 	.word	0x08009cb9
 8009d10:	08009e5d 	.word	0x08009e5d
 8009d14:	08009cb9 	.word	0x08009cb9
 8009d18:	08009d67 	.word	0x08009d67
 8009d1c:	08009cb9 	.word	0x08009cb9
 8009d20:	08009cb9 	.word	0x08009cb9
 8009d24:	08009dfd 	.word	0x08009dfd
 8009d28:	6833      	ldr	r3, [r6, #0]
 8009d2a:	1d1a      	adds	r2, r3, #4
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	6032      	str	r2, [r6, #0]
 8009d30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d34:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e09c      	b.n	8009e76 <_printf_i+0x1e6>
 8009d3c:	6833      	ldr	r3, [r6, #0]
 8009d3e:	6820      	ldr	r0, [r4, #0]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	6031      	str	r1, [r6, #0]
 8009d44:	0606      	lsls	r6, r0, #24
 8009d46:	d501      	bpl.n	8009d4c <_printf_i+0xbc>
 8009d48:	681d      	ldr	r5, [r3, #0]
 8009d4a:	e003      	b.n	8009d54 <_printf_i+0xc4>
 8009d4c:	0645      	lsls	r5, r0, #25
 8009d4e:	d5fb      	bpl.n	8009d48 <_printf_i+0xb8>
 8009d50:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d54:	2d00      	cmp	r5, #0
 8009d56:	da03      	bge.n	8009d60 <_printf_i+0xd0>
 8009d58:	232d      	movs	r3, #45	@ 0x2d
 8009d5a:	426d      	negs	r5, r5
 8009d5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d60:	4858      	ldr	r0, [pc, #352]	@ (8009ec4 <_printf_i+0x234>)
 8009d62:	230a      	movs	r3, #10
 8009d64:	e011      	b.n	8009d8a <_printf_i+0xfa>
 8009d66:	6821      	ldr	r1, [r4, #0]
 8009d68:	6833      	ldr	r3, [r6, #0]
 8009d6a:	0608      	lsls	r0, r1, #24
 8009d6c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d70:	d402      	bmi.n	8009d78 <_printf_i+0xe8>
 8009d72:	0649      	lsls	r1, r1, #25
 8009d74:	bf48      	it	mi
 8009d76:	b2ad      	uxthmi	r5, r5
 8009d78:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d7a:	4852      	ldr	r0, [pc, #328]	@ (8009ec4 <_printf_i+0x234>)
 8009d7c:	6033      	str	r3, [r6, #0]
 8009d7e:	bf14      	ite	ne
 8009d80:	230a      	movne	r3, #10
 8009d82:	2308      	moveq	r3, #8
 8009d84:	2100      	movs	r1, #0
 8009d86:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d8a:	6866      	ldr	r6, [r4, #4]
 8009d8c:	60a6      	str	r6, [r4, #8]
 8009d8e:	2e00      	cmp	r6, #0
 8009d90:	db05      	blt.n	8009d9e <_printf_i+0x10e>
 8009d92:	6821      	ldr	r1, [r4, #0]
 8009d94:	432e      	orrs	r6, r5
 8009d96:	f021 0104 	bic.w	r1, r1, #4
 8009d9a:	6021      	str	r1, [r4, #0]
 8009d9c:	d04b      	beq.n	8009e36 <_printf_i+0x1a6>
 8009d9e:	4616      	mov	r6, r2
 8009da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009da4:	fb03 5711 	mls	r7, r3, r1, r5
 8009da8:	5dc7      	ldrb	r7, [r0, r7]
 8009daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dae:	462f      	mov	r7, r5
 8009db0:	42bb      	cmp	r3, r7
 8009db2:	460d      	mov	r5, r1
 8009db4:	d9f4      	bls.n	8009da0 <_printf_i+0x110>
 8009db6:	2b08      	cmp	r3, #8
 8009db8:	d10b      	bne.n	8009dd2 <_printf_i+0x142>
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	07df      	lsls	r7, r3, #31
 8009dbe:	d508      	bpl.n	8009dd2 <_printf_i+0x142>
 8009dc0:	6923      	ldr	r3, [r4, #16]
 8009dc2:	6861      	ldr	r1, [r4, #4]
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	bfde      	ittt	le
 8009dc8:	2330      	movle	r3, #48	@ 0x30
 8009dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dd2:	1b92      	subs	r2, r2, r6
 8009dd4:	6122      	str	r2, [r4, #16]
 8009dd6:	f8cd a000 	str.w	sl, [sp]
 8009dda:	464b      	mov	r3, r9
 8009ddc:	aa03      	add	r2, sp, #12
 8009dde:	4621      	mov	r1, r4
 8009de0:	4640      	mov	r0, r8
 8009de2:	f7ff fee7 	bl	8009bb4 <_printf_common>
 8009de6:	3001      	adds	r0, #1
 8009de8:	d14a      	bne.n	8009e80 <_printf_i+0x1f0>
 8009dea:	f04f 30ff 	mov.w	r0, #4294967295
 8009dee:	b004      	add	sp, #16
 8009df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	f043 0320 	orr.w	r3, r3, #32
 8009dfa:	6023      	str	r3, [r4, #0]
 8009dfc:	4832      	ldr	r0, [pc, #200]	@ (8009ec8 <_printf_i+0x238>)
 8009dfe:	2778      	movs	r7, #120	@ 0x78
 8009e00:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	6831      	ldr	r1, [r6, #0]
 8009e08:	061f      	lsls	r7, r3, #24
 8009e0a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e0e:	d402      	bmi.n	8009e16 <_printf_i+0x186>
 8009e10:	065f      	lsls	r7, r3, #25
 8009e12:	bf48      	it	mi
 8009e14:	b2ad      	uxthmi	r5, r5
 8009e16:	6031      	str	r1, [r6, #0]
 8009e18:	07d9      	lsls	r1, r3, #31
 8009e1a:	bf44      	itt	mi
 8009e1c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e20:	6023      	strmi	r3, [r4, #0]
 8009e22:	b11d      	cbz	r5, 8009e2c <_printf_i+0x19c>
 8009e24:	2310      	movs	r3, #16
 8009e26:	e7ad      	b.n	8009d84 <_printf_i+0xf4>
 8009e28:	4826      	ldr	r0, [pc, #152]	@ (8009ec4 <_printf_i+0x234>)
 8009e2a:	e7e9      	b.n	8009e00 <_printf_i+0x170>
 8009e2c:	6823      	ldr	r3, [r4, #0]
 8009e2e:	f023 0320 	bic.w	r3, r3, #32
 8009e32:	6023      	str	r3, [r4, #0]
 8009e34:	e7f6      	b.n	8009e24 <_printf_i+0x194>
 8009e36:	4616      	mov	r6, r2
 8009e38:	e7bd      	b.n	8009db6 <_printf_i+0x126>
 8009e3a:	6833      	ldr	r3, [r6, #0]
 8009e3c:	6825      	ldr	r5, [r4, #0]
 8009e3e:	6961      	ldr	r1, [r4, #20]
 8009e40:	1d18      	adds	r0, r3, #4
 8009e42:	6030      	str	r0, [r6, #0]
 8009e44:	062e      	lsls	r6, r5, #24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0x1be>
 8009e4a:	6019      	str	r1, [r3, #0]
 8009e4c:	e002      	b.n	8009e54 <_printf_i+0x1c4>
 8009e4e:	0668      	lsls	r0, r5, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0x1ba>
 8009e52:	8019      	strh	r1, [r3, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	4616      	mov	r6, r2
 8009e5a:	e7bc      	b.n	8009dd6 <_printf_i+0x146>
 8009e5c:	6833      	ldr	r3, [r6, #0]
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	6032      	str	r2, [r6, #0]
 8009e62:	681e      	ldr	r6, [r3, #0]
 8009e64:	6862      	ldr	r2, [r4, #4]
 8009e66:	2100      	movs	r1, #0
 8009e68:	4630      	mov	r0, r6
 8009e6a:	f7f6 f9d1 	bl	8000210 <memchr>
 8009e6e:	b108      	cbz	r0, 8009e74 <_printf_i+0x1e4>
 8009e70:	1b80      	subs	r0, r0, r6
 8009e72:	6060      	str	r0, [r4, #4]
 8009e74:	6863      	ldr	r3, [r4, #4]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e7e:	e7aa      	b.n	8009dd6 <_printf_i+0x146>
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	4632      	mov	r2, r6
 8009e84:	4649      	mov	r1, r9
 8009e86:	4640      	mov	r0, r8
 8009e88:	47d0      	blx	sl
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d0ad      	beq.n	8009dea <_printf_i+0x15a>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	079b      	lsls	r3, r3, #30
 8009e92:	d413      	bmi.n	8009ebc <_printf_i+0x22c>
 8009e94:	68e0      	ldr	r0, [r4, #12]
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	bfb8      	it	lt
 8009e9c:	4618      	movlt	r0, r3
 8009e9e:	e7a6      	b.n	8009dee <_printf_i+0x15e>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4632      	mov	r2, r6
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	47d0      	blx	sl
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d09d      	beq.n	8009dea <_printf_i+0x15a>
 8009eae:	3501      	adds	r5, #1
 8009eb0:	68e3      	ldr	r3, [r4, #12]
 8009eb2:	9903      	ldr	r1, [sp, #12]
 8009eb4:	1a5b      	subs	r3, r3, r1
 8009eb6:	42ab      	cmp	r3, r5
 8009eb8:	dcf2      	bgt.n	8009ea0 <_printf_i+0x210>
 8009eba:	e7eb      	b.n	8009e94 <_printf_i+0x204>
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	f104 0619 	add.w	r6, r4, #25
 8009ec2:	e7f5      	b.n	8009eb0 <_printf_i+0x220>
 8009ec4:	0800a6de 	.word	0x0800a6de
 8009ec8:	0800a6ef 	.word	0x0800a6ef

08009ecc <_scanf_chars>:
 8009ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed0:	4615      	mov	r5, r2
 8009ed2:	688a      	ldr	r2, [r1, #8]
 8009ed4:	4680      	mov	r8, r0
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	b932      	cbnz	r2, 8009ee8 <_scanf_chars+0x1c>
 8009eda:	698a      	ldr	r2, [r1, #24]
 8009edc:	2a00      	cmp	r2, #0
 8009ede:	bf14      	ite	ne
 8009ee0:	f04f 32ff 	movne.w	r2, #4294967295
 8009ee4:	2201      	moveq	r2, #1
 8009ee6:	608a      	str	r2, [r1, #8]
 8009ee8:	6822      	ldr	r2, [r4, #0]
 8009eea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009f7c <_scanf_chars+0xb0>
 8009eee:	06d1      	lsls	r1, r2, #27
 8009ef0:	bf5f      	itttt	pl
 8009ef2:	681a      	ldrpl	r2, [r3, #0]
 8009ef4:	1d11      	addpl	r1, r2, #4
 8009ef6:	6019      	strpl	r1, [r3, #0]
 8009ef8:	6816      	ldrpl	r6, [r2, #0]
 8009efa:	2700      	movs	r7, #0
 8009efc:	69a0      	ldr	r0, [r4, #24]
 8009efe:	b188      	cbz	r0, 8009f24 <_scanf_chars+0x58>
 8009f00:	2801      	cmp	r0, #1
 8009f02:	d107      	bne.n	8009f14 <_scanf_chars+0x48>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	781a      	ldrb	r2, [r3, #0]
 8009f08:	6963      	ldr	r3, [r4, #20]
 8009f0a:	5c9b      	ldrb	r3, [r3, r2]
 8009f0c:	b953      	cbnz	r3, 8009f24 <_scanf_chars+0x58>
 8009f0e:	2f00      	cmp	r7, #0
 8009f10:	d031      	beq.n	8009f76 <_scanf_chars+0xaa>
 8009f12:	e022      	b.n	8009f5a <_scanf_chars+0x8e>
 8009f14:	2802      	cmp	r0, #2
 8009f16:	d120      	bne.n	8009f5a <_scanf_chars+0x8e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009f20:	071b      	lsls	r3, r3, #28
 8009f22:	d41a      	bmi.n	8009f5a <_scanf_chars+0x8e>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	06da      	lsls	r2, r3, #27
 8009f28:	bf5e      	ittt	pl
 8009f2a:	682b      	ldrpl	r3, [r5, #0]
 8009f2c:	781b      	ldrbpl	r3, [r3, #0]
 8009f2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009f32:	682a      	ldr	r2, [r5, #0]
 8009f34:	686b      	ldr	r3, [r5, #4]
 8009f36:	3201      	adds	r2, #1
 8009f38:	602a      	str	r2, [r5, #0]
 8009f3a:	68a2      	ldr	r2, [r4, #8]
 8009f3c:	3b01      	subs	r3, #1
 8009f3e:	3a01      	subs	r2, #1
 8009f40:	606b      	str	r3, [r5, #4]
 8009f42:	3701      	adds	r7, #1
 8009f44:	60a2      	str	r2, [r4, #8]
 8009f46:	b142      	cbz	r2, 8009f5a <_scanf_chars+0x8e>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	dcd7      	bgt.n	8009efc <_scanf_chars+0x30>
 8009f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009f50:	4629      	mov	r1, r5
 8009f52:	4640      	mov	r0, r8
 8009f54:	4798      	blx	r3
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d0d0      	beq.n	8009efc <_scanf_chars+0x30>
 8009f5a:	6823      	ldr	r3, [r4, #0]
 8009f5c:	f013 0310 	ands.w	r3, r3, #16
 8009f60:	d105      	bne.n	8009f6e <_scanf_chars+0xa2>
 8009f62:	68e2      	ldr	r2, [r4, #12]
 8009f64:	3201      	adds	r2, #1
 8009f66:	60e2      	str	r2, [r4, #12]
 8009f68:	69a2      	ldr	r2, [r4, #24]
 8009f6a:	b102      	cbz	r2, 8009f6e <_scanf_chars+0xa2>
 8009f6c:	7033      	strb	r3, [r6, #0]
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	443b      	add	r3, r7
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	2000      	movs	r0, #0
 8009f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7a:	bf00      	nop
 8009f7c:	0800a5cd 	.word	0x0800a5cd

08009f80 <_scanf_i>:
 8009f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f84:	4698      	mov	r8, r3
 8009f86:	4b74      	ldr	r3, [pc, #464]	@ (800a158 <_scanf_i+0x1d8>)
 8009f88:	460c      	mov	r4, r1
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	4616      	mov	r6, r2
 8009f8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f92:	b087      	sub	sp, #28
 8009f94:	ab03      	add	r3, sp, #12
 8009f96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009f9a:	4b70      	ldr	r3, [pc, #448]	@ (800a15c <_scanf_i+0x1dc>)
 8009f9c:	69a1      	ldr	r1, [r4, #24]
 8009f9e:	4a70      	ldr	r2, [pc, #448]	@ (800a160 <_scanf_i+0x1e0>)
 8009fa0:	2903      	cmp	r1, #3
 8009fa2:	bf08      	it	eq
 8009fa4:	461a      	moveq	r2, r3
 8009fa6:	68a3      	ldr	r3, [r4, #8]
 8009fa8:	9201      	str	r2, [sp, #4]
 8009faa:	1e5a      	subs	r2, r3, #1
 8009fac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009fb0:	bf88      	it	hi
 8009fb2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009fb6:	4627      	mov	r7, r4
 8009fb8:	bf82      	ittt	hi
 8009fba:	eb03 0905 	addhi.w	r9, r3, r5
 8009fbe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009fc2:	60a3      	strhi	r3, [r4, #8]
 8009fc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009fc8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009fcc:	bf98      	it	ls
 8009fce:	f04f 0900 	movls.w	r9, #0
 8009fd2:	6023      	str	r3, [r4, #0]
 8009fd4:	463d      	mov	r5, r7
 8009fd6:	f04f 0b00 	mov.w	fp, #0
 8009fda:	6831      	ldr	r1, [r6, #0]
 8009fdc:	ab03      	add	r3, sp, #12
 8009fde:	7809      	ldrb	r1, [r1, #0]
 8009fe0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	f7f6 f913 	bl	8000210 <memchr>
 8009fea:	b328      	cbz	r0, 800a038 <_scanf_i+0xb8>
 8009fec:	f1bb 0f01 	cmp.w	fp, #1
 8009ff0:	d159      	bne.n	800a0a6 <_scanf_i+0x126>
 8009ff2:	6862      	ldr	r2, [r4, #4]
 8009ff4:	b92a      	cbnz	r2, 800a002 <_scanf_i+0x82>
 8009ff6:	6822      	ldr	r2, [r4, #0]
 8009ff8:	2108      	movs	r1, #8
 8009ffa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ffe:	6061      	str	r1, [r4, #4]
 800a000:	6022      	str	r2, [r4, #0]
 800a002:	6822      	ldr	r2, [r4, #0]
 800a004:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	68a2      	ldr	r2, [r4, #8]
 800a00c:	1e51      	subs	r1, r2, #1
 800a00e:	60a1      	str	r1, [r4, #8]
 800a010:	b192      	cbz	r2, 800a038 <_scanf_i+0xb8>
 800a012:	6832      	ldr	r2, [r6, #0]
 800a014:	1c51      	adds	r1, r2, #1
 800a016:	6031      	str	r1, [r6, #0]
 800a018:	7812      	ldrb	r2, [r2, #0]
 800a01a:	f805 2b01 	strb.w	r2, [r5], #1
 800a01e:	6872      	ldr	r2, [r6, #4]
 800a020:	3a01      	subs	r2, #1
 800a022:	2a00      	cmp	r2, #0
 800a024:	6072      	str	r2, [r6, #4]
 800a026:	dc07      	bgt.n	800a038 <_scanf_i+0xb8>
 800a028:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a02c:	4631      	mov	r1, r6
 800a02e:	4650      	mov	r0, sl
 800a030:	4790      	blx	r2
 800a032:	2800      	cmp	r0, #0
 800a034:	f040 8085 	bne.w	800a142 <_scanf_i+0x1c2>
 800a038:	f10b 0b01 	add.w	fp, fp, #1
 800a03c:	f1bb 0f03 	cmp.w	fp, #3
 800a040:	d1cb      	bne.n	8009fda <_scanf_i+0x5a>
 800a042:	6863      	ldr	r3, [r4, #4]
 800a044:	b90b      	cbnz	r3, 800a04a <_scanf_i+0xca>
 800a046:	230a      	movs	r3, #10
 800a048:	6063      	str	r3, [r4, #4]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	4945      	ldr	r1, [pc, #276]	@ (800a164 <_scanf_i+0x1e4>)
 800a04e:	6960      	ldr	r0, [r4, #20]
 800a050:	1ac9      	subs	r1, r1, r3
 800a052:	f000 f889 	bl	800a168 <__sccl>
 800a056:	f04f 0b00 	mov.w	fp, #0
 800a05a:	68a3      	ldr	r3, [r4, #8]
 800a05c:	6822      	ldr	r2, [r4, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d03d      	beq.n	800a0de <_scanf_i+0x15e>
 800a062:	6831      	ldr	r1, [r6, #0]
 800a064:	6960      	ldr	r0, [r4, #20]
 800a066:	f891 c000 	ldrb.w	ip, [r1]
 800a06a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a06e:	2800      	cmp	r0, #0
 800a070:	d035      	beq.n	800a0de <_scanf_i+0x15e>
 800a072:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a076:	d124      	bne.n	800a0c2 <_scanf_i+0x142>
 800a078:	0510      	lsls	r0, r2, #20
 800a07a:	d522      	bpl.n	800a0c2 <_scanf_i+0x142>
 800a07c:	f10b 0b01 	add.w	fp, fp, #1
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	d003      	beq.n	800a08e <_scanf_i+0x10e>
 800a086:	3301      	adds	r3, #1
 800a088:	f109 39ff 	add.w	r9, r9, #4294967295
 800a08c:	60a3      	str	r3, [r4, #8]
 800a08e:	6873      	ldr	r3, [r6, #4]
 800a090:	3b01      	subs	r3, #1
 800a092:	2b00      	cmp	r3, #0
 800a094:	6073      	str	r3, [r6, #4]
 800a096:	dd1b      	ble.n	800a0d0 <_scanf_i+0x150>
 800a098:	6833      	ldr	r3, [r6, #0]
 800a09a:	3301      	adds	r3, #1
 800a09c:	6033      	str	r3, [r6, #0]
 800a09e:	68a3      	ldr	r3, [r4, #8]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	60a3      	str	r3, [r4, #8]
 800a0a4:	e7d9      	b.n	800a05a <_scanf_i+0xda>
 800a0a6:	f1bb 0f02 	cmp.w	fp, #2
 800a0aa:	d1ae      	bne.n	800a00a <_scanf_i+0x8a>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a0b2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a0b6:	d1c4      	bne.n	800a042 <_scanf_i+0xc2>
 800a0b8:	2110      	movs	r1, #16
 800a0ba:	6061      	str	r1, [r4, #4]
 800a0bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a0c0:	e7a2      	b.n	800a008 <_scanf_i+0x88>
 800a0c2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	780b      	ldrb	r3, [r1, #0]
 800a0ca:	f805 3b01 	strb.w	r3, [r5], #1
 800a0ce:	e7de      	b.n	800a08e <_scanf_i+0x10e>
 800a0d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a0d4:	4631      	mov	r1, r6
 800a0d6:	4650      	mov	r0, sl
 800a0d8:	4798      	blx	r3
 800a0da:	2800      	cmp	r0, #0
 800a0dc:	d0df      	beq.n	800a09e <_scanf_i+0x11e>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	05d9      	lsls	r1, r3, #23
 800a0e2:	d50d      	bpl.n	800a100 <_scanf_i+0x180>
 800a0e4:	42bd      	cmp	r5, r7
 800a0e6:	d909      	bls.n	800a0fc <_scanf_i+0x17c>
 800a0e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a0ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	4798      	blx	r3
 800a0f6:	f105 39ff 	add.w	r9, r5, #4294967295
 800a0fa:	464d      	mov	r5, r9
 800a0fc:	42bd      	cmp	r5, r7
 800a0fe:	d028      	beq.n	800a152 <_scanf_i+0x1d2>
 800a100:	6822      	ldr	r2, [r4, #0]
 800a102:	f012 0210 	ands.w	r2, r2, #16
 800a106:	d113      	bne.n	800a130 <_scanf_i+0x1b0>
 800a108:	702a      	strb	r2, [r5, #0]
 800a10a:	6863      	ldr	r3, [r4, #4]
 800a10c:	9e01      	ldr	r6, [sp, #4]
 800a10e:	4639      	mov	r1, r7
 800a110:	4650      	mov	r0, sl
 800a112:	47b0      	blx	r6
 800a114:	f8d8 3000 	ldr.w	r3, [r8]
 800a118:	6821      	ldr	r1, [r4, #0]
 800a11a:	1d1a      	adds	r2, r3, #4
 800a11c:	f8c8 2000 	str.w	r2, [r8]
 800a120:	f011 0f20 	tst.w	r1, #32
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	d00f      	beq.n	800a148 <_scanf_i+0x1c8>
 800a128:	6018      	str	r0, [r3, #0]
 800a12a:	68e3      	ldr	r3, [r4, #12]
 800a12c:	3301      	adds	r3, #1
 800a12e:	60e3      	str	r3, [r4, #12]
 800a130:	6923      	ldr	r3, [r4, #16]
 800a132:	1bed      	subs	r5, r5, r7
 800a134:	445d      	add	r5, fp
 800a136:	442b      	add	r3, r5
 800a138:	6123      	str	r3, [r4, #16]
 800a13a:	2000      	movs	r0, #0
 800a13c:	b007      	add	sp, #28
 800a13e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a142:	f04f 0b00 	mov.w	fp, #0
 800a146:	e7ca      	b.n	800a0de <_scanf_i+0x15e>
 800a148:	07ca      	lsls	r2, r1, #31
 800a14a:	bf4c      	ite	mi
 800a14c:	8018      	strhmi	r0, [r3, #0]
 800a14e:	6018      	strpl	r0, [r3, #0]
 800a150:	e7eb      	b.n	800a12a <_scanf_i+0x1aa>
 800a152:	2001      	movs	r0, #1
 800a154:	e7f2      	b.n	800a13c <_scanf_i+0x1bc>
 800a156:	bf00      	nop
 800a158:	0800a5a8 	.word	0x0800a5a8
 800a15c:	080091c5 	.word	0x080091c5
 800a160:	0800a3f9 	.word	0x0800a3f9
 800a164:	0800a710 	.word	0x0800a710

0800a168 <__sccl>:
 800a168:	b570      	push	{r4, r5, r6, lr}
 800a16a:	780b      	ldrb	r3, [r1, #0]
 800a16c:	4604      	mov	r4, r0
 800a16e:	2b5e      	cmp	r3, #94	@ 0x5e
 800a170:	bf0b      	itete	eq
 800a172:	784b      	ldrbeq	r3, [r1, #1]
 800a174:	1c4a      	addne	r2, r1, #1
 800a176:	1c8a      	addeq	r2, r1, #2
 800a178:	2100      	movne	r1, #0
 800a17a:	bf08      	it	eq
 800a17c:	2101      	moveq	r1, #1
 800a17e:	3801      	subs	r0, #1
 800a180:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a184:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a188:	42a8      	cmp	r0, r5
 800a18a:	d1fb      	bne.n	800a184 <__sccl+0x1c>
 800a18c:	b90b      	cbnz	r3, 800a192 <__sccl+0x2a>
 800a18e:	1e50      	subs	r0, r2, #1
 800a190:	bd70      	pop	{r4, r5, r6, pc}
 800a192:	f081 0101 	eor.w	r1, r1, #1
 800a196:	54e1      	strb	r1, [r4, r3]
 800a198:	4610      	mov	r0, r2
 800a19a:	4602      	mov	r2, r0
 800a19c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a1a0:	2d2d      	cmp	r5, #45	@ 0x2d
 800a1a2:	d005      	beq.n	800a1b0 <__sccl+0x48>
 800a1a4:	2d5d      	cmp	r5, #93	@ 0x5d
 800a1a6:	d016      	beq.n	800a1d6 <__sccl+0x6e>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d0f1      	beq.n	800a190 <__sccl+0x28>
 800a1ac:	462b      	mov	r3, r5
 800a1ae:	e7f2      	b.n	800a196 <__sccl+0x2e>
 800a1b0:	7846      	ldrb	r6, [r0, #1]
 800a1b2:	2e5d      	cmp	r6, #93	@ 0x5d
 800a1b4:	d0fa      	beq.n	800a1ac <__sccl+0x44>
 800a1b6:	42b3      	cmp	r3, r6
 800a1b8:	dcf8      	bgt.n	800a1ac <__sccl+0x44>
 800a1ba:	3002      	adds	r0, #2
 800a1bc:	461a      	mov	r2, r3
 800a1be:	3201      	adds	r2, #1
 800a1c0:	4296      	cmp	r6, r2
 800a1c2:	54a1      	strb	r1, [r4, r2]
 800a1c4:	dcfb      	bgt.n	800a1be <__sccl+0x56>
 800a1c6:	1af2      	subs	r2, r6, r3
 800a1c8:	3a01      	subs	r2, #1
 800a1ca:	1c5d      	adds	r5, r3, #1
 800a1cc:	42b3      	cmp	r3, r6
 800a1ce:	bfa8      	it	ge
 800a1d0:	2200      	movge	r2, #0
 800a1d2:	18ab      	adds	r3, r5, r2
 800a1d4:	e7e1      	b.n	800a19a <__sccl+0x32>
 800a1d6:	4610      	mov	r0, r2
 800a1d8:	e7da      	b.n	800a190 <__sccl+0x28>

0800a1da <__submore>:
 800a1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1de:	460c      	mov	r4, r1
 800a1e0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a1e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1e6:	4299      	cmp	r1, r3
 800a1e8:	d11d      	bne.n	800a226 <__submore+0x4c>
 800a1ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a1ee:	f7ff f92d 	bl	800944c <_malloc_r>
 800a1f2:	b918      	cbnz	r0, 800a1fc <__submore+0x22>
 800a1f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a200:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a202:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a206:	6360      	str	r0, [r4, #52]	@ 0x34
 800a208:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a20c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a210:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a214:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a218:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a21c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a220:	6020      	str	r0, [r4, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	e7e8      	b.n	800a1f8 <__submore+0x1e>
 800a226:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a228:	0077      	lsls	r7, r6, #1
 800a22a:	463a      	mov	r2, r7
 800a22c:	f000 f848 	bl	800a2c0 <_realloc_r>
 800a230:	4605      	mov	r5, r0
 800a232:	2800      	cmp	r0, #0
 800a234:	d0de      	beq.n	800a1f4 <__submore+0x1a>
 800a236:	eb00 0806 	add.w	r8, r0, r6
 800a23a:	4601      	mov	r1, r0
 800a23c:	4632      	mov	r2, r6
 800a23e:	4640      	mov	r0, r8
 800a240:	f000 f830 	bl	800a2a4 <memcpy>
 800a244:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a248:	f8c4 8000 	str.w	r8, [r4]
 800a24c:	e7e9      	b.n	800a222 <__submore+0x48>

0800a24e <memmove>:
 800a24e:	4288      	cmp	r0, r1
 800a250:	b510      	push	{r4, lr}
 800a252:	eb01 0402 	add.w	r4, r1, r2
 800a256:	d902      	bls.n	800a25e <memmove+0x10>
 800a258:	4284      	cmp	r4, r0
 800a25a:	4623      	mov	r3, r4
 800a25c:	d807      	bhi.n	800a26e <memmove+0x20>
 800a25e:	1e43      	subs	r3, r0, #1
 800a260:	42a1      	cmp	r1, r4
 800a262:	d008      	beq.n	800a276 <memmove+0x28>
 800a264:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a268:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a26c:	e7f8      	b.n	800a260 <memmove+0x12>
 800a26e:	4402      	add	r2, r0
 800a270:	4601      	mov	r1, r0
 800a272:	428a      	cmp	r2, r1
 800a274:	d100      	bne.n	800a278 <memmove+0x2a>
 800a276:	bd10      	pop	{r4, pc}
 800a278:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a27c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a280:	e7f7      	b.n	800a272 <memmove+0x24>
	...

0800a284 <_sbrk_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d06      	ldr	r5, [pc, #24]	@ (800a2a0 <_sbrk_r+0x1c>)
 800a288:	2300      	movs	r3, #0
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	602b      	str	r3, [r5, #0]
 800a290:	f7f6 fe64 	bl	8000f5c <_sbrk>
 800a294:	1c43      	adds	r3, r0, #1
 800a296:	d102      	bne.n	800a29e <_sbrk_r+0x1a>
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	b103      	cbz	r3, 800a29e <_sbrk_r+0x1a>
 800a29c:	6023      	str	r3, [r4, #0]
 800a29e:	bd38      	pop	{r3, r4, r5, pc}
 800a2a0:	20001f80 	.word	0x20001f80

0800a2a4 <memcpy>:
 800a2a4:	440a      	add	r2, r1
 800a2a6:	4291      	cmp	r1, r2
 800a2a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a2ac:	d100      	bne.n	800a2b0 <memcpy+0xc>
 800a2ae:	4770      	bx	lr
 800a2b0:	b510      	push	{r4, lr}
 800a2b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ba:	4291      	cmp	r1, r2
 800a2bc:	d1f9      	bne.n	800a2b2 <memcpy+0xe>
 800a2be:	bd10      	pop	{r4, pc}

0800a2c0 <_realloc_r>:
 800a2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	460d      	mov	r5, r1
 800a2ca:	b921      	cbnz	r1, 800a2d6 <_realloc_r+0x16>
 800a2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	f7ff b8bb 	b.w	800944c <_malloc_r>
 800a2d6:	b92a      	cbnz	r2, 800a2e4 <_realloc_r+0x24>
 800a2d8:	f7ff f84c 	bl	8009374 <_free_r>
 800a2dc:	4625      	mov	r5, r4
 800a2de:	4628      	mov	r0, r5
 800a2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e4:	f000 f88a 	bl	800a3fc <_malloc_usable_size_r>
 800a2e8:	4284      	cmp	r4, r0
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	d802      	bhi.n	800a2f4 <_realloc_r+0x34>
 800a2ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2f2:	d8f4      	bhi.n	800a2de <_realloc_r+0x1e>
 800a2f4:	4621      	mov	r1, r4
 800a2f6:	4638      	mov	r0, r7
 800a2f8:	f7ff f8a8 	bl	800944c <_malloc_r>
 800a2fc:	4680      	mov	r8, r0
 800a2fe:	b908      	cbnz	r0, 800a304 <_realloc_r+0x44>
 800a300:	4645      	mov	r5, r8
 800a302:	e7ec      	b.n	800a2de <_realloc_r+0x1e>
 800a304:	42b4      	cmp	r4, r6
 800a306:	4622      	mov	r2, r4
 800a308:	4629      	mov	r1, r5
 800a30a:	bf28      	it	cs
 800a30c:	4632      	movcs	r2, r6
 800a30e:	f7ff ffc9 	bl	800a2a4 <memcpy>
 800a312:	4629      	mov	r1, r5
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff f82d 	bl	8009374 <_free_r>
 800a31a:	e7f1      	b.n	800a300 <_realloc_r+0x40>

0800a31c <_strtoul_l.isra.0>:
 800a31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a320:	4e34      	ldr	r6, [pc, #208]	@ (800a3f4 <_strtoul_l.isra.0+0xd8>)
 800a322:	4686      	mov	lr, r0
 800a324:	460d      	mov	r5, r1
 800a326:	4628      	mov	r0, r5
 800a328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a32c:	5d37      	ldrb	r7, [r6, r4]
 800a32e:	f017 0708 	ands.w	r7, r7, #8
 800a332:	d1f8      	bne.n	800a326 <_strtoul_l.isra.0+0xa>
 800a334:	2c2d      	cmp	r4, #45	@ 0x2d
 800a336:	d110      	bne.n	800a35a <_strtoul_l.isra.0+0x3e>
 800a338:	782c      	ldrb	r4, [r5, #0]
 800a33a:	2701      	movs	r7, #1
 800a33c:	1c85      	adds	r5, r0, #2
 800a33e:	f033 0010 	bics.w	r0, r3, #16
 800a342:	d115      	bne.n	800a370 <_strtoul_l.isra.0+0x54>
 800a344:	2c30      	cmp	r4, #48	@ 0x30
 800a346:	d10d      	bne.n	800a364 <_strtoul_l.isra.0+0x48>
 800a348:	7828      	ldrb	r0, [r5, #0]
 800a34a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a34e:	2858      	cmp	r0, #88	@ 0x58
 800a350:	d108      	bne.n	800a364 <_strtoul_l.isra.0+0x48>
 800a352:	786c      	ldrb	r4, [r5, #1]
 800a354:	3502      	adds	r5, #2
 800a356:	2310      	movs	r3, #16
 800a358:	e00a      	b.n	800a370 <_strtoul_l.isra.0+0x54>
 800a35a:	2c2b      	cmp	r4, #43	@ 0x2b
 800a35c:	bf04      	itt	eq
 800a35e:	782c      	ldrbeq	r4, [r5, #0]
 800a360:	1c85      	addeq	r5, r0, #2
 800a362:	e7ec      	b.n	800a33e <_strtoul_l.isra.0+0x22>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1f6      	bne.n	800a356 <_strtoul_l.isra.0+0x3a>
 800a368:	2c30      	cmp	r4, #48	@ 0x30
 800a36a:	bf14      	ite	ne
 800a36c:	230a      	movne	r3, #10
 800a36e:	2308      	moveq	r3, #8
 800a370:	f04f 38ff 	mov.w	r8, #4294967295
 800a374:	2600      	movs	r6, #0
 800a376:	fbb8 f8f3 	udiv	r8, r8, r3
 800a37a:	fb03 f908 	mul.w	r9, r3, r8
 800a37e:	ea6f 0909 	mvn.w	r9, r9
 800a382:	4630      	mov	r0, r6
 800a384:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a388:	f1bc 0f09 	cmp.w	ip, #9
 800a38c:	d810      	bhi.n	800a3b0 <_strtoul_l.isra.0+0x94>
 800a38e:	4664      	mov	r4, ip
 800a390:	42a3      	cmp	r3, r4
 800a392:	dd1e      	ble.n	800a3d2 <_strtoul_l.isra.0+0xb6>
 800a394:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a398:	d007      	beq.n	800a3aa <_strtoul_l.isra.0+0x8e>
 800a39a:	4580      	cmp	r8, r0
 800a39c:	d316      	bcc.n	800a3cc <_strtoul_l.isra.0+0xb0>
 800a39e:	d101      	bne.n	800a3a4 <_strtoul_l.isra.0+0x88>
 800a3a0:	45a1      	cmp	r9, r4
 800a3a2:	db13      	blt.n	800a3cc <_strtoul_l.isra.0+0xb0>
 800a3a4:	fb00 4003 	mla	r0, r0, r3, r4
 800a3a8:	2601      	movs	r6, #1
 800a3aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3ae:	e7e9      	b.n	800a384 <_strtoul_l.isra.0+0x68>
 800a3b0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a3b4:	f1bc 0f19 	cmp.w	ip, #25
 800a3b8:	d801      	bhi.n	800a3be <_strtoul_l.isra.0+0xa2>
 800a3ba:	3c37      	subs	r4, #55	@ 0x37
 800a3bc:	e7e8      	b.n	800a390 <_strtoul_l.isra.0+0x74>
 800a3be:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a3c2:	f1bc 0f19 	cmp.w	ip, #25
 800a3c6:	d804      	bhi.n	800a3d2 <_strtoul_l.isra.0+0xb6>
 800a3c8:	3c57      	subs	r4, #87	@ 0x57
 800a3ca:	e7e1      	b.n	800a390 <_strtoul_l.isra.0+0x74>
 800a3cc:	f04f 36ff 	mov.w	r6, #4294967295
 800a3d0:	e7eb      	b.n	800a3aa <_strtoul_l.isra.0+0x8e>
 800a3d2:	1c73      	adds	r3, r6, #1
 800a3d4:	d106      	bne.n	800a3e4 <_strtoul_l.isra.0+0xc8>
 800a3d6:	2322      	movs	r3, #34	@ 0x22
 800a3d8:	f8ce 3000 	str.w	r3, [lr]
 800a3dc:	4630      	mov	r0, r6
 800a3de:	b932      	cbnz	r2, 800a3ee <_strtoul_l.isra.0+0xd2>
 800a3e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3e4:	b107      	cbz	r7, 800a3e8 <_strtoul_l.isra.0+0xcc>
 800a3e6:	4240      	negs	r0, r0
 800a3e8:	2a00      	cmp	r2, #0
 800a3ea:	d0f9      	beq.n	800a3e0 <_strtoul_l.isra.0+0xc4>
 800a3ec:	b106      	cbz	r6, 800a3f0 <_strtoul_l.isra.0+0xd4>
 800a3ee:	1e69      	subs	r1, r5, #1
 800a3f0:	6011      	str	r1, [r2, #0]
 800a3f2:	e7f5      	b.n	800a3e0 <_strtoul_l.isra.0+0xc4>
 800a3f4:	0800a5cd 	.word	0x0800a5cd

0800a3f8 <_strtoul_r>:
 800a3f8:	f7ff bf90 	b.w	800a31c <_strtoul_l.isra.0>

0800a3fc <_malloc_usable_size_r>:
 800a3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a400:	1f18      	subs	r0, r3, #4
 800a402:	2b00      	cmp	r3, #0
 800a404:	bfbc      	itt	lt
 800a406:	580b      	ldrlt	r3, [r1, r0]
 800a408:	18c0      	addlt	r0, r0, r3
 800a40a:	4770      	bx	lr

0800a40c <_init>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	bf00      	nop
 800a410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a412:	bc08      	pop	{r3}
 800a414:	469e      	mov	lr, r3
 800a416:	4770      	bx	lr

0800a418 <_fini>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr
